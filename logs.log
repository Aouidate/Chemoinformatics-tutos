2023-08-11 11:32:41,774:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-11 11:32:41,774:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-11 11:32:41,774:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-11 11:32:41,774:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-11 11:32:42,732:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-08-11 11:34:33,960:INFO:PyCaret RegressionExperiment
2023-08-11 11:34:33,960:INFO:Logging name: reg-default-name
2023-08-11 11:34:33,960:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 11:34:33,960:INFO:version 3.0.2
2023-08-11 11:34:33,960:INFO:Initializing setup()
2023-08-11 11:34:33,960:INFO:self.USI: 393d
2023-08-11 11:34:33,961:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 11:34:33,961:INFO:Checking environment
2023-08-11 11:34:33,961:INFO:python_version: 3.7.13
2023-08-11 11:34:33,961:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 11:34:33,961:INFO:machine: x86_64
2023-08-11 11:34:33,961:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 11:34:33,961:INFO:Memory: svmem(total=17179869184, available=1446801408, percent=91.6, used=1854128128, free=41099264, active=1407369216, inactive=1403277312, wired=446758912)
2023-08-11 11:34:33,961:INFO:Physical Core: 8
2023-08-11 11:34:33,961:INFO:Logical Core: 8
2023-08-11 11:34:33,961:INFO:Checking libraries
2023-08-11 11:34:33,961:INFO:System:
2023-08-11 11:34:33,962:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 11:34:33,962:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 11:34:33,962:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 11:34:33,962:INFO:PyCaret required dependencies:
2023-08-11 11:34:33,962:INFO:                 pip: 22.3.1
2023-08-11 11:34:33,962:INFO:          setuptools: 63.4.1
2023-08-11 11:34:33,962:INFO:             pycaret: 3.0.2
2023-08-11 11:34:33,962:INFO:             IPython: 7.33.0
2023-08-11 11:34:33,962:INFO:          ipywidgets: 8.0.2
2023-08-11 11:34:33,962:INFO:                tqdm: 4.64.1
2023-08-11 11:34:33,962:INFO:               numpy: 1.21.5
2023-08-11 11:34:33,962:INFO:              pandas: 1.3.5
2023-08-11 11:34:33,962:INFO:              jinja2: 3.1.2
2023-08-11 11:34:33,963:INFO:               scipy: 1.7.3
2023-08-11 11:34:33,963:INFO:              joblib: 1.2.0
2023-08-11 11:34:33,963:INFO:             sklearn: 1.0.2
2023-08-11 11:34:33,963:INFO:                pyod: 1.0.9
2023-08-11 11:34:33,963:INFO:            imblearn: 0.10.1
2023-08-11 11:34:33,963:INFO:   category_encoders: 2.6.1
2023-08-11 11:34:33,963:INFO:            lightgbm: 3.3.2
2023-08-11 11:34:33,963:INFO:               numba: 0.56.2
2023-08-11 11:34:33,963:INFO:            requests: 2.28.1
2023-08-11 11:34:33,963:INFO:          matplotlib: 3.5.3
2023-08-11 11:34:33,963:INFO:          scikitplot: 0.3.7
2023-08-11 11:34:33,963:INFO:         yellowbrick: 1.5
2023-08-11 11:34:33,963:INFO:              plotly: 5.13.0
2023-08-11 11:34:33,963:INFO:             kaleido: 0.2.1
2023-08-11 11:34:33,963:INFO:         statsmodels: 0.13.2
2023-08-11 11:34:33,964:INFO:              sktime: 0.17.0
2023-08-11 11:34:33,964:INFO:               tbats: 1.1.3
2023-08-11 11:34:33,964:INFO:            pmdarima: 2.0.3
2023-08-11 11:34:33,964:INFO:              psutil: 5.9.2
2023-08-11 11:34:33,964:INFO:PyCaret optional dependencies:
2023-08-11 11:34:33,981:INFO:                shap: Not installed
2023-08-11 11:34:33,983:INFO:           interpret: Not installed
2023-08-11 11:34:33,983:INFO:                umap: 0.5.3
2023-08-11 11:34:33,983:INFO:    pandas_profiling: 3.0.0
2023-08-11 11:34:33,983:INFO:  explainerdashboard: Not installed
2023-08-11 11:34:33,983:INFO:             autoviz: Not installed
2023-08-11 11:34:33,983:INFO:           fairlearn: Not installed
2023-08-11 11:34:33,983:INFO:             xgboost: 1.6.2
2023-08-11 11:34:33,983:INFO:            catboost: 1.0.4
2023-08-11 11:34:33,983:INFO:              kmodes: 0.12.2
2023-08-11 11:34:33,983:INFO:             mlxtend: 0.19.0
2023-08-11 11:34:33,983:INFO:       statsforecast: Not installed
2023-08-11 11:34:33,983:INFO:        tune_sklearn: Not installed
2023-08-11 11:34:33,983:INFO:                 ray: Not installed
2023-08-11 11:34:33,983:INFO:            hyperopt: Not installed
2023-08-11 11:34:33,983:INFO:              optuna: Not installed
2023-08-11 11:34:33,983:INFO:               skopt: Not installed
2023-08-11 11:34:33,983:INFO:              mlflow: 1.29.0
2023-08-11 11:34:33,983:INFO:              gradio: Not installed
2023-08-11 11:34:33,983:INFO:             fastapi: Not installed
2023-08-11 11:34:33,983:INFO:             uvicorn: Not installed
2023-08-11 11:34:33,983:INFO:              m2cgen: Not installed
2023-08-11 11:34:33,984:INFO:           evidently: Not installed
2023-08-11 11:34:33,984:INFO:               fugue: Not installed
2023-08-11 11:34:33,984:INFO:           streamlit: 1.13.0
2023-08-11 11:34:33,984:INFO:             prophet: Not installed
2023-08-11 11:34:33,984:INFO:None
2023-08-11 11:34:33,984:INFO:Set up data.
2023-08-11 11:34:33,989:INFO:Set up train/test split.
2023-08-11 11:34:33,992:INFO:Set up index.
2023-08-11 11:34:33,993:INFO:Set up folding strategy.
2023-08-11 11:34:33,993:INFO:Assigning column types.
2023-08-11 11:34:33,997:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 11:34:33,998:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,006:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,013:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,068:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,105:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,105:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:34:34,254:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:34:34,318:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,322:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,325:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,370:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,405:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,406:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:34:34,408:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:34:34,408:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 11:34:34,412:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,415:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,459:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,495:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,495:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:34:34,497:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:34:34,501:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,505:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,549:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,584:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,584:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:34:34,586:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:34:34,587:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 11:34:34,594:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,638:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,674:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,674:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:34:34,676:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:34:34,683:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,728:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,763:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,763:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:34:34,765:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:34:34,766:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 11:34:34,817:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,853:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,853:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:34:34,855:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:34:34,907:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,942:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:34:34,943:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:34:34,944:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:34:34,945:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 11:34:34,996:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:34:35,032:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:34:35,034:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:34:35,086:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:34:35,121:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:34:35,123:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:34:35,124:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 11:34:35,211:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:34:35,213:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:34:35,300:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:34:35,302:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:34:35,305:INFO:Preparing preprocessing pipeline...
2023-08-11 11:34:35,305:INFO:Set up simple imputation.
2023-08-11 11:34:35,318:INFO:Finished creating preprocessing pipeline.
2023-08-11 11:34:35,320:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ABC', 'nBridgehead', 'ATSC4c',
                                             'GATS2d', 'PEOE_VSA13'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-11 11:34:35,320:INFO:Creating final display dataframe.
2023-08-11 11:34:35,359:INFO:Setup _display_container:                     Description             Value
0                    Session id                 2
1                        Target               pKi
2                   Target type        Regression
3           Original data shape          (316, 6)
4        Transformed data shape          (316, 6)
5   Transformed train set shape          (221, 6)
6    Transformed test set shape           (95, 6)
7              Numeric features                 5
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              393d
2023-08-11 11:34:35,457:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:34:35,459:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:34:35,547:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:34:35,549:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:34:35,550:INFO:setup() successfully completed in 1.59s...............
2023-08-11 11:37:02,485:INFO:Initializing compare_models()
2023-08-11 11:37:02,485:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 11:37:02,485:INFO:Checking exceptions
2023-08-11 11:37:02,489:INFO:Preparing display monitor
2023-08-11 11:37:02,544:INFO:Initializing Linear Regression
2023-08-11 11:37:02,544:INFO:Total runtime is 3.45309575398763e-06 minutes
2023-08-11 11:37:02,548:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:02,549:INFO:Initializing create_model()
2023-08-11 11:37:02,549:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=lr, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:02,549:INFO:Checking exceptions
2023-08-11 11:37:02,549:INFO:Importing libraries
2023-08-11 11:37:02,550:INFO:Copying training dataset
2023-08-11 11:37:02,552:INFO:Defining folds
2023-08-11 11:37:02,552:INFO:Declaring metric variables
2023-08-11 11:37:02,556:INFO:Importing untrained model
2023-08-11 11:37:02,560:INFO:Linear Regression Imported successfully
2023-08-11 11:37:02,565:INFO:Starting cross validation
2023-08-11 11:37:02,570:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:06,194:INFO:Calculating mean and std
2023-08-11 11:37:06,197:INFO:Creating metrics dataframe
2023-08-11 11:37:06,202:INFO:Uploading results into container
2023-08-11 11:37:06,202:INFO:Uploading model into container now
2023-08-11 11:37:06,203:INFO:_master_model_container: 1
2023-08-11 11:37:06,203:INFO:_display_container: 2
2023-08-11 11:37:06,203:INFO:LinearRegression(n_jobs=-1)
2023-08-11 11:37:06,203:INFO:create_model() successfully completed......................................
2023-08-11 11:37:06,386:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:06,386:INFO:Creating metrics dataframe
2023-08-11 11:37:06,394:INFO:Initializing Lasso Regression
2023-08-11 11:37:06,394:INFO:Total runtime is 0.06416501998901367 minutes
2023-08-11 11:37:06,396:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:06,396:INFO:Initializing create_model()
2023-08-11 11:37:06,396:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=lasso, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:06,396:INFO:Checking exceptions
2023-08-11 11:37:06,396:INFO:Importing libraries
2023-08-11 11:37:06,397:INFO:Copying training dataset
2023-08-11 11:37:06,399:INFO:Defining folds
2023-08-11 11:37:06,399:INFO:Declaring metric variables
2023-08-11 11:37:06,401:INFO:Importing untrained model
2023-08-11 11:37:06,403:INFO:Lasso Regression Imported successfully
2023-08-11 11:37:06,407:INFO:Starting cross validation
2023-08-11 11:37:06,408:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:06,498:INFO:Calculating mean and std
2023-08-11 11:37:06,499:INFO:Creating metrics dataframe
2023-08-11 11:37:06,502:INFO:Uploading results into container
2023-08-11 11:37:06,503:INFO:Uploading model into container now
2023-08-11 11:37:06,503:INFO:_master_model_container: 2
2023-08-11 11:37:06,503:INFO:_display_container: 2
2023-08-11 11:37:06,503:INFO:Lasso(random_state=2)
2023-08-11 11:37:06,503:INFO:create_model() successfully completed......................................
2023-08-11 11:37:06,634:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:06,634:INFO:Creating metrics dataframe
2023-08-11 11:37:06,642:INFO:Initializing Ridge Regression
2023-08-11 11:37:06,642:INFO:Total runtime is 0.06829450527826944 minutes
2023-08-11 11:37:06,644:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:06,644:INFO:Initializing create_model()
2023-08-11 11:37:06,644:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=ridge, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:06,644:INFO:Checking exceptions
2023-08-11 11:37:06,644:INFO:Importing libraries
2023-08-11 11:37:06,644:INFO:Copying training dataset
2023-08-11 11:37:06,647:INFO:Defining folds
2023-08-11 11:37:06,647:INFO:Declaring metric variables
2023-08-11 11:37:06,649:INFO:Importing untrained model
2023-08-11 11:37:06,651:INFO:Ridge Regression Imported successfully
2023-08-11 11:37:06,655:INFO:Starting cross validation
2023-08-11 11:37:06,655:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:06,751:INFO:Calculating mean and std
2023-08-11 11:37:06,752:INFO:Creating metrics dataframe
2023-08-11 11:37:06,755:INFO:Uploading results into container
2023-08-11 11:37:06,755:INFO:Uploading model into container now
2023-08-11 11:37:06,755:INFO:_master_model_container: 3
2023-08-11 11:37:06,755:INFO:_display_container: 2
2023-08-11 11:37:06,755:INFO:Ridge(random_state=2)
2023-08-11 11:37:06,755:INFO:create_model() successfully completed......................................
2023-08-11 11:37:06,885:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:06,885:INFO:Creating metrics dataframe
2023-08-11 11:37:06,893:INFO:Initializing Elastic Net
2023-08-11 11:37:06,893:INFO:Total runtime is 0.07248158454895019 minutes
2023-08-11 11:37:06,895:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:06,895:INFO:Initializing create_model()
2023-08-11 11:37:06,895:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=en, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:06,895:INFO:Checking exceptions
2023-08-11 11:37:06,895:INFO:Importing libraries
2023-08-11 11:37:06,895:INFO:Copying training dataset
2023-08-11 11:37:06,898:INFO:Defining folds
2023-08-11 11:37:06,898:INFO:Declaring metric variables
2023-08-11 11:37:06,900:INFO:Importing untrained model
2023-08-11 11:37:06,902:INFO:Elastic Net Imported successfully
2023-08-11 11:37:06,907:INFO:Starting cross validation
2023-08-11 11:37:06,907:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:07,002:INFO:Calculating mean and std
2023-08-11 11:37:07,003:INFO:Creating metrics dataframe
2023-08-11 11:37:07,007:INFO:Uploading results into container
2023-08-11 11:37:07,007:INFO:Uploading model into container now
2023-08-11 11:37:07,007:INFO:_master_model_container: 4
2023-08-11 11:37:07,007:INFO:_display_container: 2
2023-08-11 11:37:07,007:INFO:ElasticNet(random_state=2)
2023-08-11 11:37:07,007:INFO:create_model() successfully completed......................................
2023-08-11 11:37:07,136:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:07,136:INFO:Creating metrics dataframe
2023-08-11 11:37:07,145:INFO:Initializing Least Angle Regression
2023-08-11 11:37:07,145:INFO:Total runtime is 0.07667333682378133 minutes
2023-08-11 11:37:07,147:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:07,147:INFO:Initializing create_model()
2023-08-11 11:37:07,147:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=lar, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:07,147:INFO:Checking exceptions
2023-08-11 11:37:07,147:INFO:Importing libraries
2023-08-11 11:37:07,147:INFO:Copying training dataset
2023-08-11 11:37:07,149:INFO:Defining folds
2023-08-11 11:37:07,149:INFO:Declaring metric variables
2023-08-11 11:37:07,151:INFO:Importing untrained model
2023-08-11 11:37:07,154:INFO:Least Angle Regression Imported successfully
2023-08-11 11:37:07,158:INFO:Starting cross validation
2023-08-11 11:37:07,158:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:07,191:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,195:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,207:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,211:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,216:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,227:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,228:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,232:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,242:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,251:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,259:INFO:Calculating mean and std
2023-08-11 11:37:07,260:INFO:Creating metrics dataframe
2023-08-11 11:37:07,263:INFO:Uploading results into container
2023-08-11 11:37:07,264:INFO:Uploading model into container now
2023-08-11 11:37:07,264:INFO:_master_model_container: 5
2023-08-11 11:37:07,264:INFO:_display_container: 2
2023-08-11 11:37:07,264:INFO:Lars(random_state=2)
2023-08-11 11:37:07,264:INFO:create_model() successfully completed......................................
2023-08-11 11:37:07,394:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:07,394:INFO:Creating metrics dataframe
2023-08-11 11:37:07,402:INFO:Initializing Lasso Least Angle Regression
2023-08-11 11:37:07,402:INFO:Total runtime is 0.08096531629562377 minutes
2023-08-11 11:37:07,404:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:07,404:INFO:Initializing create_model()
2023-08-11 11:37:07,404:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=llar, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:07,404:INFO:Checking exceptions
2023-08-11 11:37:07,405:INFO:Importing libraries
2023-08-11 11:37:07,405:INFO:Copying training dataset
2023-08-11 11:37:07,407:INFO:Defining folds
2023-08-11 11:37:07,407:INFO:Declaring metric variables
2023-08-11 11:37:07,409:INFO:Importing untrained model
2023-08-11 11:37:07,412:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 11:37:07,416:INFO:Starting cross validation
2023-08-11 11:37:07,416:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:07,449:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:07,462:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:07,465:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:07,467:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:07,476:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:07,482:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:07,490:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:07,491:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:07,491:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:07,507:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:07,515:INFO:Calculating mean and std
2023-08-11 11:37:07,516:INFO:Creating metrics dataframe
2023-08-11 11:37:07,519:INFO:Uploading results into container
2023-08-11 11:37:07,519:INFO:Uploading model into container now
2023-08-11 11:37:07,519:INFO:_master_model_container: 6
2023-08-11 11:37:07,519:INFO:_display_container: 2
2023-08-11 11:37:07,520:INFO:LassoLars(random_state=2)
2023-08-11 11:37:07,520:INFO:create_model() successfully completed......................................
2023-08-11 11:37:07,649:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:07,649:INFO:Creating metrics dataframe
2023-08-11 11:37:07,657:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 11:37:07,658:INFO:Total runtime is 0.08522250254948933 minutes
2023-08-11 11:37:07,660:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:07,660:INFO:Initializing create_model()
2023-08-11 11:37:07,660:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=omp, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:07,660:INFO:Checking exceptions
2023-08-11 11:37:07,660:INFO:Importing libraries
2023-08-11 11:37:07,660:INFO:Copying training dataset
2023-08-11 11:37:07,662:INFO:Defining folds
2023-08-11 11:37:07,662:INFO:Declaring metric variables
2023-08-11 11:37:07,664:INFO:Importing untrained model
2023-08-11 11:37:07,667:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 11:37:07,672:INFO:Starting cross validation
2023-08-11 11:37:07,673:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:07,703:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,707:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,723:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,726:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,731:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,739:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,739:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,750:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,755:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,765:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:07,773:INFO:Calculating mean and std
2023-08-11 11:37:07,774:INFO:Creating metrics dataframe
2023-08-11 11:37:07,777:INFO:Uploading results into container
2023-08-11 11:37:07,778:INFO:Uploading model into container now
2023-08-11 11:37:07,778:INFO:_master_model_container: 7
2023-08-11 11:37:07,778:INFO:_display_container: 2
2023-08-11 11:37:07,778:INFO:OrthogonalMatchingPursuit()
2023-08-11 11:37:07,778:INFO:create_model() successfully completed......................................
2023-08-11 11:37:07,907:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:07,907:INFO:Creating metrics dataframe
2023-08-11 11:37:07,916:INFO:Initializing Bayesian Ridge
2023-08-11 11:37:07,916:INFO:Total runtime is 0.08952603340148925 minutes
2023-08-11 11:37:07,918:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:07,918:INFO:Initializing create_model()
2023-08-11 11:37:07,918:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=br, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:07,918:INFO:Checking exceptions
2023-08-11 11:37:07,918:INFO:Importing libraries
2023-08-11 11:37:07,918:INFO:Copying training dataset
2023-08-11 11:37:07,921:INFO:Defining folds
2023-08-11 11:37:07,921:INFO:Declaring metric variables
2023-08-11 11:37:07,923:INFO:Importing untrained model
2023-08-11 11:37:07,925:INFO:Bayesian Ridge Imported successfully
2023-08-11 11:37:07,929:INFO:Starting cross validation
2023-08-11 11:37:07,930:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:08,025:INFO:Calculating mean and std
2023-08-11 11:37:08,026:INFO:Creating metrics dataframe
2023-08-11 11:37:08,029:INFO:Uploading results into container
2023-08-11 11:37:08,029:INFO:Uploading model into container now
2023-08-11 11:37:08,029:INFO:_master_model_container: 8
2023-08-11 11:37:08,029:INFO:_display_container: 2
2023-08-11 11:37:08,029:INFO:BayesianRidge()
2023-08-11 11:37:08,029:INFO:create_model() successfully completed......................................
2023-08-11 11:37:08,159:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:08,159:INFO:Creating metrics dataframe
2023-08-11 11:37:08,167:INFO:Initializing Passive Aggressive Regressor
2023-08-11 11:37:08,167:INFO:Total runtime is 0.09372190237045287 minutes
2023-08-11 11:37:08,169:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:08,170:INFO:Initializing create_model()
2023-08-11 11:37:08,170:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=par, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:08,170:INFO:Checking exceptions
2023-08-11 11:37:08,170:INFO:Importing libraries
2023-08-11 11:37:08,170:INFO:Copying training dataset
2023-08-11 11:37:08,172:INFO:Defining folds
2023-08-11 11:37:08,172:INFO:Declaring metric variables
2023-08-11 11:37:08,174:INFO:Importing untrained model
2023-08-11 11:37:08,177:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 11:37:08,181:INFO:Starting cross validation
2023-08-11 11:37:08,181:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:08,281:INFO:Calculating mean and std
2023-08-11 11:37:08,282:INFO:Creating metrics dataframe
2023-08-11 11:37:08,285:INFO:Uploading results into container
2023-08-11 11:37:08,285:INFO:Uploading model into container now
2023-08-11 11:37:08,285:INFO:_master_model_container: 9
2023-08-11 11:37:08,285:INFO:_display_container: 2
2023-08-11 11:37:08,285:INFO:PassiveAggressiveRegressor(random_state=2)
2023-08-11 11:37:08,285:INFO:create_model() successfully completed......................................
2023-08-11 11:37:08,415:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:08,415:INFO:Creating metrics dataframe
2023-08-11 11:37:08,424:INFO:Initializing Huber Regressor
2023-08-11 11:37:08,424:INFO:Total runtime is 0.09799563884735106 minutes
2023-08-11 11:37:08,426:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:08,426:INFO:Initializing create_model()
2023-08-11 11:37:08,426:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=huber, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:08,426:INFO:Checking exceptions
2023-08-11 11:37:08,426:INFO:Importing libraries
2023-08-11 11:37:08,426:INFO:Copying training dataset
2023-08-11 11:37:08,429:INFO:Defining folds
2023-08-11 11:37:08,429:INFO:Declaring metric variables
2023-08-11 11:37:08,431:INFO:Importing untrained model
2023-08-11 11:37:08,433:INFO:Huber Regressor Imported successfully
2023-08-11 11:37:08,437:INFO:Starting cross validation
2023-08-11 11:37:08,438:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:08,540:INFO:Calculating mean and std
2023-08-11 11:37:08,541:INFO:Creating metrics dataframe
2023-08-11 11:37:08,544:INFO:Uploading results into container
2023-08-11 11:37:08,544:INFO:Uploading model into container now
2023-08-11 11:37:08,544:INFO:_master_model_container: 10
2023-08-11 11:37:08,544:INFO:_display_container: 2
2023-08-11 11:37:08,545:INFO:HuberRegressor()
2023-08-11 11:37:08,545:INFO:create_model() successfully completed......................................
2023-08-11 11:37:08,673:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:08,673:INFO:Creating metrics dataframe
2023-08-11 11:37:08,683:INFO:Initializing K Neighbors Regressor
2023-08-11 11:37:08,683:INFO:Total runtime is 0.102307919661204 minutes
2023-08-11 11:37:08,685:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:08,685:INFO:Initializing create_model()
2023-08-11 11:37:08,685:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=knn, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:08,685:INFO:Checking exceptions
2023-08-11 11:37:08,685:INFO:Importing libraries
2023-08-11 11:37:08,685:INFO:Copying training dataset
2023-08-11 11:37:08,688:INFO:Defining folds
2023-08-11 11:37:08,688:INFO:Declaring metric variables
2023-08-11 11:37:08,690:INFO:Importing untrained model
2023-08-11 11:37:08,692:INFO:K Neighbors Regressor Imported successfully
2023-08-11 11:37:08,696:INFO:Starting cross validation
2023-08-11 11:37:08,697:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:08,990:INFO:Calculating mean and std
2023-08-11 11:37:08,992:INFO:Creating metrics dataframe
2023-08-11 11:37:08,997:INFO:Uploading results into container
2023-08-11 11:37:08,998:INFO:Uploading model into container now
2023-08-11 11:37:08,998:INFO:_master_model_container: 11
2023-08-11 11:37:08,998:INFO:_display_container: 2
2023-08-11 11:37:08,998:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 11:37:08,998:INFO:create_model() successfully completed......................................
2023-08-11 11:37:09,131:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:09,131:INFO:Creating metrics dataframe
2023-08-11 11:37:09,140:INFO:Initializing Decision Tree Regressor
2023-08-11 11:37:09,140:INFO:Total runtime is 0.10993493398030597 minutes
2023-08-11 11:37:09,142:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:09,142:INFO:Initializing create_model()
2023-08-11 11:37:09,142:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=dt, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:09,142:INFO:Checking exceptions
2023-08-11 11:37:09,143:INFO:Importing libraries
2023-08-11 11:37:09,143:INFO:Copying training dataset
2023-08-11 11:37:09,145:INFO:Defining folds
2023-08-11 11:37:09,145:INFO:Declaring metric variables
2023-08-11 11:37:09,147:INFO:Importing untrained model
2023-08-11 11:37:09,149:INFO:Decision Tree Regressor Imported successfully
2023-08-11 11:37:09,154:INFO:Starting cross validation
2023-08-11 11:37:09,155:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:09,254:INFO:Calculating mean and std
2023-08-11 11:37:09,256:INFO:Creating metrics dataframe
2023-08-11 11:37:09,258:INFO:Uploading results into container
2023-08-11 11:37:09,259:INFO:Uploading model into container now
2023-08-11 11:37:09,259:INFO:_master_model_container: 12
2023-08-11 11:37:09,259:INFO:_display_container: 2
2023-08-11 11:37:09,259:INFO:DecisionTreeRegressor(random_state=2)
2023-08-11 11:37:09,259:INFO:create_model() successfully completed......................................
2023-08-11 11:37:09,389:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:09,389:INFO:Creating metrics dataframe
2023-08-11 11:37:09,399:INFO:Initializing Random Forest Regressor
2023-08-11 11:37:09,399:INFO:Total runtime is 0.11424450476964314 minutes
2023-08-11 11:37:09,401:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:09,401:INFO:Initializing create_model()
2023-08-11 11:37:09,401:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=rf, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:09,401:INFO:Checking exceptions
2023-08-11 11:37:09,401:INFO:Importing libraries
2023-08-11 11:37:09,401:INFO:Copying training dataset
2023-08-11 11:37:09,404:INFO:Defining folds
2023-08-11 11:37:09,404:INFO:Declaring metric variables
2023-08-11 11:37:09,406:INFO:Importing untrained model
2023-08-11 11:37:09,408:INFO:Random Forest Regressor Imported successfully
2023-08-11 11:37:09,412:INFO:Starting cross validation
2023-08-11 11:37:09,412:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:10,292:INFO:Calculating mean and std
2023-08-11 11:37:10,294:INFO:Creating metrics dataframe
2023-08-11 11:37:10,302:INFO:Uploading results into container
2023-08-11 11:37:10,303:INFO:Uploading model into container now
2023-08-11 11:37:10,303:INFO:_master_model_container: 13
2023-08-11 11:37:10,303:INFO:_display_container: 2
2023-08-11 11:37:10,304:INFO:RandomForestRegressor(n_jobs=-1, random_state=2)
2023-08-11 11:37:10,304:INFO:create_model() successfully completed......................................
2023-08-11 11:37:10,438:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:10,438:INFO:Creating metrics dataframe
2023-08-11 11:37:10,448:INFO:Initializing Extra Trees Regressor
2023-08-11 11:37:10,448:INFO:Total runtime is 0.1317325194676717 minutes
2023-08-11 11:37:10,450:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:10,450:INFO:Initializing create_model()
2023-08-11 11:37:10,450:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=et, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:10,450:INFO:Checking exceptions
2023-08-11 11:37:10,450:INFO:Importing libraries
2023-08-11 11:37:10,450:INFO:Copying training dataset
2023-08-11 11:37:10,453:INFO:Defining folds
2023-08-11 11:37:10,453:INFO:Declaring metric variables
2023-08-11 11:37:10,455:INFO:Importing untrained model
2023-08-11 11:37:10,457:INFO:Extra Trees Regressor Imported successfully
2023-08-11 11:37:10,462:INFO:Starting cross validation
2023-08-11 11:37:10,463:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:11,213:INFO:Calculating mean and std
2023-08-11 11:37:11,215:INFO:Creating metrics dataframe
2023-08-11 11:37:11,225:INFO:Uploading results into container
2023-08-11 11:37:11,225:INFO:Uploading model into container now
2023-08-11 11:37:11,226:INFO:_master_model_container: 14
2023-08-11 11:37:11,226:INFO:_display_container: 2
2023-08-11 11:37:11,226:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=2)
2023-08-11 11:37:11,226:INFO:create_model() successfully completed......................................
2023-08-11 11:37:11,356:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:11,356:INFO:Creating metrics dataframe
2023-08-11 11:37:11,366:INFO:Initializing AdaBoost Regressor
2023-08-11 11:37:11,366:INFO:Total runtime is 0.14703478415807086 minutes
2023-08-11 11:37:11,368:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:11,368:INFO:Initializing create_model()
2023-08-11 11:37:11,368:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=ada, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:11,368:INFO:Checking exceptions
2023-08-11 11:37:11,368:INFO:Importing libraries
2023-08-11 11:37:11,369:INFO:Copying training dataset
2023-08-11 11:37:11,371:INFO:Defining folds
2023-08-11 11:37:11,371:INFO:Declaring metric variables
2023-08-11 11:37:11,373:INFO:Importing untrained model
2023-08-11 11:37:11,375:INFO:AdaBoost Regressor Imported successfully
2023-08-11 11:37:11,379:INFO:Starting cross validation
2023-08-11 11:37:11,380:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:11,559:INFO:Calculating mean and std
2023-08-11 11:37:11,560:INFO:Creating metrics dataframe
2023-08-11 11:37:11,567:INFO:Uploading results into container
2023-08-11 11:37:11,568:INFO:Uploading model into container now
2023-08-11 11:37:11,568:INFO:_master_model_container: 15
2023-08-11 11:37:11,568:INFO:_display_container: 2
2023-08-11 11:37:11,568:INFO:AdaBoostRegressor(random_state=2)
2023-08-11 11:37:11,568:INFO:create_model() successfully completed......................................
2023-08-11 11:37:11,698:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:11,698:INFO:Creating metrics dataframe
2023-08-11 11:37:11,708:INFO:Initializing Gradient Boosting Regressor
2023-08-11 11:37:11,708:INFO:Total runtime is 0.15272453625996907 minutes
2023-08-11 11:37:11,710:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:11,710:INFO:Initializing create_model()
2023-08-11 11:37:11,710:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=gbr, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:11,710:INFO:Checking exceptions
2023-08-11 11:37:11,710:INFO:Importing libraries
2023-08-11 11:37:11,710:INFO:Copying training dataset
2023-08-11 11:37:11,712:INFO:Defining folds
2023-08-11 11:37:11,713:INFO:Declaring metric variables
2023-08-11 11:37:11,715:INFO:Importing untrained model
2023-08-11 11:37:11,717:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 11:37:11,721:INFO:Starting cross validation
2023-08-11 11:37:11,722:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:11,925:INFO:Calculating mean and std
2023-08-11 11:37:11,927:INFO:Creating metrics dataframe
2023-08-11 11:37:11,933:INFO:Uploading results into container
2023-08-11 11:37:11,934:INFO:Uploading model into container now
2023-08-11 11:37:11,934:INFO:_master_model_container: 16
2023-08-11 11:37:11,934:INFO:_display_container: 2
2023-08-11 11:37:11,934:INFO:GradientBoostingRegressor(random_state=2)
2023-08-11 11:37:11,934:INFO:create_model() successfully completed......................................
2023-08-11 11:37:12,064:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:12,064:INFO:Creating metrics dataframe
2023-08-11 11:37:12,074:INFO:Initializing Extreme Gradient Boosting
2023-08-11 11:37:12,074:INFO:Total runtime is 0.1588279883066813 minutes
2023-08-11 11:37:12,076:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:12,076:INFO:Initializing create_model()
2023-08-11 11:37:12,076:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=xgboost, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:12,076:INFO:Checking exceptions
2023-08-11 11:37:12,076:INFO:Importing libraries
2023-08-11 11:37:12,076:INFO:Copying training dataset
2023-08-11 11:37:12,079:INFO:Defining folds
2023-08-11 11:37:12,079:INFO:Declaring metric variables
2023-08-11 11:37:12,081:INFO:Importing untrained model
2023-08-11 11:37:12,084:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 11:37:12,088:INFO:Starting cross validation
2023-08-11 11:37:12,089:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:12,289:INFO:Calculating mean and std
2023-08-11 11:37:12,290:INFO:Creating metrics dataframe
2023-08-11 11:37:12,297:INFO:Uploading results into container
2023-08-11 11:37:12,297:INFO:Uploading model into container now
2023-08-11 11:37:12,297:INFO:_master_model_container: 17
2023-08-11 11:37:12,297:INFO:_display_container: 2
2023-08-11 11:37:12,298:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=2,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 11:37:12,298:INFO:create_model() successfully completed......................................
2023-08-11 11:37:12,428:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:12,428:INFO:Creating metrics dataframe
2023-08-11 11:37:12,438:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 11:37:12,439:INFO:Total runtime is 0.1649060010910034 minutes
2023-08-11 11:37:12,441:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:12,441:INFO:Initializing create_model()
2023-08-11 11:37:12,441:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:12,441:INFO:Checking exceptions
2023-08-11 11:37:12,441:INFO:Importing libraries
2023-08-11 11:37:12,441:INFO:Copying training dataset
2023-08-11 11:37:12,444:INFO:Defining folds
2023-08-11 11:37:12,444:INFO:Declaring metric variables
2023-08-11 11:37:12,446:INFO:Importing untrained model
2023-08-11 11:37:12,448:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 11:37:12,452:INFO:Starting cross validation
2023-08-11 11:37:12,453:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:12,940:INFO:Calculating mean and std
2023-08-11 11:37:12,941:INFO:Creating metrics dataframe
2023-08-11 11:37:12,948:INFO:Uploading results into container
2023-08-11 11:37:12,948:INFO:Uploading model into container now
2023-08-11 11:37:12,948:INFO:_master_model_container: 18
2023-08-11 11:37:12,948:INFO:_display_container: 2
2023-08-11 11:37:12,948:INFO:LGBMRegressor(random_state=2)
2023-08-11 11:37:12,948:INFO:create_model() successfully completed......................................
2023-08-11 11:37:13,079:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:13,079:INFO:Creating metrics dataframe
2023-08-11 11:37:13,089:INFO:Initializing CatBoost Regressor
2023-08-11 11:37:13,089:INFO:Total runtime is 0.17574987014134721 minutes
2023-08-11 11:37:13,091:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:13,091:INFO:Initializing create_model()
2023-08-11 11:37:13,091:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=catboost, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:13,091:INFO:Checking exceptions
2023-08-11 11:37:13,091:INFO:Importing libraries
2023-08-11 11:37:13,091:INFO:Copying training dataset
2023-08-11 11:37:13,094:INFO:Defining folds
2023-08-11 11:37:13,094:INFO:Declaring metric variables
2023-08-11 11:37:13,096:INFO:Importing untrained model
2023-08-11 11:37:13,101:INFO:CatBoost Regressor Imported successfully
2023-08-11 11:37:13,106:INFO:Starting cross validation
2023-08-11 11:37:13,107:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:15,016:INFO:Calculating mean and std
2023-08-11 11:37:15,017:INFO:Creating metrics dataframe
2023-08-11 11:37:15,026:INFO:Uploading results into container
2023-08-11 11:37:15,026:INFO:Uploading model into container now
2023-08-11 11:37:15,026:INFO:_master_model_container: 19
2023-08-11 11:37:15,026:INFO:_display_container: 2
2023-08-11 11:37:15,026:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d43a16410>
2023-08-11 11:37:15,026:INFO:create_model() successfully completed......................................
2023-08-11 11:37:15,165:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:15,165:INFO:Creating metrics dataframe
2023-08-11 11:37:15,176:INFO:Initializing Dummy Regressor
2023-08-11 11:37:15,176:INFO:Total runtime is 0.2105266213417053 minutes
2023-08-11 11:37:15,178:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:15,178:INFO:Initializing create_model()
2023-08-11 11:37:15,178:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=dummy, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d445dee90>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:15,178:INFO:Checking exceptions
2023-08-11 11:37:15,178:INFO:Importing libraries
2023-08-11 11:37:15,178:INFO:Copying training dataset
2023-08-11 11:37:15,181:INFO:Defining folds
2023-08-11 11:37:15,181:INFO:Declaring metric variables
2023-08-11 11:37:15,183:INFO:Importing untrained model
2023-08-11 11:37:15,185:INFO:Dummy Regressor Imported successfully
2023-08-11 11:37:15,189:INFO:Starting cross validation
2023-08-11 11:37:15,189:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 11:37:15,288:INFO:Calculating mean and std
2023-08-11 11:37:15,290:INFO:Creating metrics dataframe
2023-08-11 11:37:15,298:INFO:Uploading results into container
2023-08-11 11:37:15,298:INFO:Uploading model into container now
2023-08-11 11:37:15,298:INFO:_master_model_container: 20
2023-08-11 11:37:15,298:INFO:_display_container: 2
2023-08-11 11:37:15,299:INFO:DummyRegressor()
2023-08-11 11:37:15,299:INFO:create_model() successfully completed......................................
2023-08-11 11:37:15,431:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:15,431:INFO:Creating metrics dataframe
2023-08-11 11:37:15,448:INFO:Initializing create_model()
2023-08-11 11:37:15,449:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d430a1c50>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=2), fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:15,449:INFO:Checking exceptions
2023-08-11 11:37:15,450:INFO:Importing libraries
2023-08-11 11:37:15,450:INFO:Copying training dataset
2023-08-11 11:37:15,452:INFO:Defining folds
2023-08-11 11:37:15,452:INFO:Declaring metric variables
2023-08-11 11:37:15,452:INFO:Importing untrained model
2023-08-11 11:37:15,452:INFO:Declaring custom model
2023-08-11 11:37:15,453:INFO:Extra Trees Regressor Imported successfully
2023-08-11 11:37:15,453:INFO:Cross validation set to False
2023-08-11 11:37:15,453:INFO:Fitting Model
2023-08-11 11:37:15,657:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=2)
2023-08-11 11:37:15,657:INFO:create_model() successfully completed......................................
2023-08-11 11:37:15,817:INFO:_master_model_container: 20
2023-08-11 11:37:15,817:INFO:_display_container: 2
2023-08-11 11:37:15,817:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=2)
2023-08-11 11:37:15,817:INFO:compare_models() successfully completed......................................
2023-08-11 11:37:30,124:INFO:PyCaret RegressionExperiment
2023-08-11 11:37:30,124:INFO:Logging name: reg-default-name
2023-08-11 11:37:30,124:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 11:37:30,124:INFO:version 3.0.2
2023-08-11 11:37:30,124:INFO:Initializing setup()
2023-08-11 11:37:30,124:INFO:self.USI: 8476
2023-08-11 11:37:30,124:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 11:37:30,124:INFO:Checking environment
2023-08-11 11:37:30,125:INFO:python_version: 3.7.13
2023-08-11 11:37:30,125:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 11:37:30,125:INFO:machine: x86_64
2023-08-11 11:37:30,125:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 11:37:30,125:INFO:Memory: svmem(total=17179869184, available=1350701056, percent=92.1, used=1794068480, free=18296832, active=1337946112, inactive=1331998720, wired=456122368)
2023-08-11 11:37:30,125:INFO:Physical Core: 8
2023-08-11 11:37:30,125:INFO:Logical Core: 8
2023-08-11 11:37:30,125:INFO:Checking libraries
2023-08-11 11:37:30,125:INFO:System:
2023-08-11 11:37:30,125:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 11:37:30,125:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 11:37:30,125:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 11:37:30,125:INFO:PyCaret required dependencies:
2023-08-11 11:37:30,125:INFO:                 pip: 22.3.1
2023-08-11 11:37:30,125:INFO:          setuptools: 63.4.1
2023-08-11 11:37:30,125:INFO:             pycaret: 3.0.2
2023-08-11 11:37:30,125:INFO:             IPython: 7.33.0
2023-08-11 11:37:30,125:INFO:          ipywidgets: 8.0.2
2023-08-11 11:37:30,125:INFO:                tqdm: 4.64.1
2023-08-11 11:37:30,126:INFO:               numpy: 1.21.5
2023-08-11 11:37:30,126:INFO:              pandas: 1.3.5
2023-08-11 11:37:30,126:INFO:              jinja2: 3.1.2
2023-08-11 11:37:30,126:INFO:               scipy: 1.7.3
2023-08-11 11:37:30,126:INFO:              joblib: 1.2.0
2023-08-11 11:37:30,126:INFO:             sklearn: 1.0.2
2023-08-11 11:37:30,126:INFO:                pyod: 1.0.9
2023-08-11 11:37:30,126:INFO:            imblearn: 0.10.1
2023-08-11 11:37:30,126:INFO:   category_encoders: 2.6.1
2023-08-11 11:37:30,126:INFO:            lightgbm: 3.3.2
2023-08-11 11:37:30,126:INFO:               numba: 0.56.2
2023-08-11 11:37:30,126:INFO:            requests: 2.28.1
2023-08-11 11:37:30,126:INFO:          matplotlib: 3.5.3
2023-08-11 11:37:30,126:INFO:          scikitplot: 0.3.7
2023-08-11 11:37:30,126:INFO:         yellowbrick: 1.5
2023-08-11 11:37:30,126:INFO:              plotly: 5.13.0
2023-08-11 11:37:30,126:INFO:             kaleido: 0.2.1
2023-08-11 11:37:30,126:INFO:         statsmodels: 0.13.2
2023-08-11 11:37:30,127:INFO:              sktime: 0.17.0
2023-08-11 11:37:30,127:INFO:               tbats: 1.1.3
2023-08-11 11:37:30,127:INFO:            pmdarima: 2.0.3
2023-08-11 11:37:30,127:INFO:              psutil: 5.9.2
2023-08-11 11:37:30,127:INFO:PyCaret optional dependencies:
2023-08-11 11:37:30,127:INFO:                shap: Not installed
2023-08-11 11:37:30,127:INFO:           interpret: Not installed
2023-08-11 11:37:30,127:INFO:                umap: 0.5.3
2023-08-11 11:37:30,127:INFO:    pandas_profiling: 3.0.0
2023-08-11 11:37:30,127:INFO:  explainerdashboard: Not installed
2023-08-11 11:37:30,127:INFO:             autoviz: Not installed
2023-08-11 11:37:30,127:INFO:           fairlearn: Not installed
2023-08-11 11:37:30,127:INFO:             xgboost: 1.6.2
2023-08-11 11:37:30,127:INFO:            catboost: 1.0.4
2023-08-11 11:37:30,127:INFO:              kmodes: 0.12.2
2023-08-11 11:37:30,127:INFO:             mlxtend: 0.19.0
2023-08-11 11:37:30,127:INFO:       statsforecast: Not installed
2023-08-11 11:37:30,128:INFO:        tune_sklearn: Not installed
2023-08-11 11:37:30,128:INFO:                 ray: Not installed
2023-08-11 11:37:30,128:INFO:            hyperopt: Not installed
2023-08-11 11:37:30,128:INFO:              optuna: Not installed
2023-08-11 11:37:30,128:INFO:               skopt: Not installed
2023-08-11 11:37:30,128:INFO:              mlflow: 1.29.0
2023-08-11 11:37:30,128:INFO:              gradio: Not installed
2023-08-11 11:37:30,128:INFO:             fastapi: Not installed
2023-08-11 11:37:30,128:INFO:             uvicorn: Not installed
2023-08-11 11:37:30,128:INFO:              m2cgen: Not installed
2023-08-11 11:37:30,128:INFO:           evidently: Not installed
2023-08-11 11:37:30,128:INFO:               fugue: Not installed
2023-08-11 11:37:30,128:INFO:           streamlit: 1.13.0
2023-08-11 11:37:30,129:INFO:             prophet: Not installed
2023-08-11 11:37:30,129:INFO:None
2023-08-11 11:37:30,129:INFO:Set up data.
2023-08-11 11:37:30,135:INFO:Set up train/test split.
2023-08-11 11:37:30,137:INFO:Set up index.
2023-08-11 11:37:30,137:INFO:Set up folding strategy.
2023-08-11 11:37:30,137:INFO:Assigning column types.
2023-08-11 11:37:30,143:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 11:37:30,143:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,149:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,155:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,212:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,248:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,249:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:30,251:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:30,251:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,255:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,259:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,304:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,340:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,340:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:30,342:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:30,343:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 11:37:30,347:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,350:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,396:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,432:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,432:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:30,434:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:30,439:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,442:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,487:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,524:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,524:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:30,526:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:30,526:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 11:37:30,534:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,579:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,615:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,615:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:30,617:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:30,625:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,671:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,707:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,707:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:30,709:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:30,710:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 11:37:30,762:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,799:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,799:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:30,801:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:30,854:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,890:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,890:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:30,892:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:30,893:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 11:37:30,945:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:30,981:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:30,983:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:31,034:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:31,071:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:31,073:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:31,073:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 11:37:31,162:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:31,164:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:31,257:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:31,259:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:31,259:INFO:Preparing preprocessing pipeline...
2023-08-11 11:37:31,259:INFO:Set up simple imputation.
2023-08-11 11:37:31,270:INFO:Finished creating preprocessing pipeline.
2023-08-11 11:37:31,272:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ABC', 'nBridgehead', 'ATSC4c',
                                             'GATS2d', 'PEOE_VSA13'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-11 11:37:31,272:INFO:Creating final display dataframe.
2023-08-11 11:37:31,312:INFO:Setup _display_container:                     Description             Value
0                    Session id                10
1                        Target               pKi
2                   Target type        Regression
3           Original data shape          (316, 6)
4        Transformed data shape          (316, 6)
5   Transformed train set shape          (221, 6)
6    Transformed test set shape           (95, 6)
7              Numeric features                 5
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              8476
2023-08-11 11:37:31,405:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:31,407:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:31,496:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:31,498:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:31,498:INFO:setup() successfully completed in 1.39s...............
2023-08-11 11:37:31,504:INFO:Initializing compare_models()
2023-08-11 11:37:31,504:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 11:37:31,504:INFO:Checking exceptions
2023-08-11 11:37:31,506:INFO:Preparing display monitor
2023-08-11 11:37:31,529:INFO:Initializing Linear Regression
2023-08-11 11:37:31,529:INFO:Total runtime is 2.2649765014648438e-06 minutes
2023-08-11 11:37:31,532:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:31,532:INFO:Initializing create_model()
2023-08-11 11:37:31,532:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=lr, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:31,533:INFO:Checking exceptions
2023-08-11 11:37:31,533:INFO:Importing libraries
2023-08-11 11:37:31,533:INFO:Copying training dataset
2023-08-11 11:37:31,535:INFO:Defining folds
2023-08-11 11:37:31,535:INFO:Declaring metric variables
2023-08-11 11:37:31,537:INFO:Importing untrained model
2023-08-11 11:37:31,540:INFO:Linear Regression Imported successfully
2023-08-11 11:37:31,544:INFO:Starting cross validation
2023-08-11 11:37:31,545:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:31,652:INFO:Calculating mean and std
2023-08-11 11:37:31,652:INFO:Creating metrics dataframe
2023-08-11 11:37:31,660:INFO:Uploading results into container
2023-08-11 11:37:31,660:INFO:Uploading model into container now
2023-08-11 11:37:31,661:INFO:_master_model_container: 1
2023-08-11 11:37:31,661:INFO:_display_container: 2
2023-08-11 11:37:31,661:INFO:LinearRegression(n_jobs=-1)
2023-08-11 11:37:31,661:INFO:create_model() successfully completed......................................
2023-08-11 11:37:31,794:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:31,794:INFO:Creating metrics dataframe
2023-08-11 11:37:31,801:INFO:Initializing Lasso Regression
2023-08-11 11:37:31,802:INFO:Total runtime is 0.004543014367421468 minutes
2023-08-11 11:37:31,804:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:31,804:INFO:Initializing create_model()
2023-08-11 11:37:31,804:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=lasso, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:31,804:INFO:Checking exceptions
2023-08-11 11:37:31,804:INFO:Importing libraries
2023-08-11 11:37:31,804:INFO:Copying training dataset
2023-08-11 11:37:31,805:INFO:Defining folds
2023-08-11 11:37:31,805:INFO:Declaring metric variables
2023-08-11 11:37:31,807:INFO:Importing untrained model
2023-08-11 11:37:31,809:INFO:Lasso Regression Imported successfully
2023-08-11 11:37:31,813:INFO:Starting cross validation
2023-08-11 11:37:31,814:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:31,915:INFO:Calculating mean and std
2023-08-11 11:37:31,915:INFO:Creating metrics dataframe
2023-08-11 11:37:31,923:INFO:Uploading results into container
2023-08-11 11:37:31,923:INFO:Uploading model into container now
2023-08-11 11:37:31,924:INFO:_master_model_container: 2
2023-08-11 11:37:31,924:INFO:_display_container: 2
2023-08-11 11:37:31,924:INFO:Lasso(random_state=10)
2023-08-11 11:37:31,924:INFO:create_model() successfully completed......................................
2023-08-11 11:37:32,053:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:32,053:INFO:Creating metrics dataframe
2023-08-11 11:37:32,061:INFO:Initializing Ridge Regression
2023-08-11 11:37:32,061:INFO:Total runtime is 0.008865014712015788 minutes
2023-08-11 11:37:32,063:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:32,063:INFO:Initializing create_model()
2023-08-11 11:37:32,063:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=ridge, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:32,063:INFO:Checking exceptions
2023-08-11 11:37:32,063:INFO:Importing libraries
2023-08-11 11:37:32,063:INFO:Copying training dataset
2023-08-11 11:37:32,065:INFO:Defining folds
2023-08-11 11:37:32,065:INFO:Declaring metric variables
2023-08-11 11:37:32,067:INFO:Importing untrained model
2023-08-11 11:37:32,069:INFO:Ridge Regression Imported successfully
2023-08-11 11:37:32,073:INFO:Starting cross validation
2023-08-11 11:37:32,074:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:32,176:INFO:Calculating mean and std
2023-08-11 11:37:32,177:INFO:Creating metrics dataframe
2023-08-11 11:37:32,184:INFO:Uploading results into container
2023-08-11 11:37:32,185:INFO:Uploading model into container now
2023-08-11 11:37:32,185:INFO:_master_model_container: 3
2023-08-11 11:37:32,185:INFO:_display_container: 2
2023-08-11 11:37:32,185:INFO:Ridge(random_state=10)
2023-08-11 11:37:32,185:INFO:create_model() successfully completed......................................
2023-08-11 11:37:32,314:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:32,314:INFO:Creating metrics dataframe
2023-08-11 11:37:32,322:INFO:Initializing Elastic Net
2023-08-11 11:37:32,323:INFO:Total runtime is 0.013225766023000081 minutes
2023-08-11 11:37:32,325:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:32,325:INFO:Initializing create_model()
2023-08-11 11:37:32,325:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=en, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:32,325:INFO:Checking exceptions
2023-08-11 11:37:32,325:INFO:Importing libraries
2023-08-11 11:37:32,325:INFO:Copying training dataset
2023-08-11 11:37:32,326:INFO:Defining folds
2023-08-11 11:37:32,326:INFO:Declaring metric variables
2023-08-11 11:37:32,328:INFO:Importing untrained model
2023-08-11 11:37:32,331:INFO:Elastic Net Imported successfully
2023-08-11 11:37:32,334:INFO:Starting cross validation
2023-08-11 11:37:32,336:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:32,440:INFO:Calculating mean and std
2023-08-11 11:37:32,440:INFO:Creating metrics dataframe
2023-08-11 11:37:32,448:INFO:Uploading results into container
2023-08-11 11:37:32,448:INFO:Uploading model into container now
2023-08-11 11:37:32,448:INFO:_master_model_container: 4
2023-08-11 11:37:32,448:INFO:_display_container: 2
2023-08-11 11:37:32,448:INFO:ElasticNet(random_state=10)
2023-08-11 11:37:32,448:INFO:create_model() successfully completed......................................
2023-08-11 11:37:32,579:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:32,580:INFO:Creating metrics dataframe
2023-08-11 11:37:32,588:INFO:Initializing Least Angle Regression
2023-08-11 11:37:32,588:INFO:Total runtime is 0.01764618158340454 minutes
2023-08-11 11:37:32,590:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:32,590:INFO:Initializing create_model()
2023-08-11 11:37:32,590:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=lar, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:32,590:INFO:Checking exceptions
2023-08-11 11:37:32,590:INFO:Importing libraries
2023-08-11 11:37:32,590:INFO:Copying training dataset
2023-08-11 11:37:32,593:INFO:Defining folds
2023-08-11 11:37:32,593:INFO:Declaring metric variables
2023-08-11 11:37:32,595:INFO:Importing untrained model
2023-08-11 11:37:32,597:INFO:Least Angle Regression Imported successfully
2023-08-11 11:37:32,603:INFO:Starting cross validation
2023-08-11 11:37:32,603:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:32,636:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:32,644:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:32,653:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:32,655:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:32,655:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:32,667:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:32,672:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:32,681:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:32,693:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:32,699:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:32,710:INFO:Calculating mean and std
2023-08-11 11:37:32,711:INFO:Creating metrics dataframe
2023-08-11 11:37:32,720:INFO:Uploading results into container
2023-08-11 11:37:32,720:INFO:Uploading model into container now
2023-08-11 11:37:32,720:INFO:_master_model_container: 5
2023-08-11 11:37:32,720:INFO:_display_container: 2
2023-08-11 11:37:32,720:INFO:Lars(random_state=10)
2023-08-11 11:37:32,720:INFO:create_model() successfully completed......................................
2023-08-11 11:37:32,850:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:32,850:INFO:Creating metrics dataframe
2023-08-11 11:37:32,858:INFO:Initializing Lasso Least Angle Regression
2023-08-11 11:37:32,858:INFO:Total runtime is 0.022155781586964924 minutes
2023-08-11 11:37:32,860:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:32,861:INFO:Initializing create_model()
2023-08-11 11:37:32,861:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=llar, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:32,861:INFO:Checking exceptions
2023-08-11 11:37:32,861:INFO:Importing libraries
2023-08-11 11:37:32,861:INFO:Copying training dataset
2023-08-11 11:37:32,863:INFO:Defining folds
2023-08-11 11:37:32,863:INFO:Declaring metric variables
2023-08-11 11:37:32,865:INFO:Importing untrained model
2023-08-11 11:37:32,868:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 11:37:32,872:INFO:Starting cross validation
2023-08-11 11:37:32,872:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:32,903:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:32,912:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:32,913:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:32,930:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:32,934:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:32,939:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:32,942:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:32,949:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:32,963:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:32,967:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:37:32,977:INFO:Calculating mean and std
2023-08-11 11:37:32,978:INFO:Creating metrics dataframe
2023-08-11 11:37:32,987:INFO:Uploading results into container
2023-08-11 11:37:32,987:INFO:Uploading model into container now
2023-08-11 11:37:32,988:INFO:_master_model_container: 6
2023-08-11 11:37:32,988:INFO:_display_container: 2
2023-08-11 11:37:32,988:INFO:LassoLars(random_state=10)
2023-08-11 11:37:32,988:INFO:create_model() successfully completed......................................
2023-08-11 11:37:33,121:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:33,121:INFO:Creating metrics dataframe
2023-08-11 11:37:33,130:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 11:37:33,130:INFO:Total runtime is 0.0266911506652832 minutes
2023-08-11 11:37:33,132:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:33,133:INFO:Initializing create_model()
2023-08-11 11:37:33,133:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=omp, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:33,133:INFO:Checking exceptions
2023-08-11 11:37:33,133:INFO:Importing libraries
2023-08-11 11:37:33,133:INFO:Copying training dataset
2023-08-11 11:37:33,136:INFO:Defining folds
2023-08-11 11:37:33,136:INFO:Declaring metric variables
2023-08-11 11:37:33,138:INFO:Importing untrained model
2023-08-11 11:37:33,140:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 11:37:33,145:INFO:Starting cross validation
2023-08-11 11:37:33,146:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:33,179:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:33,184:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:33,188:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:33,206:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:33,208:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:33,212:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:33,219:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:33,223:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:33,230:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:33,235:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:37:33,251:INFO:Calculating mean and std
2023-08-11 11:37:33,252:INFO:Creating metrics dataframe
2023-08-11 11:37:33,261:INFO:Uploading results into container
2023-08-11 11:37:33,261:INFO:Uploading model into container now
2023-08-11 11:37:33,261:INFO:_master_model_container: 7
2023-08-11 11:37:33,262:INFO:_display_container: 2
2023-08-11 11:37:33,262:INFO:OrthogonalMatchingPursuit()
2023-08-11 11:37:33,262:INFO:create_model() successfully completed......................................
2023-08-11 11:37:33,392:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:33,392:INFO:Creating metrics dataframe
2023-08-11 11:37:33,401:INFO:Initializing Bayesian Ridge
2023-08-11 11:37:33,401:INFO:Total runtime is 0.031201287110646563 minutes
2023-08-11 11:37:33,403:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:33,403:INFO:Initializing create_model()
2023-08-11 11:37:33,403:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=br, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:33,403:INFO:Checking exceptions
2023-08-11 11:37:33,403:INFO:Importing libraries
2023-08-11 11:37:33,403:INFO:Copying training dataset
2023-08-11 11:37:33,406:INFO:Defining folds
2023-08-11 11:37:33,406:INFO:Declaring metric variables
2023-08-11 11:37:33,408:INFO:Importing untrained model
2023-08-11 11:37:33,410:INFO:Bayesian Ridge Imported successfully
2023-08-11 11:37:33,414:INFO:Starting cross validation
2023-08-11 11:37:33,415:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:33,518:INFO:Calculating mean and std
2023-08-11 11:37:33,519:INFO:Creating metrics dataframe
2023-08-11 11:37:33,528:INFO:Uploading results into container
2023-08-11 11:37:33,528:INFO:Uploading model into container now
2023-08-11 11:37:33,529:INFO:_master_model_container: 8
2023-08-11 11:37:33,529:INFO:_display_container: 2
2023-08-11 11:37:33,529:INFO:BayesianRidge()
2023-08-11 11:37:33,529:INFO:create_model() successfully completed......................................
2023-08-11 11:37:33,660:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:33,660:INFO:Creating metrics dataframe
2023-08-11 11:37:33,669:INFO:Initializing Passive Aggressive Regressor
2023-08-11 11:37:33,669:INFO:Total runtime is 0.035665218035380045 minutes
2023-08-11 11:37:33,671:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:33,671:INFO:Initializing create_model()
2023-08-11 11:37:33,671:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=par, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:33,671:INFO:Checking exceptions
2023-08-11 11:37:33,671:INFO:Importing libraries
2023-08-11 11:37:33,671:INFO:Copying training dataset
2023-08-11 11:37:33,673:INFO:Defining folds
2023-08-11 11:37:33,674:INFO:Declaring metric variables
2023-08-11 11:37:33,676:INFO:Importing untrained model
2023-08-11 11:37:33,678:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 11:37:33,682:INFO:Starting cross validation
2023-08-11 11:37:33,683:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:33,787:INFO:Calculating mean and std
2023-08-11 11:37:33,788:INFO:Creating metrics dataframe
2023-08-11 11:37:33,797:INFO:Uploading results into container
2023-08-11 11:37:33,797:INFO:Uploading model into container now
2023-08-11 11:37:33,797:INFO:_master_model_container: 9
2023-08-11 11:37:33,797:INFO:_display_container: 2
2023-08-11 11:37:33,797:INFO:PassiveAggressiveRegressor(random_state=10)
2023-08-11 11:37:33,797:INFO:create_model() successfully completed......................................
2023-08-11 11:37:33,929:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:33,929:INFO:Creating metrics dataframe
2023-08-11 11:37:33,939:INFO:Initializing Huber Regressor
2023-08-11 11:37:33,939:INFO:Total runtime is 0.04016443490982056 minutes
2023-08-11 11:37:33,941:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:33,941:INFO:Initializing create_model()
2023-08-11 11:37:33,941:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=huber, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:33,941:INFO:Checking exceptions
2023-08-11 11:37:33,941:INFO:Importing libraries
2023-08-11 11:37:33,941:INFO:Copying training dataset
2023-08-11 11:37:33,944:INFO:Defining folds
2023-08-11 11:37:33,944:INFO:Declaring metric variables
2023-08-11 11:37:33,946:INFO:Importing untrained model
2023-08-11 11:37:33,949:INFO:Huber Regressor Imported successfully
2023-08-11 11:37:33,952:INFO:Starting cross validation
2023-08-11 11:37:33,953:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:34,061:INFO:Calculating mean and std
2023-08-11 11:37:34,062:INFO:Creating metrics dataframe
2023-08-11 11:37:34,071:INFO:Uploading results into container
2023-08-11 11:37:34,071:INFO:Uploading model into container now
2023-08-11 11:37:34,071:INFO:_master_model_container: 10
2023-08-11 11:37:34,072:INFO:_display_container: 2
2023-08-11 11:37:34,072:INFO:HuberRegressor()
2023-08-11 11:37:34,072:INFO:create_model() successfully completed......................................
2023-08-11 11:37:34,203:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:34,203:INFO:Creating metrics dataframe
2023-08-11 11:37:34,212:INFO:Initializing K Neighbors Regressor
2023-08-11 11:37:34,212:INFO:Total runtime is 0.04471808671951294 minutes
2023-08-11 11:37:34,214:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:34,214:INFO:Initializing create_model()
2023-08-11 11:37:34,214:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=knn, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:34,214:INFO:Checking exceptions
2023-08-11 11:37:34,214:INFO:Importing libraries
2023-08-11 11:37:34,214:INFO:Copying training dataset
2023-08-11 11:37:34,217:INFO:Defining folds
2023-08-11 11:37:34,217:INFO:Declaring metric variables
2023-08-11 11:37:34,219:INFO:Importing untrained model
2023-08-11 11:37:34,221:INFO:K Neighbors Regressor Imported successfully
2023-08-11 11:37:34,225:INFO:Starting cross validation
2023-08-11 11:37:34,225:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:34,529:INFO:Calculating mean and std
2023-08-11 11:37:34,531:INFO:Creating metrics dataframe
2023-08-11 11:37:34,544:INFO:Uploading results into container
2023-08-11 11:37:34,545:INFO:Uploading model into container now
2023-08-11 11:37:34,545:INFO:_master_model_container: 11
2023-08-11 11:37:34,545:INFO:_display_container: 2
2023-08-11 11:37:34,545:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 11:37:34,545:INFO:create_model() successfully completed......................................
2023-08-11 11:37:34,681:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:34,681:INFO:Creating metrics dataframe
2023-08-11 11:37:34,690:INFO:Initializing Decision Tree Regressor
2023-08-11 11:37:34,691:INFO:Total runtime is 0.0526923139890035 minutes
2023-08-11 11:37:34,693:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:34,693:INFO:Initializing create_model()
2023-08-11 11:37:34,693:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=dt, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:34,693:INFO:Checking exceptions
2023-08-11 11:37:34,693:INFO:Importing libraries
2023-08-11 11:37:34,693:INFO:Copying training dataset
2023-08-11 11:37:34,695:INFO:Defining folds
2023-08-11 11:37:34,695:INFO:Declaring metric variables
2023-08-11 11:37:34,698:INFO:Importing untrained model
2023-08-11 11:37:34,700:INFO:Decision Tree Regressor Imported successfully
2023-08-11 11:37:34,704:INFO:Starting cross validation
2023-08-11 11:37:34,705:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:34,814:INFO:Calculating mean and std
2023-08-11 11:37:34,815:INFO:Creating metrics dataframe
2023-08-11 11:37:34,824:INFO:Uploading results into container
2023-08-11 11:37:34,824:INFO:Uploading model into container now
2023-08-11 11:37:34,825:INFO:_master_model_container: 12
2023-08-11 11:37:34,825:INFO:_display_container: 2
2023-08-11 11:37:34,825:INFO:DecisionTreeRegressor(random_state=10)
2023-08-11 11:37:34,825:INFO:create_model() successfully completed......................................
2023-08-11 11:37:34,955:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:34,955:INFO:Creating metrics dataframe
2023-08-11 11:37:34,964:INFO:Initializing Random Forest Regressor
2023-08-11 11:37:34,965:INFO:Total runtime is 0.057259019215901694 minutes
2023-08-11 11:37:34,967:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:34,967:INFO:Initializing create_model()
2023-08-11 11:37:34,967:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=rf, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:34,967:INFO:Checking exceptions
2023-08-11 11:37:34,967:INFO:Importing libraries
2023-08-11 11:37:34,967:INFO:Copying training dataset
2023-08-11 11:37:34,969:INFO:Defining folds
2023-08-11 11:37:34,969:INFO:Declaring metric variables
2023-08-11 11:37:34,971:INFO:Importing untrained model
2023-08-11 11:37:34,974:INFO:Random Forest Regressor Imported successfully
2023-08-11 11:37:34,978:INFO:Starting cross validation
2023-08-11 11:37:34,978:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:35,852:INFO:Calculating mean and std
2023-08-11 11:37:35,854:INFO:Creating metrics dataframe
2023-08-11 11:37:35,867:INFO:Uploading results into container
2023-08-11 11:37:35,868:INFO:Uploading model into container now
2023-08-11 11:37:35,868:INFO:_master_model_container: 13
2023-08-11 11:37:35,868:INFO:_display_container: 2
2023-08-11 11:37:35,868:INFO:RandomForestRegressor(n_jobs=-1, random_state=10)
2023-08-11 11:37:35,868:INFO:create_model() successfully completed......................................
2023-08-11 11:37:35,999:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:35,999:INFO:Creating metrics dataframe
2023-08-11 11:37:36,009:INFO:Initializing Extra Trees Regressor
2023-08-11 11:37:36,009:INFO:Total runtime is 0.07466336488723754 minutes
2023-08-11 11:37:36,011:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:36,011:INFO:Initializing create_model()
2023-08-11 11:37:36,011:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=et, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:36,011:INFO:Checking exceptions
2023-08-11 11:37:36,011:INFO:Importing libraries
2023-08-11 11:37:36,011:INFO:Copying training dataset
2023-08-11 11:37:36,014:INFO:Defining folds
2023-08-11 11:37:36,014:INFO:Declaring metric variables
2023-08-11 11:37:36,016:INFO:Importing untrained model
2023-08-11 11:37:36,018:INFO:Extra Trees Regressor Imported successfully
2023-08-11 11:37:36,022:INFO:Starting cross validation
2023-08-11 11:37:36,022:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:36,800:INFO:Calculating mean and std
2023-08-11 11:37:36,802:INFO:Creating metrics dataframe
2023-08-11 11:37:36,818:INFO:Uploading results into container
2023-08-11 11:37:36,819:INFO:Uploading model into container now
2023-08-11 11:37:36,819:INFO:_master_model_container: 14
2023-08-11 11:37:36,819:INFO:_display_container: 2
2023-08-11 11:37:36,819:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=10)
2023-08-11 11:37:36,819:INFO:create_model() successfully completed......................................
2023-08-11 11:37:36,949:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:36,949:INFO:Creating metrics dataframe
2023-08-11 11:37:36,959:INFO:Initializing AdaBoost Regressor
2023-08-11 11:37:36,959:INFO:Total runtime is 0.0905036687850952 minutes
2023-08-11 11:37:36,961:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:36,961:INFO:Initializing create_model()
2023-08-11 11:37:36,961:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=ada, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:36,961:INFO:Checking exceptions
2023-08-11 11:37:36,961:INFO:Importing libraries
2023-08-11 11:37:36,962:INFO:Copying training dataset
2023-08-11 11:37:36,964:INFO:Defining folds
2023-08-11 11:37:36,964:INFO:Declaring metric variables
2023-08-11 11:37:36,966:INFO:Importing untrained model
2023-08-11 11:37:36,968:INFO:AdaBoost Regressor Imported successfully
2023-08-11 11:37:36,972:INFO:Starting cross validation
2023-08-11 11:37:36,973:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:37,184:INFO:Calculating mean and std
2023-08-11 11:37:37,185:INFO:Creating metrics dataframe
2023-08-11 11:37:37,197:INFO:Uploading results into container
2023-08-11 11:37:37,198:INFO:Uploading model into container now
2023-08-11 11:37:37,198:INFO:_master_model_container: 15
2023-08-11 11:37:37,198:INFO:_display_container: 2
2023-08-11 11:37:37,198:INFO:AdaBoostRegressor(random_state=10)
2023-08-11 11:37:37,198:INFO:create_model() successfully completed......................................
2023-08-11 11:37:37,328:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:37,328:INFO:Creating metrics dataframe
2023-08-11 11:37:37,338:INFO:Initializing Gradient Boosting Regressor
2023-08-11 11:37:37,338:INFO:Total runtime is 0.09681883255640665 minutes
2023-08-11 11:37:37,340:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:37,340:INFO:Initializing create_model()
2023-08-11 11:37:37,340:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=gbr, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:37,340:INFO:Checking exceptions
2023-08-11 11:37:37,340:INFO:Importing libraries
2023-08-11 11:37:37,340:INFO:Copying training dataset
2023-08-11 11:37:37,343:INFO:Defining folds
2023-08-11 11:37:37,343:INFO:Declaring metric variables
2023-08-11 11:37:37,345:INFO:Importing untrained model
2023-08-11 11:37:37,347:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 11:37:37,351:INFO:Starting cross validation
2023-08-11 11:37:37,352:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:37,569:INFO:Calculating mean and std
2023-08-11 11:37:37,570:INFO:Creating metrics dataframe
2023-08-11 11:37:37,583:INFO:Uploading results into container
2023-08-11 11:37:37,583:INFO:Uploading model into container now
2023-08-11 11:37:37,583:INFO:_master_model_container: 16
2023-08-11 11:37:37,583:INFO:_display_container: 2
2023-08-11 11:37:37,583:INFO:GradientBoostingRegressor(random_state=10)
2023-08-11 11:37:37,583:INFO:create_model() successfully completed......................................
2023-08-11 11:37:37,713:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:37,713:INFO:Creating metrics dataframe
2023-08-11 11:37:37,723:INFO:Initializing Extreme Gradient Boosting
2023-08-11 11:37:37,723:INFO:Total runtime is 0.10323593616485595 minutes
2023-08-11 11:37:37,725:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:37,725:INFO:Initializing create_model()
2023-08-11 11:37:37,725:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:37,725:INFO:Checking exceptions
2023-08-11 11:37:37,725:INFO:Importing libraries
2023-08-11 11:37:37,725:INFO:Copying training dataset
2023-08-11 11:37:37,728:INFO:Defining folds
2023-08-11 11:37:37,728:INFO:Declaring metric variables
2023-08-11 11:37:37,730:INFO:Importing untrained model
2023-08-11 11:37:37,732:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 11:37:37,736:INFO:Starting cross validation
2023-08-11 11:37:37,737:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:37,896:INFO:Calculating mean and std
2023-08-11 11:37:37,897:INFO:Creating metrics dataframe
2023-08-11 11:37:37,910:INFO:Uploading results into container
2023-08-11 11:37:37,910:INFO:Uploading model into container now
2023-08-11 11:37:37,910:INFO:_master_model_container: 17
2023-08-11 11:37:37,910:INFO:_display_container: 2
2023-08-11 11:37:37,911:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=10,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 11:37:37,911:INFO:create_model() successfully completed......................................
2023-08-11 11:37:38,040:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:38,040:INFO:Creating metrics dataframe
2023-08-11 11:37:38,051:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 11:37:38,051:INFO:Total runtime is 0.10869454940160114 minutes
2023-08-11 11:37:38,053:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:38,053:INFO:Initializing create_model()
2023-08-11 11:37:38,053:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:38,053:INFO:Checking exceptions
2023-08-11 11:37:38,053:INFO:Importing libraries
2023-08-11 11:37:38,053:INFO:Copying training dataset
2023-08-11 11:37:38,056:INFO:Defining folds
2023-08-11 11:37:38,056:INFO:Declaring metric variables
2023-08-11 11:37:38,058:INFO:Importing untrained model
2023-08-11 11:37:38,060:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 11:37:38,064:INFO:Starting cross validation
2023-08-11 11:37:38,065:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:38,201:INFO:Calculating mean and std
2023-08-11 11:37:38,202:INFO:Creating metrics dataframe
2023-08-11 11:37:38,215:INFO:Uploading results into container
2023-08-11 11:37:38,215:INFO:Uploading model into container now
2023-08-11 11:37:38,215:INFO:_master_model_container: 18
2023-08-11 11:37:38,215:INFO:_display_container: 2
2023-08-11 11:37:38,215:INFO:LGBMRegressor(random_state=10)
2023-08-11 11:37:38,215:INFO:create_model() successfully completed......................................
2023-08-11 11:37:38,345:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:38,345:INFO:Creating metrics dataframe
2023-08-11 11:37:38,356:INFO:Initializing CatBoost Regressor
2023-08-11 11:37:38,356:INFO:Total runtime is 0.11377778450647989 minutes
2023-08-11 11:37:38,358:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:38,358:INFO:Initializing create_model()
2023-08-11 11:37:38,358:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=catboost, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:38,358:INFO:Checking exceptions
2023-08-11 11:37:38,358:INFO:Importing libraries
2023-08-11 11:37:38,358:INFO:Copying training dataset
2023-08-11 11:37:38,360:INFO:Defining folds
2023-08-11 11:37:38,361:INFO:Declaring metric variables
2023-08-11 11:37:38,363:INFO:Importing untrained model
2023-08-11 11:37:38,365:INFO:CatBoost Regressor Imported successfully
2023-08-11 11:37:38,369:INFO:Starting cross validation
2023-08-11 11:37:38,369:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:39,654:INFO:Calculating mean and std
2023-08-11 11:37:39,655:INFO:Creating metrics dataframe
2023-08-11 11:37:39,668:INFO:Uploading results into container
2023-08-11 11:37:39,669:INFO:Uploading model into container now
2023-08-11 11:37:39,669:INFO:_master_model_container: 19
2023-08-11 11:37:39,669:INFO:_display_container: 2
2023-08-11 11:37:39,669:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d43e3bed0>
2023-08-11 11:37:39,669:INFO:create_model() successfully completed......................................
2023-08-11 11:37:39,799:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:39,799:INFO:Creating metrics dataframe
2023-08-11 11:37:39,810:INFO:Initializing Dummy Regressor
2023-08-11 11:37:39,810:INFO:Total runtime is 0.1380146821339925 minutes
2023-08-11 11:37:39,812:INFO:SubProcess create_model() called ==================================
2023-08-11 11:37:39,812:INFO:Initializing create_model()
2023-08-11 11:37:39,812:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=dummy, fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467add0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:39,812:INFO:Checking exceptions
2023-08-11 11:37:39,812:INFO:Importing libraries
2023-08-11 11:37:39,812:INFO:Copying training dataset
2023-08-11 11:37:39,815:INFO:Defining folds
2023-08-11 11:37:39,815:INFO:Declaring metric variables
2023-08-11 11:37:39,817:INFO:Importing untrained model
2023-08-11 11:37:39,819:INFO:Dummy Regressor Imported successfully
2023-08-11 11:37:39,823:INFO:Starting cross validation
2023-08-11 11:37:39,823:INFO:Cross validating with KFold(n_splits=10, random_state=10, shuffle=True), n_jobs=-1
2023-08-11 11:37:39,949:INFO:Calculating mean and std
2023-08-11 11:37:39,950:INFO:Creating metrics dataframe
2023-08-11 11:37:39,965:INFO:Uploading results into container
2023-08-11 11:37:39,965:INFO:Uploading model into container now
2023-08-11 11:37:39,965:INFO:_master_model_container: 20
2023-08-11 11:37:39,965:INFO:_display_container: 2
2023-08-11 11:37:39,965:INFO:DummyRegressor()
2023-08-11 11:37:39,965:INFO:create_model() successfully completed......................................
2023-08-11 11:37:40,096:INFO:SubProcess create_model() end ==================================
2023-08-11 11:37:40,096:INFO:Creating metrics dataframe
2023-08-11 11:37:40,113:INFO:Initializing create_model()
2023-08-11 11:37:40,113:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d38cc11d0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=10), fold=KFold(n_splits=10, random_state=10, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:37:40,113:INFO:Checking exceptions
2023-08-11 11:37:40,114:INFO:Importing libraries
2023-08-11 11:37:40,114:INFO:Copying training dataset
2023-08-11 11:37:40,115:INFO:Defining folds
2023-08-11 11:37:40,115:INFO:Declaring metric variables
2023-08-11 11:37:40,116:INFO:Importing untrained model
2023-08-11 11:37:40,116:INFO:Declaring custom model
2023-08-11 11:37:40,116:INFO:Extra Trees Regressor Imported successfully
2023-08-11 11:37:40,117:INFO:Cross validation set to False
2023-08-11 11:37:40,117:INFO:Fitting Model
2023-08-11 11:37:40,316:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=10)
2023-08-11 11:37:40,316:INFO:create_model() successfully completed......................................
2023-08-11 11:37:40,474:INFO:_master_model_container: 20
2023-08-11 11:37:40,474:INFO:_display_container: 2
2023-08-11 11:37:40,474:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=10)
2023-08-11 11:37:40,474:INFO:compare_models() successfully completed......................................
2023-08-11 11:37:58,772:INFO:PyCaret RegressionExperiment
2023-08-11 11:37:58,772:INFO:Logging name: reg-default-name
2023-08-11 11:37:58,772:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 11:37:58,772:INFO:version 3.0.2
2023-08-11 11:37:58,772:INFO:Initializing setup()
2023-08-11 11:37:58,773:INFO:self.USI: 7444
2023-08-11 11:37:58,773:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 11:37:58,773:INFO:Checking environment
2023-08-11 11:37:58,773:INFO:python_version: 3.7.13
2023-08-11 11:37:58,773:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 11:37:58,773:INFO:machine: x86_64
2023-08-11 11:37:58,773:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 11:37:58,773:INFO:Memory: svmem(total=17179869184, available=1338646528, percent=92.2, used=1782157312, free=16568320, active=1326968832, inactive=1314725888, wired=455188480)
2023-08-11 11:37:58,773:INFO:Physical Core: 8
2023-08-11 11:37:58,773:INFO:Logical Core: 8
2023-08-11 11:37:58,773:INFO:Checking libraries
2023-08-11 11:37:58,773:INFO:System:
2023-08-11 11:37:58,773:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 11:37:58,773:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 11:37:58,773:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 11:37:58,773:INFO:PyCaret required dependencies:
2023-08-11 11:37:58,773:INFO:                 pip: 22.3.1
2023-08-11 11:37:58,773:INFO:          setuptools: 63.4.1
2023-08-11 11:37:58,774:INFO:             pycaret: 3.0.2
2023-08-11 11:37:58,774:INFO:             IPython: 7.33.0
2023-08-11 11:37:58,774:INFO:          ipywidgets: 8.0.2
2023-08-11 11:37:58,774:INFO:                tqdm: 4.64.1
2023-08-11 11:37:58,774:INFO:               numpy: 1.21.5
2023-08-11 11:37:58,774:INFO:              pandas: 1.3.5
2023-08-11 11:37:58,774:INFO:              jinja2: 3.1.2
2023-08-11 11:37:58,774:INFO:               scipy: 1.7.3
2023-08-11 11:37:58,774:INFO:              joblib: 1.2.0
2023-08-11 11:37:58,774:INFO:             sklearn: 1.0.2
2023-08-11 11:37:58,774:INFO:                pyod: 1.0.9
2023-08-11 11:37:58,774:INFO:            imblearn: 0.10.1
2023-08-11 11:37:58,774:INFO:   category_encoders: 2.6.1
2023-08-11 11:37:58,774:INFO:            lightgbm: 3.3.2
2023-08-11 11:37:58,774:INFO:               numba: 0.56.2
2023-08-11 11:37:58,774:INFO:            requests: 2.28.1
2023-08-11 11:37:58,774:INFO:          matplotlib: 3.5.3
2023-08-11 11:37:58,774:INFO:          scikitplot: 0.3.7
2023-08-11 11:37:58,774:INFO:         yellowbrick: 1.5
2023-08-11 11:37:58,774:INFO:              plotly: 5.13.0
2023-08-11 11:37:58,774:INFO:             kaleido: 0.2.1
2023-08-11 11:37:58,774:INFO:         statsmodels: 0.13.2
2023-08-11 11:37:58,774:INFO:              sktime: 0.17.0
2023-08-11 11:37:58,774:INFO:               tbats: 1.1.3
2023-08-11 11:37:58,775:INFO:            pmdarima: 2.0.3
2023-08-11 11:37:58,775:INFO:              psutil: 5.9.2
2023-08-11 11:37:58,775:INFO:PyCaret optional dependencies:
2023-08-11 11:37:58,775:INFO:                shap: Not installed
2023-08-11 11:37:58,775:INFO:           interpret: Not installed
2023-08-11 11:37:58,775:INFO:                umap: 0.5.3
2023-08-11 11:37:58,775:INFO:    pandas_profiling: 3.0.0
2023-08-11 11:37:58,775:INFO:  explainerdashboard: Not installed
2023-08-11 11:37:58,775:INFO:             autoviz: Not installed
2023-08-11 11:37:58,775:INFO:           fairlearn: Not installed
2023-08-11 11:37:58,775:INFO:             xgboost: 1.6.2
2023-08-11 11:37:58,775:INFO:            catboost: 1.0.4
2023-08-11 11:37:58,775:INFO:              kmodes: 0.12.2
2023-08-11 11:37:58,775:INFO:             mlxtend: 0.19.0
2023-08-11 11:37:58,775:INFO:       statsforecast: Not installed
2023-08-11 11:37:58,775:INFO:        tune_sklearn: Not installed
2023-08-11 11:37:58,775:INFO:                 ray: Not installed
2023-08-11 11:37:58,775:INFO:            hyperopt: Not installed
2023-08-11 11:37:58,775:INFO:              optuna: Not installed
2023-08-11 11:37:58,775:INFO:               skopt: Not installed
2023-08-11 11:37:58,775:INFO:              mlflow: 1.29.0
2023-08-11 11:37:58,775:INFO:              gradio: Not installed
2023-08-11 11:37:58,775:INFO:             fastapi: Not installed
2023-08-11 11:37:58,775:INFO:             uvicorn: Not installed
2023-08-11 11:37:58,776:INFO:              m2cgen: Not installed
2023-08-11 11:37:58,776:INFO:           evidently: Not installed
2023-08-11 11:37:58,776:INFO:               fugue: Not installed
2023-08-11 11:37:58,776:INFO:           streamlit: 1.13.0
2023-08-11 11:37:58,776:INFO:             prophet: Not installed
2023-08-11 11:37:58,776:INFO:None
2023-08-11 11:37:58,776:INFO:Set up data.
2023-08-11 11:37:58,782:INFO:Set up train/test split.
2023-08-11 11:37:58,785:INFO:Set up index.
2023-08-11 11:37:58,785:INFO:Set up folding strategy.
2023-08-11 11:37:58,785:INFO:Assigning column types.
2023-08-11 11:37:58,790:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 11:37:58,790:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 11:37:58,798:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:37:58,805:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:37:58,859:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:58,896:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:37:58,896:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:58,898:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:58,899:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 11:37:58,902:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:37:58,906:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:37:58,951:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:58,987:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:37:58,987:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:58,989:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:58,989:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 11:37:58,993:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:37:58,997:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,041:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,077:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,077:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:59,079:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:59,083:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,087:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,132:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,168:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,168:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:59,170:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:59,170:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 11:37:59,177:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,222:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,258:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,258:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:59,260:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:59,268:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,312:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,349:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,349:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:59,351:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:59,352:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 11:37:59,405:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,441:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,441:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:59,443:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:59,496:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,532:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,532:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:59,534:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:59,534:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 11:37:59,587:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,623:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:59,625:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:59,677:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:37:59,713:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:59,715:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:59,715:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 11:37:59,803:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:59,805:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:59,898:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:37:59,900:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:37:59,901:INFO:Preparing preprocessing pipeline...
2023-08-11 11:37:59,901:INFO:Set up simple imputation.
2023-08-11 11:37:59,911:INFO:Finished creating preprocessing pipeline.
2023-08-11 11:37:59,914:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ABC', 'nBridgehead', 'ATSC4c',
                                             'GATS2d', 'PEOE_VSA13'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-11 11:37:59,914:INFO:Creating final display dataframe.
2023-08-11 11:37:59,954:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target               pKi
2                   Target type        Regression
3           Original data shape          (316, 6)
4        Transformed data shape          (316, 6)
5   Transformed train set shape          (221, 6)
6    Transformed test set shape           (95, 6)
7              Numeric features                 5
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              7444
2023-08-11 11:38:00,047:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:38:00,049:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:38:00,138:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:38:00,140:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:38:00,140:INFO:setup() successfully completed in 1.39s...............
2023-08-11 11:38:00,149:INFO:Initializing compare_models()
2023-08-11 11:38:00,149:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 11:38:00,149:INFO:Checking exceptions
2023-08-11 11:38:00,150:INFO:Preparing display monitor
2023-08-11 11:38:00,175:INFO:Initializing Linear Regression
2023-08-11 11:38:00,175:INFO:Total runtime is 3.1034151713053387e-06 minutes
2023-08-11 11:38:00,178:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:00,178:INFO:Initializing create_model()
2023-08-11 11:38:00,178:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=lr, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:00,178:INFO:Checking exceptions
2023-08-11 11:38:00,178:INFO:Importing libraries
2023-08-11 11:38:00,178:INFO:Copying training dataset
2023-08-11 11:38:00,180:INFO:Defining folds
2023-08-11 11:38:00,180:INFO:Declaring metric variables
2023-08-11 11:38:00,183:INFO:Importing untrained model
2023-08-11 11:38:00,185:INFO:Linear Regression Imported successfully
2023-08-11 11:38:00,189:INFO:Starting cross validation
2023-08-11 11:38:00,190:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:00,323:INFO:Calculating mean and std
2023-08-11 11:38:00,324:INFO:Creating metrics dataframe
2023-08-11 11:38:00,337:INFO:Uploading results into container
2023-08-11 11:38:00,337:INFO:Uploading model into container now
2023-08-11 11:38:00,337:INFO:_master_model_container: 1
2023-08-11 11:38:00,337:INFO:_display_container: 2
2023-08-11 11:38:00,338:INFO:LinearRegression(n_jobs=-1)
2023-08-11 11:38:00,338:INFO:create_model() successfully completed......................................
2023-08-11 11:38:00,473:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:00,473:INFO:Creating metrics dataframe
2023-08-11 11:38:00,480:INFO:Initializing Lasso Regression
2023-08-11 11:38:00,480:INFO:Total runtime is 0.005092318852742513 minutes
2023-08-11 11:38:00,482:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:00,482:INFO:Initializing create_model()
2023-08-11 11:38:00,482:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=lasso, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:00,482:INFO:Checking exceptions
2023-08-11 11:38:00,482:INFO:Importing libraries
2023-08-11 11:38:00,483:INFO:Copying training dataset
2023-08-11 11:38:00,484:INFO:Defining folds
2023-08-11 11:38:00,484:INFO:Declaring metric variables
2023-08-11 11:38:00,486:INFO:Importing untrained model
2023-08-11 11:38:00,488:INFO:Lasso Regression Imported successfully
2023-08-11 11:38:00,492:INFO:Starting cross validation
2023-08-11 11:38:00,493:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:00,625:INFO:Calculating mean and std
2023-08-11 11:38:00,629:INFO:Creating metrics dataframe
2023-08-11 11:38:00,638:INFO:Uploading results into container
2023-08-11 11:38:00,638:INFO:Uploading model into container now
2023-08-11 11:38:00,638:INFO:_master_model_container: 2
2023-08-11 11:38:00,638:INFO:_display_container: 2
2023-08-11 11:38:00,638:INFO:Lasso(random_state=1)
2023-08-11 11:38:00,638:INFO:create_model() successfully completed......................................
2023-08-11 11:38:00,768:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:00,768:INFO:Creating metrics dataframe
2023-08-11 11:38:00,776:INFO:Initializing Ridge Regression
2023-08-11 11:38:00,776:INFO:Total runtime is 0.010028537114461264 minutes
2023-08-11 11:38:00,778:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:00,779:INFO:Initializing create_model()
2023-08-11 11:38:00,779:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=ridge, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:00,779:INFO:Checking exceptions
2023-08-11 11:38:00,779:INFO:Importing libraries
2023-08-11 11:38:00,779:INFO:Copying training dataset
2023-08-11 11:38:00,780:INFO:Defining folds
2023-08-11 11:38:00,780:INFO:Declaring metric variables
2023-08-11 11:38:00,782:INFO:Importing untrained model
2023-08-11 11:38:00,785:INFO:Ridge Regression Imported successfully
2023-08-11 11:38:00,788:INFO:Starting cross validation
2023-08-11 11:38:00,789:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:00,918:INFO:Calculating mean and std
2023-08-11 11:38:00,918:INFO:Creating metrics dataframe
2023-08-11 11:38:00,932:INFO:Uploading results into container
2023-08-11 11:38:00,932:INFO:Uploading model into container now
2023-08-11 11:38:00,932:INFO:_master_model_container: 3
2023-08-11 11:38:00,932:INFO:_display_container: 2
2023-08-11 11:38:00,932:INFO:Ridge(random_state=1)
2023-08-11 11:38:00,932:INFO:create_model() successfully completed......................................
2023-08-11 11:38:01,062:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:01,062:INFO:Creating metrics dataframe
2023-08-11 11:38:01,070:INFO:Initializing Elastic Net
2023-08-11 11:38:01,071:INFO:Total runtime is 0.014932449658711752 minutes
2023-08-11 11:38:01,073:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:01,073:INFO:Initializing create_model()
2023-08-11 11:38:01,073:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=en, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:01,073:INFO:Checking exceptions
2023-08-11 11:38:01,073:INFO:Importing libraries
2023-08-11 11:38:01,073:INFO:Copying training dataset
2023-08-11 11:38:01,075:INFO:Defining folds
2023-08-11 11:38:01,075:INFO:Declaring metric variables
2023-08-11 11:38:01,077:INFO:Importing untrained model
2023-08-11 11:38:01,079:INFO:Elastic Net Imported successfully
2023-08-11 11:38:01,083:INFO:Starting cross validation
2023-08-11 11:38:01,084:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:01,216:INFO:Calculating mean and std
2023-08-11 11:38:01,217:INFO:Creating metrics dataframe
2023-08-11 11:38:01,231:INFO:Uploading results into container
2023-08-11 11:38:01,232:INFO:Uploading model into container now
2023-08-11 11:38:01,232:INFO:_master_model_container: 4
2023-08-11 11:38:01,232:INFO:_display_container: 2
2023-08-11 11:38:01,232:INFO:ElasticNet(random_state=1)
2023-08-11 11:38:01,232:INFO:create_model() successfully completed......................................
2023-08-11 11:38:01,365:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:01,365:INFO:Creating metrics dataframe
2023-08-11 11:38:01,373:INFO:Initializing Least Angle Regression
2023-08-11 11:38:01,373:INFO:Total runtime is 0.01997981866200765 minutes
2023-08-11 11:38:01,376:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:01,376:INFO:Initializing create_model()
2023-08-11 11:38:01,376:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=lar, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:01,376:INFO:Checking exceptions
2023-08-11 11:38:01,376:INFO:Importing libraries
2023-08-11 11:38:01,376:INFO:Copying training dataset
2023-08-11 11:38:01,379:INFO:Defining folds
2023-08-11 11:38:01,379:INFO:Declaring metric variables
2023-08-11 11:38:01,381:INFO:Importing untrained model
2023-08-11 11:38:01,383:INFO:Least Angle Regression Imported successfully
2023-08-11 11:38:01,389:INFO:Starting cross validation
2023-08-11 11:38:01,390:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:01,423:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:01,428:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:01,432:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:01,454:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:01,458:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:01,466:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:01,469:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:01,471:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:01,479:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:01,486:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:01,517:INFO:Calculating mean and std
2023-08-11 11:38:01,518:INFO:Creating metrics dataframe
2023-08-11 11:38:01,532:INFO:Uploading results into container
2023-08-11 11:38:01,533:INFO:Uploading model into container now
2023-08-11 11:38:01,533:INFO:_master_model_container: 5
2023-08-11 11:38:01,533:INFO:_display_container: 2
2023-08-11 11:38:01,533:INFO:Lars(random_state=1)
2023-08-11 11:38:01,533:INFO:create_model() successfully completed......................................
2023-08-11 11:38:01,665:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:01,666:INFO:Creating metrics dataframe
2023-08-11 11:38:01,674:INFO:Initializing Lasso Least Angle Regression
2023-08-11 11:38:01,674:INFO:Total runtime is 0.024990801016489664 minutes
2023-08-11 11:38:01,676:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:01,676:INFO:Initializing create_model()
2023-08-11 11:38:01,676:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=llar, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:01,676:INFO:Checking exceptions
2023-08-11 11:38:01,676:INFO:Importing libraries
2023-08-11 11:38:01,676:INFO:Copying training dataset
2023-08-11 11:38:01,679:INFO:Defining folds
2023-08-11 11:38:01,679:INFO:Declaring metric variables
2023-08-11 11:38:01,681:INFO:Importing untrained model
2023-08-11 11:38:01,683:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 11:38:01,689:INFO:Starting cross validation
2023-08-11 11:38:01,691:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:01,723:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:01,727:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:01,732:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:01,743:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:01,754:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:01,761:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:01,763:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:01,774:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:01,782:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:01,793:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:01,823:INFO:Calculating mean and std
2023-08-11 11:38:01,824:INFO:Creating metrics dataframe
2023-08-11 11:38:01,839:INFO:Uploading results into container
2023-08-11 11:38:01,839:INFO:Uploading model into container now
2023-08-11 11:38:01,839:INFO:_master_model_container: 6
2023-08-11 11:38:01,839:INFO:_display_container: 2
2023-08-11 11:38:01,839:INFO:LassoLars(random_state=1)
2023-08-11 11:38:01,839:INFO:create_model() successfully completed......................................
2023-08-11 11:38:01,970:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:01,970:INFO:Creating metrics dataframe
2023-08-11 11:38:01,979:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 11:38:01,979:INFO:Total runtime is 0.030067487557729086 minutes
2023-08-11 11:38:01,981:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:01,981:INFO:Initializing create_model()
2023-08-11 11:38:01,981:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=omp, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:01,981:INFO:Checking exceptions
2023-08-11 11:38:01,981:INFO:Importing libraries
2023-08-11 11:38:01,981:INFO:Copying training dataset
2023-08-11 11:38:01,984:INFO:Defining folds
2023-08-11 11:38:01,984:INFO:Declaring metric variables
2023-08-11 11:38:01,986:INFO:Importing untrained model
2023-08-11 11:38:01,988:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 11:38:01,992:INFO:Starting cross validation
2023-08-11 11:38:01,993:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:02,025:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:02,031:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:02,035:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:02,042:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:02,056:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:02,056:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:02,067:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:02,072:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:02,086:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:02,090:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:02,128:INFO:Calculating mean and std
2023-08-11 11:38:02,129:INFO:Creating metrics dataframe
2023-08-11 11:38:02,143:INFO:Uploading results into container
2023-08-11 11:38:02,144:INFO:Uploading model into container now
2023-08-11 11:38:02,144:INFO:_master_model_container: 7
2023-08-11 11:38:02,144:INFO:_display_container: 2
2023-08-11 11:38:02,144:INFO:OrthogonalMatchingPursuit()
2023-08-11 11:38:02,144:INFO:create_model() successfully completed......................................
2023-08-11 11:38:02,278:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:02,278:INFO:Creating metrics dataframe
2023-08-11 11:38:02,287:INFO:Initializing Bayesian Ridge
2023-08-11 11:38:02,287:INFO:Total runtime is 0.035200071334838864 minutes
2023-08-11 11:38:02,289:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:02,289:INFO:Initializing create_model()
2023-08-11 11:38:02,289:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=br, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:02,289:INFO:Checking exceptions
2023-08-11 11:38:02,289:INFO:Importing libraries
2023-08-11 11:38:02,289:INFO:Copying training dataset
2023-08-11 11:38:02,291:INFO:Defining folds
2023-08-11 11:38:02,291:INFO:Declaring metric variables
2023-08-11 11:38:02,294:INFO:Importing untrained model
2023-08-11 11:38:02,296:INFO:Bayesian Ridge Imported successfully
2023-08-11 11:38:02,300:INFO:Starting cross validation
2023-08-11 11:38:02,301:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:02,429:INFO:Calculating mean and std
2023-08-11 11:38:02,430:INFO:Creating metrics dataframe
2023-08-11 11:38:02,444:INFO:Uploading results into container
2023-08-11 11:38:02,444:INFO:Uploading model into container now
2023-08-11 11:38:02,445:INFO:_master_model_container: 8
2023-08-11 11:38:02,445:INFO:_display_container: 2
2023-08-11 11:38:02,445:INFO:BayesianRidge()
2023-08-11 11:38:02,445:INFO:create_model() successfully completed......................................
2023-08-11 11:38:02,575:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:02,575:INFO:Creating metrics dataframe
2023-08-11 11:38:02,583:INFO:Initializing Passive Aggressive Regressor
2023-08-11 11:38:02,584:INFO:Total runtime is 0.04014857212702433 minutes
2023-08-11 11:38:02,586:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:02,586:INFO:Initializing create_model()
2023-08-11 11:38:02,586:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=par, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:02,586:INFO:Checking exceptions
2023-08-11 11:38:02,586:INFO:Importing libraries
2023-08-11 11:38:02,586:INFO:Copying training dataset
2023-08-11 11:38:02,588:INFO:Defining folds
2023-08-11 11:38:02,588:INFO:Declaring metric variables
2023-08-11 11:38:02,590:INFO:Importing untrained model
2023-08-11 11:38:02,593:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 11:38:02,597:INFO:Starting cross validation
2023-08-11 11:38:02,597:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:02,727:INFO:Calculating mean and std
2023-08-11 11:38:02,728:INFO:Creating metrics dataframe
2023-08-11 11:38:02,742:INFO:Uploading results into container
2023-08-11 11:38:02,742:INFO:Uploading model into container now
2023-08-11 11:38:02,742:INFO:_master_model_container: 9
2023-08-11 11:38:02,742:INFO:_display_container: 2
2023-08-11 11:38:02,742:INFO:PassiveAggressiveRegressor(random_state=1)
2023-08-11 11:38:02,742:INFO:create_model() successfully completed......................................
2023-08-11 11:38:02,874:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:02,874:INFO:Creating metrics dataframe
2023-08-11 11:38:02,883:INFO:Initializing Huber Regressor
2023-08-11 11:38:02,883:INFO:Total runtime is 0.04514408508936564 minutes
2023-08-11 11:38:02,885:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:02,885:INFO:Initializing create_model()
2023-08-11 11:38:02,885:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=huber, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:02,885:INFO:Checking exceptions
2023-08-11 11:38:02,886:INFO:Importing libraries
2023-08-11 11:38:02,886:INFO:Copying training dataset
2023-08-11 11:38:02,888:INFO:Defining folds
2023-08-11 11:38:02,888:INFO:Declaring metric variables
2023-08-11 11:38:02,890:INFO:Importing untrained model
2023-08-11 11:38:02,892:INFO:Huber Regressor Imported successfully
2023-08-11 11:38:02,897:INFO:Starting cross validation
2023-08-11 11:38:02,898:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:03,030:INFO:Calculating mean and std
2023-08-11 11:38:03,032:INFO:Creating metrics dataframe
2023-08-11 11:38:03,046:INFO:Uploading results into container
2023-08-11 11:38:03,046:INFO:Uploading model into container now
2023-08-11 11:38:03,046:INFO:_master_model_container: 10
2023-08-11 11:38:03,046:INFO:_display_container: 2
2023-08-11 11:38:03,046:INFO:HuberRegressor()
2023-08-11 11:38:03,046:INFO:create_model() successfully completed......................................
2023-08-11 11:38:03,177:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:03,177:INFO:Creating metrics dataframe
2023-08-11 11:38:03,186:INFO:Initializing K Neighbors Regressor
2023-08-11 11:38:03,186:INFO:Total runtime is 0.05019606749216715 minutes
2023-08-11 11:38:03,188:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:03,189:INFO:Initializing create_model()
2023-08-11 11:38:03,189:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=knn, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:03,189:INFO:Checking exceptions
2023-08-11 11:38:03,189:INFO:Importing libraries
2023-08-11 11:38:03,189:INFO:Copying training dataset
2023-08-11 11:38:03,191:INFO:Defining folds
2023-08-11 11:38:03,191:INFO:Declaring metric variables
2023-08-11 11:38:03,193:INFO:Importing untrained model
2023-08-11 11:38:03,195:INFO:K Neighbors Regressor Imported successfully
2023-08-11 11:38:03,199:INFO:Starting cross validation
2023-08-11 11:38:03,200:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:03,507:INFO:Calculating mean and std
2023-08-11 11:38:03,509:INFO:Creating metrics dataframe
2023-08-11 11:38:03,527:INFO:Uploading results into container
2023-08-11 11:38:03,527:INFO:Uploading model into container now
2023-08-11 11:38:03,528:INFO:_master_model_container: 11
2023-08-11 11:38:03,528:INFO:_display_container: 2
2023-08-11 11:38:03,528:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 11:38:03,528:INFO:create_model() successfully completed......................................
2023-08-11 11:38:03,658:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:03,658:INFO:Creating metrics dataframe
2023-08-11 11:38:03,667:INFO:Initializing Decision Tree Regressor
2023-08-11 11:38:03,668:INFO:Total runtime is 0.05821572144826253 minutes
2023-08-11 11:38:03,670:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:03,670:INFO:Initializing create_model()
2023-08-11 11:38:03,670:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=dt, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:03,670:INFO:Checking exceptions
2023-08-11 11:38:03,670:INFO:Importing libraries
2023-08-11 11:38:03,670:INFO:Copying training dataset
2023-08-11 11:38:03,673:INFO:Defining folds
2023-08-11 11:38:03,673:INFO:Declaring metric variables
2023-08-11 11:38:03,675:INFO:Importing untrained model
2023-08-11 11:38:03,677:INFO:Decision Tree Regressor Imported successfully
2023-08-11 11:38:03,681:INFO:Starting cross validation
2023-08-11 11:38:03,682:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:03,815:INFO:Calculating mean and std
2023-08-11 11:38:03,816:INFO:Creating metrics dataframe
2023-08-11 11:38:03,830:INFO:Uploading results into container
2023-08-11 11:38:03,830:INFO:Uploading model into container now
2023-08-11 11:38:03,830:INFO:_master_model_container: 12
2023-08-11 11:38:03,830:INFO:_display_container: 2
2023-08-11 11:38:03,831:INFO:DecisionTreeRegressor(random_state=1)
2023-08-11 11:38:03,831:INFO:create_model() successfully completed......................................
2023-08-11 11:38:03,962:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:03,962:INFO:Creating metrics dataframe
2023-08-11 11:38:03,971:INFO:Initializing Random Forest Regressor
2023-08-11 11:38:03,971:INFO:Total runtime is 0.06328097184499104 minutes
2023-08-11 11:38:03,973:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:03,974:INFO:Initializing create_model()
2023-08-11 11:38:03,974:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=rf, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:03,974:INFO:Checking exceptions
2023-08-11 11:38:03,974:INFO:Importing libraries
2023-08-11 11:38:03,974:INFO:Copying training dataset
2023-08-11 11:38:03,976:INFO:Defining folds
2023-08-11 11:38:03,976:INFO:Declaring metric variables
2023-08-11 11:38:03,978:INFO:Importing untrained model
2023-08-11 11:38:03,981:INFO:Random Forest Regressor Imported successfully
2023-08-11 11:38:03,985:INFO:Starting cross validation
2023-08-11 11:38:03,986:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:04,822:INFO:Calculating mean and std
2023-08-11 11:38:04,824:INFO:Creating metrics dataframe
2023-08-11 11:38:04,845:INFO:Uploading results into container
2023-08-11 11:38:04,846:INFO:Uploading model into container now
2023-08-11 11:38:04,846:INFO:_master_model_container: 13
2023-08-11 11:38:04,846:INFO:_display_container: 2
2023-08-11 11:38:04,846:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-08-11 11:38:04,846:INFO:create_model() successfully completed......................................
2023-08-11 11:38:04,976:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:04,976:INFO:Creating metrics dataframe
2023-08-11 11:38:04,985:INFO:Initializing Extra Trees Regressor
2023-08-11 11:38:04,985:INFO:Total runtime is 0.08018163839975992 minutes
2023-08-11 11:38:04,987:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:04,988:INFO:Initializing create_model()
2023-08-11 11:38:04,988:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=et, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:04,988:INFO:Checking exceptions
2023-08-11 11:38:04,988:INFO:Importing libraries
2023-08-11 11:38:04,988:INFO:Copying training dataset
2023-08-11 11:38:04,990:INFO:Defining folds
2023-08-11 11:38:04,990:INFO:Declaring metric variables
2023-08-11 11:38:04,992:INFO:Importing untrained model
2023-08-11 11:38:04,995:INFO:Extra Trees Regressor Imported successfully
2023-08-11 11:38:04,998:INFO:Starting cross validation
2023-08-11 11:38:04,999:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:05,781:INFO:Calculating mean and std
2023-08-11 11:38:05,783:INFO:Creating metrics dataframe
2023-08-11 11:38:05,804:INFO:Uploading results into container
2023-08-11 11:38:05,804:INFO:Uploading model into container now
2023-08-11 11:38:05,804:INFO:_master_model_container: 14
2023-08-11 11:38:05,804:INFO:_display_container: 2
2023-08-11 11:38:05,804:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-08-11 11:38:05,804:INFO:create_model() successfully completed......................................
2023-08-11 11:38:05,938:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:05,938:INFO:Creating metrics dataframe
2023-08-11 11:38:05,948:INFO:Initializing AdaBoost Regressor
2023-08-11 11:38:05,948:INFO:Total runtime is 0.0962255557378133 minutes
2023-08-11 11:38:05,950:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:05,950:INFO:Initializing create_model()
2023-08-11 11:38:05,951:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=ada, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:05,951:INFO:Checking exceptions
2023-08-11 11:38:05,951:INFO:Importing libraries
2023-08-11 11:38:05,951:INFO:Copying training dataset
2023-08-11 11:38:05,953:INFO:Defining folds
2023-08-11 11:38:05,953:INFO:Declaring metric variables
2023-08-11 11:38:05,955:INFO:Importing untrained model
2023-08-11 11:38:05,957:INFO:AdaBoost Regressor Imported successfully
2023-08-11 11:38:05,962:INFO:Starting cross validation
2023-08-11 11:38:05,962:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:06,232:INFO:Calculating mean and std
2023-08-11 11:38:06,233:INFO:Creating metrics dataframe
2023-08-11 11:38:06,252:INFO:Uploading results into container
2023-08-11 11:38:06,252:INFO:Uploading model into container now
2023-08-11 11:38:06,252:INFO:_master_model_container: 15
2023-08-11 11:38:06,252:INFO:_display_container: 2
2023-08-11 11:38:06,252:INFO:AdaBoostRegressor(random_state=1)
2023-08-11 11:38:06,252:INFO:create_model() successfully completed......................................
2023-08-11 11:38:06,383:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:06,383:INFO:Creating metrics dataframe
2023-08-11 11:38:06,393:INFO:Initializing Gradient Boosting Regressor
2023-08-11 11:38:06,393:INFO:Total runtime is 0.10364763339360554 minutes
2023-08-11 11:38:06,396:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:06,396:INFO:Initializing create_model()
2023-08-11 11:38:06,396:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=gbr, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:06,396:INFO:Checking exceptions
2023-08-11 11:38:06,396:INFO:Importing libraries
2023-08-11 11:38:06,396:INFO:Copying training dataset
2023-08-11 11:38:06,398:INFO:Defining folds
2023-08-11 11:38:06,399:INFO:Declaring metric variables
2023-08-11 11:38:06,401:INFO:Importing untrained model
2023-08-11 11:38:06,403:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 11:38:06,407:INFO:Starting cross validation
2023-08-11 11:38:06,407:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:06,629:INFO:Calculating mean and std
2023-08-11 11:38:06,631:INFO:Creating metrics dataframe
2023-08-11 11:38:06,649:INFO:Uploading results into container
2023-08-11 11:38:06,649:INFO:Uploading model into container now
2023-08-11 11:38:06,649:INFO:_master_model_container: 16
2023-08-11 11:38:06,649:INFO:_display_container: 2
2023-08-11 11:38:06,649:INFO:GradientBoostingRegressor(random_state=1)
2023-08-11 11:38:06,649:INFO:create_model() successfully completed......................................
2023-08-11 11:38:06,781:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:06,781:INFO:Creating metrics dataframe
2023-08-11 11:38:06,791:INFO:Initializing Extreme Gradient Boosting
2023-08-11 11:38:06,791:INFO:Total runtime is 0.11027453740437825 minutes
2023-08-11 11:38:06,793:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:06,793:INFO:Initializing create_model()
2023-08-11 11:38:06,793:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=xgboost, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:06,793:INFO:Checking exceptions
2023-08-11 11:38:06,793:INFO:Importing libraries
2023-08-11 11:38:06,793:INFO:Copying training dataset
2023-08-11 11:38:06,796:INFO:Defining folds
2023-08-11 11:38:06,796:INFO:Declaring metric variables
2023-08-11 11:38:06,799:INFO:Importing untrained model
2023-08-11 11:38:06,802:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 11:38:06,807:INFO:Starting cross validation
2023-08-11 11:38:06,808:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:06,988:INFO:Calculating mean and std
2023-08-11 11:38:06,989:INFO:Creating metrics dataframe
2023-08-11 11:38:07,007:INFO:Uploading results into container
2023-08-11 11:38:07,008:INFO:Uploading model into container now
2023-08-11 11:38:07,008:INFO:_master_model_container: 17
2023-08-11 11:38:07,008:INFO:_display_container: 2
2023-08-11 11:38:07,009:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=1,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 11:38:07,009:INFO:create_model() successfully completed......................................
2023-08-11 11:38:07,140:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:07,140:INFO:Creating metrics dataframe
2023-08-11 11:38:07,151:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 11:38:07,151:INFO:Total runtime is 0.11627082029978433 minutes
2023-08-11 11:38:07,153:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:07,153:INFO:Initializing create_model()
2023-08-11 11:38:07,153:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:07,153:INFO:Checking exceptions
2023-08-11 11:38:07,153:INFO:Importing libraries
2023-08-11 11:38:07,153:INFO:Copying training dataset
2023-08-11 11:38:07,156:INFO:Defining folds
2023-08-11 11:38:07,156:INFO:Declaring metric variables
2023-08-11 11:38:07,158:INFO:Importing untrained model
2023-08-11 11:38:07,160:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 11:38:07,164:INFO:Starting cross validation
2023-08-11 11:38:07,165:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:07,329:INFO:Calculating mean and std
2023-08-11 11:38:07,330:INFO:Creating metrics dataframe
2023-08-11 11:38:07,348:INFO:Uploading results into container
2023-08-11 11:38:07,348:INFO:Uploading model into container now
2023-08-11 11:38:07,349:INFO:_master_model_container: 18
2023-08-11 11:38:07,349:INFO:_display_container: 2
2023-08-11 11:38:07,349:INFO:LGBMRegressor(random_state=1)
2023-08-11 11:38:07,349:INFO:create_model() successfully completed......................................
2023-08-11 11:38:07,479:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:07,479:INFO:Creating metrics dataframe
2023-08-11 11:38:07,490:INFO:Initializing CatBoost Regressor
2023-08-11 11:38:07,490:INFO:Total runtime is 0.1219188888867696 minutes
2023-08-11 11:38:07,492:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:07,492:INFO:Initializing create_model()
2023-08-11 11:38:07,492:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=catboost, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:07,492:INFO:Checking exceptions
2023-08-11 11:38:07,492:INFO:Importing libraries
2023-08-11 11:38:07,492:INFO:Copying training dataset
2023-08-11 11:38:07,494:INFO:Defining folds
2023-08-11 11:38:07,495:INFO:Declaring metric variables
2023-08-11 11:38:07,497:INFO:Importing untrained model
2023-08-11 11:38:07,499:INFO:CatBoost Regressor Imported successfully
2023-08-11 11:38:07,503:INFO:Starting cross validation
2023-08-11 11:38:07,503:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:08,847:INFO:Calculating mean and std
2023-08-11 11:38:08,849:INFO:Creating metrics dataframe
2023-08-11 11:38:08,869:INFO:Uploading results into container
2023-08-11 11:38:08,869:INFO:Uploading model into container now
2023-08-11 11:38:08,869:INFO:_master_model_container: 19
2023-08-11 11:38:08,869:INFO:_display_container: 2
2023-08-11 11:38:08,869:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d43a22e90>
2023-08-11 11:38:08,869:INFO:create_model() successfully completed......................................
2023-08-11 11:38:09,000:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:09,000:INFO:Creating metrics dataframe
2023-08-11 11:38:09,011:INFO:Initializing Dummy Regressor
2023-08-11 11:38:09,011:INFO:Total runtime is 0.14727245171864828 minutes
2023-08-11 11:38:09,013:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:09,013:INFO:Initializing create_model()
2023-08-11 11:38:09,013:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=dummy, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d00424a10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:09,013:INFO:Checking exceptions
2023-08-11 11:38:09,013:INFO:Importing libraries
2023-08-11 11:38:09,013:INFO:Copying training dataset
2023-08-11 11:38:09,016:INFO:Defining folds
2023-08-11 11:38:09,016:INFO:Declaring metric variables
2023-08-11 11:38:09,018:INFO:Importing untrained model
2023-08-11 11:38:09,020:INFO:Dummy Regressor Imported successfully
2023-08-11 11:38:09,024:INFO:Starting cross validation
2023-08-11 11:38:09,025:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:09,182:INFO:Calculating mean and std
2023-08-11 11:38:09,183:INFO:Creating metrics dataframe
2023-08-11 11:38:09,203:INFO:Uploading results into container
2023-08-11 11:38:09,203:INFO:Uploading model into container now
2023-08-11 11:38:09,204:INFO:_master_model_container: 20
2023-08-11 11:38:09,204:INFO:_display_container: 2
2023-08-11 11:38:09,204:INFO:DummyRegressor()
2023-08-11 11:38:09,204:INFO:create_model() successfully completed......................................
2023-08-11 11:38:09,334:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:09,334:INFO:Creating metrics dataframe
2023-08-11 11:38:09,351:INFO:Initializing create_model()
2023-08-11 11:38:09,351:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d2195c110>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=1), fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:09,351:INFO:Checking exceptions
2023-08-11 11:38:09,352:INFO:Importing libraries
2023-08-11 11:38:09,352:INFO:Copying training dataset
2023-08-11 11:38:09,353:INFO:Defining folds
2023-08-11 11:38:09,353:INFO:Declaring metric variables
2023-08-11 11:38:09,354:INFO:Importing untrained model
2023-08-11 11:38:09,354:INFO:Declaring custom model
2023-08-11 11:38:09,354:INFO:Extra Trees Regressor Imported successfully
2023-08-11 11:38:09,355:INFO:Cross validation set to False
2023-08-11 11:38:09,355:INFO:Fitting Model
2023-08-11 11:38:09,561:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-08-11 11:38:09,561:INFO:create_model() successfully completed......................................
2023-08-11 11:38:09,720:INFO:_master_model_container: 20
2023-08-11 11:38:09,721:INFO:_display_container: 2
2023-08-11 11:38:09,721:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-08-11 11:38:09,721:INFO:compare_models() successfully completed......................................
2023-08-11 11:38:53,493:INFO:PyCaret RegressionExperiment
2023-08-11 11:38:53,493:INFO:Logging name: reg-default-name
2023-08-11 11:38:53,493:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 11:38:53,493:INFO:version 3.0.2
2023-08-11 11:38:53,493:INFO:Initializing setup()
2023-08-11 11:38:53,493:INFO:self.USI: fd4b
2023-08-11 11:38:53,493:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 11:38:53,493:INFO:Checking environment
2023-08-11 11:38:53,493:INFO:python_version: 3.7.13
2023-08-11 11:38:53,493:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 11:38:53,493:INFO:machine: x86_64
2023-08-11 11:38:53,493:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 11:38:53,493:INFO:Memory: svmem(total=17179869184, available=1333665792, percent=92.2, used=1774940160, free=18182144, active=1318023168, inactive=1308590080, wired=456916992)
2023-08-11 11:38:53,493:INFO:Physical Core: 8
2023-08-11 11:38:53,493:INFO:Logical Core: 8
2023-08-11 11:38:53,494:INFO:Checking libraries
2023-08-11 11:38:53,494:INFO:System:
2023-08-11 11:38:53,494:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 11:38:53,494:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 11:38:53,494:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 11:38:53,494:INFO:PyCaret required dependencies:
2023-08-11 11:38:53,494:INFO:                 pip: 22.3.1
2023-08-11 11:38:53,494:INFO:          setuptools: 63.4.1
2023-08-11 11:38:53,494:INFO:             pycaret: 3.0.2
2023-08-11 11:38:53,494:INFO:             IPython: 7.33.0
2023-08-11 11:38:53,494:INFO:          ipywidgets: 8.0.2
2023-08-11 11:38:53,494:INFO:                tqdm: 4.64.1
2023-08-11 11:38:53,494:INFO:               numpy: 1.21.5
2023-08-11 11:38:53,494:INFO:              pandas: 1.3.5
2023-08-11 11:38:53,494:INFO:              jinja2: 3.1.2
2023-08-11 11:38:53,494:INFO:               scipy: 1.7.3
2023-08-11 11:38:53,494:INFO:              joblib: 1.2.0
2023-08-11 11:38:53,494:INFO:             sklearn: 1.0.2
2023-08-11 11:38:53,494:INFO:                pyod: 1.0.9
2023-08-11 11:38:53,494:INFO:            imblearn: 0.10.1
2023-08-11 11:38:53,494:INFO:   category_encoders: 2.6.1
2023-08-11 11:38:53,494:INFO:            lightgbm: 3.3.2
2023-08-11 11:38:53,494:INFO:               numba: 0.56.2
2023-08-11 11:38:53,494:INFO:            requests: 2.28.1
2023-08-11 11:38:53,494:INFO:          matplotlib: 3.5.3
2023-08-11 11:38:53,494:INFO:          scikitplot: 0.3.7
2023-08-11 11:38:53,495:INFO:         yellowbrick: 1.5
2023-08-11 11:38:53,495:INFO:              plotly: 5.13.0
2023-08-11 11:38:53,495:INFO:             kaleido: 0.2.1
2023-08-11 11:38:53,495:INFO:         statsmodels: 0.13.2
2023-08-11 11:38:53,495:INFO:              sktime: 0.17.0
2023-08-11 11:38:53,495:INFO:               tbats: 1.1.3
2023-08-11 11:38:53,495:INFO:            pmdarima: 2.0.3
2023-08-11 11:38:53,495:INFO:              psutil: 5.9.2
2023-08-11 11:38:53,495:INFO:PyCaret optional dependencies:
2023-08-11 11:38:53,495:INFO:                shap: Not installed
2023-08-11 11:38:53,495:INFO:           interpret: Not installed
2023-08-11 11:38:53,495:INFO:                umap: 0.5.3
2023-08-11 11:38:53,495:INFO:    pandas_profiling: 3.0.0
2023-08-11 11:38:53,495:INFO:  explainerdashboard: Not installed
2023-08-11 11:38:53,495:INFO:             autoviz: Not installed
2023-08-11 11:38:53,495:INFO:           fairlearn: Not installed
2023-08-11 11:38:53,495:INFO:             xgboost: 1.6.2
2023-08-11 11:38:53,495:INFO:            catboost: 1.0.4
2023-08-11 11:38:53,495:INFO:              kmodes: 0.12.2
2023-08-11 11:38:53,495:INFO:             mlxtend: 0.19.0
2023-08-11 11:38:53,495:INFO:       statsforecast: Not installed
2023-08-11 11:38:53,495:INFO:        tune_sklearn: Not installed
2023-08-11 11:38:53,495:INFO:                 ray: Not installed
2023-08-11 11:38:53,495:INFO:            hyperopt: Not installed
2023-08-11 11:38:53,495:INFO:              optuna: Not installed
2023-08-11 11:38:53,495:INFO:               skopt: Not installed
2023-08-11 11:38:53,495:INFO:              mlflow: 1.29.0
2023-08-11 11:38:53,496:INFO:              gradio: Not installed
2023-08-11 11:38:53,496:INFO:             fastapi: Not installed
2023-08-11 11:38:53,496:INFO:             uvicorn: Not installed
2023-08-11 11:38:53,496:INFO:              m2cgen: Not installed
2023-08-11 11:38:53,496:INFO:           evidently: Not installed
2023-08-11 11:38:53,496:INFO:               fugue: Not installed
2023-08-11 11:38:53,496:INFO:           streamlit: 1.13.0
2023-08-11 11:38:53,496:INFO:             prophet: Not installed
2023-08-11 11:38:53,496:INFO:None
2023-08-11 11:38:53,496:INFO:Set up data.
2023-08-11 11:38:53,500:INFO:Set up train/test split.
2023-08-11 11:38:53,504:INFO:Set up index.
2023-08-11 11:38:53,504:INFO:Set up folding strategy.
2023-08-11 11:38:53,504:INFO:Assigning column types.
2023-08-11 11:38:53,509:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 11:38:53,509:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,517:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,523:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,577:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,613:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,613:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:38:53,615:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:38:53,616:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,620:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,623:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,669:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,705:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,706:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:38:53,708:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:38:53,708:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 11:38:53,712:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,715:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,760:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,796:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,796:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:38:53,798:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:38:53,802:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,806:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,851:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,887:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,887:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:38:53,889:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:38:53,889:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 11:38:53,896:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,941:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,977:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:38:53,977:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:38:53,979:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:38:53,987:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:38:54,031:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:38:54,067:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:38:54,067:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:38:54,069:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:38:54,069:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 11:38:54,121:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:38:54,156:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:38:54,157:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:38:54,159:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:38:54,211:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:38:54,247:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:38:54,247:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:38:54,249:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:38:54,249:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 11:38:54,301:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:38:54,337:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:38:54,339:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:38:54,391:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:38:54,428:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:38:54,429:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:38:54,430:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 11:38:54,517:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:38:54,519:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:38:54,611:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:38:54,614:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:38:54,614:INFO:Preparing preprocessing pipeline...
2023-08-11 11:38:54,614:INFO:Set up simple imputation.
2023-08-11 11:38:54,625:INFO:Finished creating preprocessing pipeline.
2023-08-11 11:38:54,627:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ABC', 'nAcid', 'nBridgehead',
                                             'ATSC4c', 'ATSC6c', 'GATS2d',
                                             'PEOE_VSA13'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-11 11:38:54,627:INFO:Creating final display dataframe.
2023-08-11 11:38:54,667:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target               pKi
2                   Target type        Regression
3           Original data shape          (316, 8)
4        Transformed data shape          (316, 8)
5   Transformed train set shape          (221, 8)
6    Transformed test set shape           (95, 8)
7              Numeric features                 7
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              fd4b
2023-08-11 11:38:54,762:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:38:54,764:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:38:54,853:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:38:54,855:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:38:54,856:INFO:setup() successfully completed in 1.39s...............
2023-08-11 11:38:55,544:INFO:Initializing compare_models()
2023-08-11 11:38:55,545:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 11:38:55,546:INFO:Checking exceptions
2023-08-11 11:38:55,550:INFO:Preparing display monitor
2023-08-11 11:38:55,604:INFO:Initializing Linear Regression
2023-08-11 11:38:55,604:INFO:Total runtime is 3.635883331298828e-06 minutes
2023-08-11 11:38:55,608:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:55,608:INFO:Initializing create_model()
2023-08-11 11:38:55,608:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=lr, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:55,608:INFO:Checking exceptions
2023-08-11 11:38:55,609:INFO:Importing libraries
2023-08-11 11:38:55,609:INFO:Copying training dataset
2023-08-11 11:38:55,611:INFO:Defining folds
2023-08-11 11:38:55,611:INFO:Declaring metric variables
2023-08-11 11:38:55,614:INFO:Importing untrained model
2023-08-11 11:38:55,618:INFO:Linear Regression Imported successfully
2023-08-11 11:38:55,623:INFO:Starting cross validation
2023-08-11 11:38:55,624:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:55,778:INFO:Calculating mean and std
2023-08-11 11:38:55,779:INFO:Creating metrics dataframe
2023-08-11 11:38:55,797:INFO:Uploading results into container
2023-08-11 11:38:55,798:INFO:Uploading model into container now
2023-08-11 11:38:55,798:INFO:_master_model_container: 1
2023-08-11 11:38:55,798:INFO:_display_container: 2
2023-08-11 11:38:55,798:INFO:LinearRegression(n_jobs=-1)
2023-08-11 11:38:55,798:INFO:create_model() successfully completed......................................
2023-08-11 11:38:55,929:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:55,930:INFO:Creating metrics dataframe
2023-08-11 11:38:55,937:INFO:Initializing Lasso Regression
2023-08-11 11:38:55,937:INFO:Total runtime is 0.005549152692159017 minutes
2023-08-11 11:38:55,939:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:55,939:INFO:Initializing create_model()
2023-08-11 11:38:55,939:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=lasso, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:55,939:INFO:Checking exceptions
2023-08-11 11:38:55,939:INFO:Importing libraries
2023-08-11 11:38:55,939:INFO:Copying training dataset
2023-08-11 11:38:55,941:INFO:Defining folds
2023-08-11 11:38:55,941:INFO:Declaring metric variables
2023-08-11 11:38:55,943:INFO:Importing untrained model
2023-08-11 11:38:55,945:INFO:Lasso Regression Imported successfully
2023-08-11 11:38:55,949:INFO:Starting cross validation
2023-08-11 11:38:55,949:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:56,110:INFO:Calculating mean and std
2023-08-11 11:38:56,110:INFO:Creating metrics dataframe
2023-08-11 11:38:56,129:INFO:Uploading results into container
2023-08-11 11:38:56,130:INFO:Uploading model into container now
2023-08-11 11:38:56,130:INFO:_master_model_container: 2
2023-08-11 11:38:56,130:INFO:_display_container: 2
2023-08-11 11:38:56,130:INFO:Lasso(random_state=1)
2023-08-11 11:38:56,130:INFO:create_model() successfully completed......................................
2023-08-11 11:38:56,260:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:56,260:INFO:Creating metrics dataframe
2023-08-11 11:38:56,268:INFO:Initializing Ridge Regression
2023-08-11 11:38:56,268:INFO:Total runtime is 0.011063249905904134 minutes
2023-08-11 11:38:56,270:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:56,270:INFO:Initializing create_model()
2023-08-11 11:38:56,270:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=ridge, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:56,270:INFO:Checking exceptions
2023-08-11 11:38:56,270:INFO:Importing libraries
2023-08-11 11:38:56,270:INFO:Copying training dataset
2023-08-11 11:38:56,272:INFO:Defining folds
2023-08-11 11:38:56,272:INFO:Declaring metric variables
2023-08-11 11:38:56,274:INFO:Importing untrained model
2023-08-11 11:38:56,276:INFO:Ridge Regression Imported successfully
2023-08-11 11:38:56,280:INFO:Starting cross validation
2023-08-11 11:38:56,280:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:56,438:INFO:Calculating mean and std
2023-08-11 11:38:56,438:INFO:Creating metrics dataframe
2023-08-11 11:38:56,458:INFO:Uploading results into container
2023-08-11 11:38:56,458:INFO:Uploading model into container now
2023-08-11 11:38:56,458:INFO:_master_model_container: 3
2023-08-11 11:38:56,458:INFO:_display_container: 2
2023-08-11 11:38:56,458:INFO:Ridge(random_state=1)
2023-08-11 11:38:56,458:INFO:create_model() successfully completed......................................
2023-08-11 11:38:56,590:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:56,590:INFO:Creating metrics dataframe
2023-08-11 11:38:56,598:INFO:Initializing Elastic Net
2023-08-11 11:38:56,599:INFO:Total runtime is 0.016574684778849283 minutes
2023-08-11 11:38:56,601:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:56,601:INFO:Initializing create_model()
2023-08-11 11:38:56,601:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=en, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:56,601:INFO:Checking exceptions
2023-08-11 11:38:56,601:INFO:Importing libraries
2023-08-11 11:38:56,601:INFO:Copying training dataset
2023-08-11 11:38:56,604:INFO:Defining folds
2023-08-11 11:38:56,604:INFO:Declaring metric variables
2023-08-11 11:38:56,606:INFO:Importing untrained model
2023-08-11 11:38:56,608:INFO:Elastic Net Imported successfully
2023-08-11 11:38:56,614:INFO:Starting cross validation
2023-08-11 11:38:56,615:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:56,780:INFO:Calculating mean and std
2023-08-11 11:38:56,782:INFO:Creating metrics dataframe
2023-08-11 11:38:56,802:INFO:Uploading results into container
2023-08-11 11:38:56,802:INFO:Uploading model into container now
2023-08-11 11:38:56,803:INFO:_master_model_container: 4
2023-08-11 11:38:56,803:INFO:_display_container: 2
2023-08-11 11:38:56,803:INFO:ElasticNet(random_state=1)
2023-08-11 11:38:56,803:INFO:create_model() successfully completed......................................
2023-08-11 11:38:56,936:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:56,936:INFO:Creating metrics dataframe
2023-08-11 11:38:56,944:INFO:Initializing Least Angle Regression
2023-08-11 11:38:56,944:INFO:Total runtime is 0.022330001990000407 minutes
2023-08-11 11:38:56,946:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:56,946:INFO:Initializing create_model()
2023-08-11 11:38:56,946:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=lar, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:56,946:INFO:Checking exceptions
2023-08-11 11:38:56,946:INFO:Importing libraries
2023-08-11 11:38:56,946:INFO:Copying training dataset
2023-08-11 11:38:56,949:INFO:Defining folds
2023-08-11 11:38:56,949:INFO:Declaring metric variables
2023-08-11 11:38:56,951:INFO:Importing untrained model
2023-08-11 11:38:56,953:INFO:Least Angle Regression Imported successfully
2023-08-11 11:38:56,958:INFO:Starting cross validation
2023-08-11 11:38:56,959:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:56,995:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:56,998:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,010:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,020:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,030:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,032:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,035:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,044:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,060:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,069:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,152:INFO:Calculating mean and std
2023-08-11 11:38:57,154:INFO:Creating metrics dataframe
2023-08-11 11:38:57,175:INFO:Uploading results into container
2023-08-11 11:38:57,176:INFO:Uploading model into container now
2023-08-11 11:38:57,176:INFO:_master_model_container: 5
2023-08-11 11:38:57,176:INFO:_display_container: 2
2023-08-11 11:38:57,176:INFO:Lars(random_state=1)
2023-08-11 11:38:57,176:INFO:create_model() successfully completed......................................
2023-08-11 11:38:57,320:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:57,320:INFO:Creating metrics dataframe
2023-08-11 11:38:57,328:INFO:Initializing Lasso Least Angle Regression
2023-08-11 11:38:57,328:INFO:Total runtime is 0.02873920202255249 minutes
2023-08-11 11:38:57,331:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:57,331:INFO:Initializing create_model()
2023-08-11 11:38:57,331:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=llar, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:57,331:INFO:Checking exceptions
2023-08-11 11:38:57,331:INFO:Importing libraries
2023-08-11 11:38:57,331:INFO:Copying training dataset
2023-08-11 11:38:57,334:INFO:Defining folds
2023-08-11 11:38:57,334:INFO:Declaring metric variables
2023-08-11 11:38:57,336:INFO:Importing untrained model
2023-08-11 11:38:57,338:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 11:38:57,343:INFO:Starting cross validation
2023-08-11 11:38:57,344:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:57,380:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:57,381:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:57,394:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:57,406:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:57,408:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:57,414:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:57,416:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:57,428:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:57,444:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:57,451:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:38:57,505:INFO:Calculating mean and std
2023-08-11 11:38:57,507:INFO:Creating metrics dataframe
2023-08-11 11:38:57,527:INFO:Uploading results into container
2023-08-11 11:38:57,527:INFO:Uploading model into container now
2023-08-11 11:38:57,527:INFO:_master_model_container: 6
2023-08-11 11:38:57,527:INFO:_display_container: 2
2023-08-11 11:38:57,528:INFO:LassoLars(random_state=1)
2023-08-11 11:38:57,528:INFO:create_model() successfully completed......................................
2023-08-11 11:38:57,659:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:57,659:INFO:Creating metrics dataframe
2023-08-11 11:38:57,668:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 11:38:57,668:INFO:Total runtime is 0.03439770142237345 minutes
2023-08-11 11:38:57,670:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:57,670:INFO:Initializing create_model()
2023-08-11 11:38:57,670:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=omp, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:57,670:INFO:Checking exceptions
2023-08-11 11:38:57,670:INFO:Importing libraries
2023-08-11 11:38:57,670:INFO:Copying training dataset
2023-08-11 11:38:57,673:INFO:Defining folds
2023-08-11 11:38:57,673:INFO:Declaring metric variables
2023-08-11 11:38:57,675:INFO:Importing untrained model
2023-08-11 11:38:57,677:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 11:38:57,682:INFO:Starting cross validation
2023-08-11 11:38:57,683:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:57,714:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,720:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,724:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,740:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,743:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,749:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,755:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,758:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,779:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,785:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:38:57,843:INFO:Calculating mean and std
2023-08-11 11:38:57,845:INFO:Creating metrics dataframe
2023-08-11 11:38:57,864:INFO:Uploading results into container
2023-08-11 11:38:57,865:INFO:Uploading model into container now
2023-08-11 11:38:57,865:INFO:_master_model_container: 7
2023-08-11 11:38:57,865:INFO:_display_container: 2
2023-08-11 11:38:57,865:INFO:OrthogonalMatchingPursuit()
2023-08-11 11:38:57,865:INFO:create_model() successfully completed......................................
2023-08-11 11:38:57,995:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:57,995:INFO:Creating metrics dataframe
2023-08-11 11:38:58,004:INFO:Initializing Bayesian Ridge
2023-08-11 11:38:58,004:INFO:Total runtime is 0.03999535242716471 minutes
2023-08-11 11:38:58,006:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:58,006:INFO:Initializing create_model()
2023-08-11 11:38:58,006:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=br, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:58,006:INFO:Checking exceptions
2023-08-11 11:38:58,006:INFO:Importing libraries
2023-08-11 11:38:58,006:INFO:Copying training dataset
2023-08-11 11:38:58,009:INFO:Defining folds
2023-08-11 11:38:58,009:INFO:Declaring metric variables
2023-08-11 11:38:58,011:INFO:Importing untrained model
2023-08-11 11:38:58,013:INFO:Bayesian Ridge Imported successfully
2023-08-11 11:38:58,018:INFO:Starting cross validation
2023-08-11 11:38:58,019:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:58,186:INFO:Calculating mean and std
2023-08-11 11:38:58,187:INFO:Creating metrics dataframe
2023-08-11 11:38:58,206:INFO:Uploading results into container
2023-08-11 11:38:58,206:INFO:Uploading model into container now
2023-08-11 11:38:58,207:INFO:_master_model_container: 8
2023-08-11 11:38:58,207:INFO:_display_container: 2
2023-08-11 11:38:58,207:INFO:BayesianRidge()
2023-08-11 11:38:58,207:INFO:create_model() successfully completed......................................
2023-08-11 11:38:58,337:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:58,337:INFO:Creating metrics dataframe
2023-08-11 11:38:58,346:INFO:Initializing Passive Aggressive Regressor
2023-08-11 11:38:58,347:INFO:Total runtime is 0.045707901318868 minutes
2023-08-11 11:38:58,349:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:58,349:INFO:Initializing create_model()
2023-08-11 11:38:58,349:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=par, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:58,349:INFO:Checking exceptions
2023-08-11 11:38:58,349:INFO:Importing libraries
2023-08-11 11:38:58,349:INFO:Copying training dataset
2023-08-11 11:38:58,352:INFO:Defining folds
2023-08-11 11:38:58,352:INFO:Declaring metric variables
2023-08-11 11:38:58,354:INFO:Importing untrained model
2023-08-11 11:38:58,356:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 11:38:58,361:INFO:Starting cross validation
2023-08-11 11:38:58,362:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:58,512:INFO:Calculating mean and std
2023-08-11 11:38:58,513:INFO:Creating metrics dataframe
2023-08-11 11:38:58,533:INFO:Uploading results into container
2023-08-11 11:38:58,533:INFO:Uploading model into container now
2023-08-11 11:38:58,534:INFO:_master_model_container: 9
2023-08-11 11:38:58,534:INFO:_display_container: 2
2023-08-11 11:38:58,534:INFO:PassiveAggressiveRegressor(random_state=1)
2023-08-11 11:38:58,534:INFO:create_model() successfully completed......................................
2023-08-11 11:38:58,663:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:58,664:INFO:Creating metrics dataframe
2023-08-11 11:38:58,672:INFO:Initializing Huber Regressor
2023-08-11 11:38:58,673:INFO:Total runtime is 0.0511409838994344 minutes
2023-08-11 11:38:58,675:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:58,675:INFO:Initializing create_model()
2023-08-11 11:38:58,675:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=huber, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:58,675:INFO:Checking exceptions
2023-08-11 11:38:58,675:INFO:Importing libraries
2023-08-11 11:38:58,675:INFO:Copying training dataset
2023-08-11 11:38:58,677:INFO:Defining folds
2023-08-11 11:38:58,677:INFO:Declaring metric variables
2023-08-11 11:38:58,679:INFO:Importing untrained model
2023-08-11 11:38:58,681:INFO:Huber Regressor Imported successfully
2023-08-11 11:38:58,686:INFO:Starting cross validation
2023-08-11 11:38:58,687:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:58,845:INFO:Calculating mean and std
2023-08-11 11:38:58,846:INFO:Creating metrics dataframe
2023-08-11 11:38:58,867:INFO:Uploading results into container
2023-08-11 11:38:58,867:INFO:Uploading model into container now
2023-08-11 11:38:58,867:INFO:_master_model_container: 10
2023-08-11 11:38:58,867:INFO:_display_container: 2
2023-08-11 11:38:58,868:INFO:HuberRegressor()
2023-08-11 11:38:58,868:INFO:create_model() successfully completed......................................
2023-08-11 11:38:58,998:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:58,999:INFO:Creating metrics dataframe
2023-08-11 11:38:59,008:INFO:Initializing K Neighbors Regressor
2023-08-11 11:38:59,008:INFO:Total runtime is 0.056729769706726066 minutes
2023-08-11 11:38:59,010:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:59,010:INFO:Initializing create_model()
2023-08-11 11:38:59,010:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=knn, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:59,010:INFO:Checking exceptions
2023-08-11 11:38:59,010:INFO:Importing libraries
2023-08-11 11:38:59,010:INFO:Copying training dataset
2023-08-11 11:38:59,013:INFO:Defining folds
2023-08-11 11:38:59,013:INFO:Declaring metric variables
2023-08-11 11:38:59,015:INFO:Importing untrained model
2023-08-11 11:38:59,017:INFO:K Neighbors Regressor Imported successfully
2023-08-11 11:38:59,021:INFO:Starting cross validation
2023-08-11 11:38:59,022:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:59,336:INFO:Calculating mean and std
2023-08-11 11:38:59,337:INFO:Creating metrics dataframe
2023-08-11 11:38:59,358:INFO:Uploading results into container
2023-08-11 11:38:59,359:INFO:Uploading model into container now
2023-08-11 11:38:59,359:INFO:_master_model_container: 11
2023-08-11 11:38:59,359:INFO:_display_container: 2
2023-08-11 11:38:59,359:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 11:38:59,359:INFO:create_model() successfully completed......................................
2023-08-11 11:38:59,489:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:59,490:INFO:Creating metrics dataframe
2023-08-11 11:38:59,499:INFO:Initializing Decision Tree Regressor
2023-08-11 11:38:59,499:INFO:Total runtime is 0.06491535107294717 minutes
2023-08-11 11:38:59,501:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:59,501:INFO:Initializing create_model()
2023-08-11 11:38:59,501:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=dt, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:59,501:INFO:Checking exceptions
2023-08-11 11:38:59,501:INFO:Importing libraries
2023-08-11 11:38:59,501:INFO:Copying training dataset
2023-08-11 11:38:59,504:INFO:Defining folds
2023-08-11 11:38:59,504:INFO:Declaring metric variables
2023-08-11 11:38:59,506:INFO:Importing untrained model
2023-08-11 11:38:59,508:INFO:Decision Tree Regressor Imported successfully
2023-08-11 11:38:59,512:INFO:Starting cross validation
2023-08-11 11:38:59,513:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:38:59,666:INFO:Calculating mean and std
2023-08-11 11:38:59,667:INFO:Creating metrics dataframe
2023-08-11 11:38:59,688:INFO:Uploading results into container
2023-08-11 11:38:59,688:INFO:Uploading model into container now
2023-08-11 11:38:59,688:INFO:_master_model_container: 12
2023-08-11 11:38:59,688:INFO:_display_container: 2
2023-08-11 11:38:59,688:INFO:DecisionTreeRegressor(random_state=1)
2023-08-11 11:38:59,688:INFO:create_model() successfully completed......................................
2023-08-11 11:38:59,820:INFO:SubProcess create_model() end ==================================
2023-08-11 11:38:59,820:INFO:Creating metrics dataframe
2023-08-11 11:38:59,829:INFO:Initializing Random Forest Regressor
2023-08-11 11:38:59,829:INFO:Total runtime is 0.07042285203933715 minutes
2023-08-11 11:38:59,831:INFO:SubProcess create_model() called ==================================
2023-08-11 11:38:59,832:INFO:Initializing create_model()
2023-08-11 11:38:59,832:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=rf, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:38:59,832:INFO:Checking exceptions
2023-08-11 11:38:59,832:INFO:Importing libraries
2023-08-11 11:38:59,832:INFO:Copying training dataset
2023-08-11 11:38:59,834:INFO:Defining folds
2023-08-11 11:38:59,834:INFO:Declaring metric variables
2023-08-11 11:38:59,836:INFO:Importing untrained model
2023-08-11 11:38:59,838:INFO:Random Forest Regressor Imported successfully
2023-08-11 11:38:59,842:INFO:Starting cross validation
2023-08-11 11:38:59,843:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:00,732:INFO:Calculating mean and std
2023-08-11 11:39:00,734:INFO:Creating metrics dataframe
2023-08-11 11:39:00,758:INFO:Uploading results into container
2023-08-11 11:39:00,758:INFO:Uploading model into container now
2023-08-11 11:39:00,758:INFO:_master_model_container: 13
2023-08-11 11:39:00,758:INFO:_display_container: 2
2023-08-11 11:39:00,758:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-08-11 11:39:00,758:INFO:create_model() successfully completed......................................
2023-08-11 11:39:00,890:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:00,890:INFO:Creating metrics dataframe
2023-08-11 11:39:00,899:INFO:Initializing Extra Trees Regressor
2023-08-11 11:39:00,899:INFO:Total runtime is 0.08825573523839314 minutes
2023-08-11 11:39:00,901:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:00,902:INFO:Initializing create_model()
2023-08-11 11:39:00,902:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=et, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:00,902:INFO:Checking exceptions
2023-08-11 11:39:00,902:INFO:Importing libraries
2023-08-11 11:39:00,902:INFO:Copying training dataset
2023-08-11 11:39:00,904:INFO:Defining folds
2023-08-11 11:39:00,904:INFO:Declaring metric variables
2023-08-11 11:39:00,906:INFO:Importing untrained model
2023-08-11 11:39:00,909:INFO:Extra Trees Regressor Imported successfully
2023-08-11 11:39:00,913:INFO:Starting cross validation
2023-08-11 11:39:00,914:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:01,715:INFO:Calculating mean and std
2023-08-11 11:39:01,717:INFO:Creating metrics dataframe
2023-08-11 11:39:01,744:INFO:Uploading results into container
2023-08-11 11:39:01,744:INFO:Uploading model into container now
2023-08-11 11:39:01,744:INFO:_master_model_container: 14
2023-08-11 11:39:01,744:INFO:_display_container: 2
2023-08-11 11:39:01,745:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-08-11 11:39:01,745:INFO:create_model() successfully completed......................................
2023-08-11 11:39:01,876:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:01,876:INFO:Creating metrics dataframe
2023-08-11 11:39:01,886:INFO:Initializing AdaBoost Regressor
2023-08-11 11:39:01,887:INFO:Total runtime is 0.10470760265986123 minutes
2023-08-11 11:39:01,889:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:01,889:INFO:Initializing create_model()
2023-08-11 11:39:01,889:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=ada, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:01,889:INFO:Checking exceptions
2023-08-11 11:39:01,889:INFO:Importing libraries
2023-08-11 11:39:01,889:INFO:Copying training dataset
2023-08-11 11:39:01,891:INFO:Defining folds
2023-08-11 11:39:01,891:INFO:Declaring metric variables
2023-08-11 11:39:01,893:INFO:Importing untrained model
2023-08-11 11:39:01,896:INFO:AdaBoost Regressor Imported successfully
2023-08-11 11:39:01,900:INFO:Starting cross validation
2023-08-11 11:39:01,901:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:02,119:INFO:Calculating mean and std
2023-08-11 11:39:02,120:INFO:Creating metrics dataframe
2023-08-11 11:39:02,144:INFO:Uploading results into container
2023-08-11 11:39:02,144:INFO:Uploading model into container now
2023-08-11 11:39:02,144:INFO:_master_model_container: 15
2023-08-11 11:39:02,144:INFO:_display_container: 2
2023-08-11 11:39:02,144:INFO:AdaBoostRegressor(random_state=1)
2023-08-11 11:39:02,145:INFO:create_model() successfully completed......................................
2023-08-11 11:39:02,275:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:02,275:INFO:Creating metrics dataframe
2023-08-11 11:39:02,285:INFO:Initializing Gradient Boosting Regressor
2023-08-11 11:39:02,286:INFO:Total runtime is 0.11135748227437335 minutes
2023-08-11 11:39:02,288:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:02,288:INFO:Initializing create_model()
2023-08-11 11:39:02,288:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=gbr, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:02,288:INFO:Checking exceptions
2023-08-11 11:39:02,288:INFO:Importing libraries
2023-08-11 11:39:02,288:INFO:Copying training dataset
2023-08-11 11:39:02,291:INFO:Defining folds
2023-08-11 11:39:02,291:INFO:Declaring metric variables
2023-08-11 11:39:02,293:INFO:Importing untrained model
2023-08-11 11:39:02,295:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 11:39:02,299:INFO:Starting cross validation
2023-08-11 11:39:02,299:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:02,601:INFO:Calculating mean and std
2023-08-11 11:39:02,602:INFO:Creating metrics dataframe
2023-08-11 11:39:02,626:INFO:Uploading results into container
2023-08-11 11:39:02,627:INFO:Uploading model into container now
2023-08-11 11:39:02,627:INFO:_master_model_container: 16
2023-08-11 11:39:02,627:INFO:_display_container: 2
2023-08-11 11:39:02,627:INFO:GradientBoostingRegressor(random_state=1)
2023-08-11 11:39:02,627:INFO:create_model() successfully completed......................................
2023-08-11 11:39:02,758:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:02,759:INFO:Creating metrics dataframe
2023-08-11 11:39:02,769:INFO:Initializing Extreme Gradient Boosting
2023-08-11 11:39:02,769:INFO:Total runtime is 0.11941110293070473 minutes
2023-08-11 11:39:02,771:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:02,771:INFO:Initializing create_model()
2023-08-11 11:39:02,771:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:02,771:INFO:Checking exceptions
2023-08-11 11:39:02,771:INFO:Importing libraries
2023-08-11 11:39:02,771:INFO:Copying training dataset
2023-08-11 11:39:02,774:INFO:Defining folds
2023-08-11 11:39:02,774:INFO:Declaring metric variables
2023-08-11 11:39:02,776:INFO:Importing untrained model
2023-08-11 11:39:02,778:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 11:39:02,782:INFO:Starting cross validation
2023-08-11 11:39:02,783:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:03,002:INFO:Calculating mean and std
2023-08-11 11:39:03,003:INFO:Creating metrics dataframe
2023-08-11 11:39:03,027:INFO:Uploading results into container
2023-08-11 11:39:03,027:INFO:Uploading model into container now
2023-08-11 11:39:03,027:INFO:_master_model_container: 17
2023-08-11 11:39:03,027:INFO:_display_container: 2
2023-08-11 11:39:03,028:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=1,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 11:39:03,028:INFO:create_model() successfully completed......................................
2023-08-11 11:39:03,159:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:03,159:INFO:Creating metrics dataframe
2023-08-11 11:39:03,169:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 11:39:03,169:INFO:Total runtime is 0.12608346939086912 minutes
2023-08-11 11:39:03,171:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:03,171:INFO:Initializing create_model()
2023-08-11 11:39:03,171:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:03,171:INFO:Checking exceptions
2023-08-11 11:39:03,172:INFO:Importing libraries
2023-08-11 11:39:03,172:INFO:Copying training dataset
2023-08-11 11:39:03,174:INFO:Defining folds
2023-08-11 11:39:03,174:INFO:Declaring metric variables
2023-08-11 11:39:03,176:INFO:Importing untrained model
2023-08-11 11:39:03,179:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 11:39:03,183:INFO:Starting cross validation
2023-08-11 11:39:03,184:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:03,367:INFO:Calculating mean and std
2023-08-11 11:39:03,368:INFO:Creating metrics dataframe
2023-08-11 11:39:03,392:INFO:Uploading results into container
2023-08-11 11:39:03,392:INFO:Uploading model into container now
2023-08-11 11:39:03,392:INFO:_master_model_container: 18
2023-08-11 11:39:03,392:INFO:_display_container: 2
2023-08-11 11:39:03,392:INFO:LGBMRegressor(random_state=1)
2023-08-11 11:39:03,393:INFO:create_model() successfully completed......................................
2023-08-11 11:39:03,523:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:03,523:INFO:Creating metrics dataframe
2023-08-11 11:39:03,534:INFO:Initializing CatBoost Regressor
2023-08-11 11:39:03,534:INFO:Total runtime is 0.1321609536806742 minutes
2023-08-11 11:39:03,536:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:03,536:INFO:Initializing create_model()
2023-08-11 11:39:03,536:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=catboost, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:03,536:INFO:Checking exceptions
2023-08-11 11:39:03,536:INFO:Importing libraries
2023-08-11 11:39:03,536:INFO:Copying training dataset
2023-08-11 11:39:03,539:INFO:Defining folds
2023-08-11 11:39:03,539:INFO:Declaring metric variables
2023-08-11 11:39:03,541:INFO:Importing untrained model
2023-08-11 11:39:03,543:INFO:CatBoost Regressor Imported successfully
2023-08-11 11:39:03,547:INFO:Starting cross validation
2023-08-11 11:39:03,547:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:05,227:INFO:Calculating mean and std
2023-08-11 11:39:05,228:INFO:Creating metrics dataframe
2023-08-11 11:39:05,254:INFO:Uploading results into container
2023-08-11 11:39:05,254:INFO:Uploading model into container now
2023-08-11 11:39:05,254:INFO:_master_model_container: 19
2023-08-11 11:39:05,254:INFO:_display_container: 2
2023-08-11 11:39:05,254:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d442e6bd0>
2023-08-11 11:39:05,254:INFO:create_model() successfully completed......................................
2023-08-11 11:39:05,386:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:05,386:INFO:Creating metrics dataframe
2023-08-11 11:39:05,397:INFO:Initializing Dummy Regressor
2023-08-11 11:39:05,397:INFO:Total runtime is 0.16321210066477454 minutes
2023-08-11 11:39:05,399:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:05,399:INFO:Initializing create_model()
2023-08-11 11:39:05,399:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=dummy, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2194f510>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:05,399:INFO:Checking exceptions
2023-08-11 11:39:05,399:INFO:Importing libraries
2023-08-11 11:39:05,399:INFO:Copying training dataset
2023-08-11 11:39:05,402:INFO:Defining folds
2023-08-11 11:39:05,402:INFO:Declaring metric variables
2023-08-11 11:39:05,404:INFO:Importing untrained model
2023-08-11 11:39:05,406:INFO:Dummy Regressor Imported successfully
2023-08-11 11:39:05,410:INFO:Starting cross validation
2023-08-11 11:39:05,410:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:05,590:INFO:Calculating mean and std
2023-08-11 11:39:05,591:INFO:Creating metrics dataframe
2023-08-11 11:39:05,616:INFO:Uploading results into container
2023-08-11 11:39:05,616:INFO:Uploading model into container now
2023-08-11 11:39:05,617:INFO:_master_model_container: 20
2023-08-11 11:39:05,617:INFO:_display_container: 2
2023-08-11 11:39:05,617:INFO:DummyRegressor()
2023-08-11 11:39:05,617:INFO:create_model() successfully completed......................................
2023-08-11 11:39:05,750:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:05,750:INFO:Creating metrics dataframe
2023-08-11 11:39:05,767:INFO:Initializing create_model()
2023-08-11 11:39:05,767:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43a2d4d0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=1), fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:05,767:INFO:Checking exceptions
2023-08-11 11:39:05,768:INFO:Importing libraries
2023-08-11 11:39:05,769:INFO:Copying training dataset
2023-08-11 11:39:05,770:INFO:Defining folds
2023-08-11 11:39:05,770:INFO:Declaring metric variables
2023-08-11 11:39:05,770:INFO:Importing untrained model
2023-08-11 11:39:05,770:INFO:Declaring custom model
2023-08-11 11:39:05,771:INFO:Extra Trees Regressor Imported successfully
2023-08-11 11:39:05,771:INFO:Cross validation set to False
2023-08-11 11:39:05,771:INFO:Fitting Model
2023-08-11 11:39:05,985:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-08-11 11:39:05,986:INFO:create_model() successfully completed......................................
2023-08-11 11:39:06,145:INFO:_master_model_container: 20
2023-08-11 11:39:06,145:INFO:_display_container: 2
2023-08-11 11:39:06,146:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-08-11 11:39:06,146:INFO:compare_models() successfully completed......................................
2023-08-11 11:39:44,208:INFO:PyCaret RegressionExperiment
2023-08-11 11:39:44,208:INFO:Logging name: reg-default-name
2023-08-11 11:39:44,208:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 11:39:44,208:INFO:version 3.0.2
2023-08-11 11:39:44,208:INFO:Initializing setup()
2023-08-11 11:39:44,208:INFO:self.USI: 3da5
2023-08-11 11:39:44,208:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 11:39:44,208:INFO:Checking environment
2023-08-11 11:39:44,208:INFO:python_version: 3.7.13
2023-08-11 11:39:44,208:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 11:39:44,208:INFO:machine: x86_64
2023-08-11 11:39:44,209:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 11:39:44,209:INFO:Memory: svmem(total=17179869184, available=1320411136, percent=92.3, used=1751932928, free=30883840, active=1294000128, inactive=1280307200, wired=457932800)
2023-08-11 11:39:44,209:INFO:Physical Core: 8
2023-08-11 11:39:44,209:INFO:Logical Core: 8
2023-08-11 11:39:44,209:INFO:Checking libraries
2023-08-11 11:39:44,209:INFO:System:
2023-08-11 11:39:44,209:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 11:39:44,209:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 11:39:44,209:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 11:39:44,209:INFO:PyCaret required dependencies:
2023-08-11 11:39:44,209:INFO:                 pip: 22.3.1
2023-08-11 11:39:44,209:INFO:          setuptools: 63.4.1
2023-08-11 11:39:44,210:INFO:             pycaret: 3.0.2
2023-08-11 11:39:44,210:INFO:             IPython: 7.33.0
2023-08-11 11:39:44,210:INFO:          ipywidgets: 8.0.2
2023-08-11 11:39:44,210:INFO:                tqdm: 4.64.1
2023-08-11 11:39:44,210:INFO:               numpy: 1.21.5
2023-08-11 11:39:44,210:INFO:              pandas: 1.3.5
2023-08-11 11:39:44,210:INFO:              jinja2: 3.1.2
2023-08-11 11:39:44,210:INFO:               scipy: 1.7.3
2023-08-11 11:39:44,210:INFO:              joblib: 1.2.0
2023-08-11 11:39:44,210:INFO:             sklearn: 1.0.2
2023-08-11 11:39:44,210:INFO:                pyod: 1.0.9
2023-08-11 11:39:44,210:INFO:            imblearn: 0.10.1
2023-08-11 11:39:44,210:INFO:   category_encoders: 2.6.1
2023-08-11 11:39:44,210:INFO:            lightgbm: 3.3.2
2023-08-11 11:39:44,210:INFO:               numba: 0.56.2
2023-08-11 11:39:44,210:INFO:            requests: 2.28.1
2023-08-11 11:39:44,210:INFO:          matplotlib: 3.5.3
2023-08-11 11:39:44,210:INFO:          scikitplot: 0.3.7
2023-08-11 11:39:44,210:INFO:         yellowbrick: 1.5
2023-08-11 11:39:44,210:INFO:              plotly: 5.13.0
2023-08-11 11:39:44,210:INFO:             kaleido: 0.2.1
2023-08-11 11:39:44,210:INFO:         statsmodels: 0.13.2
2023-08-11 11:39:44,211:INFO:              sktime: 0.17.0
2023-08-11 11:39:44,211:INFO:               tbats: 1.1.3
2023-08-11 11:39:44,211:INFO:            pmdarima: 2.0.3
2023-08-11 11:39:44,211:INFO:              psutil: 5.9.2
2023-08-11 11:39:44,211:INFO:PyCaret optional dependencies:
2023-08-11 11:39:44,211:INFO:                shap: Not installed
2023-08-11 11:39:44,211:INFO:           interpret: Not installed
2023-08-11 11:39:44,211:INFO:                umap: 0.5.3
2023-08-11 11:39:44,211:INFO:    pandas_profiling: 3.0.0
2023-08-11 11:39:44,211:INFO:  explainerdashboard: Not installed
2023-08-11 11:39:44,211:INFO:             autoviz: Not installed
2023-08-11 11:39:44,211:INFO:           fairlearn: Not installed
2023-08-11 11:39:44,211:INFO:             xgboost: 1.6.2
2023-08-11 11:39:44,211:INFO:            catboost: 1.0.4
2023-08-11 11:39:44,211:INFO:              kmodes: 0.12.2
2023-08-11 11:39:44,211:INFO:             mlxtend: 0.19.0
2023-08-11 11:39:44,211:INFO:       statsforecast: Not installed
2023-08-11 11:39:44,211:INFO:        tune_sklearn: Not installed
2023-08-11 11:39:44,211:INFO:                 ray: Not installed
2023-08-11 11:39:44,211:INFO:            hyperopt: Not installed
2023-08-11 11:39:44,212:INFO:              optuna: Not installed
2023-08-11 11:39:44,212:INFO:               skopt: Not installed
2023-08-11 11:39:44,212:INFO:              mlflow: 1.29.0
2023-08-11 11:39:44,212:INFO:              gradio: Not installed
2023-08-11 11:39:44,212:INFO:             fastapi: Not installed
2023-08-11 11:39:44,212:INFO:             uvicorn: Not installed
2023-08-11 11:39:44,212:INFO:              m2cgen: Not installed
2023-08-11 11:39:44,212:INFO:           evidently: Not installed
2023-08-11 11:39:44,212:INFO:               fugue: Not installed
2023-08-11 11:39:44,212:INFO:           streamlit: 1.13.0
2023-08-11 11:39:44,212:INFO:             prophet: Not installed
2023-08-11 11:39:44,212:INFO:None
2023-08-11 11:39:44,212:INFO:Set up data.
2023-08-11 11:39:44,218:INFO:Set up train/test split.
2023-08-11 11:39:44,221:INFO:Set up index.
2023-08-11 11:39:44,221:INFO:Set up folding strategy.
2023-08-11 11:39:44,221:INFO:Assigning column types.
2023-08-11 11:39:44,225:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 11:39:44,225:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,232:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,238:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,288:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,324:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,324:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:39:44,326:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:39:44,327:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,330:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,334:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,378:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,414:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,414:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:39:44,416:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:39:44,417:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 11:39:44,421:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,424:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,469:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,506:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,506:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:39:44,508:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:39:44,512:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,516:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,561:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,597:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,597:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:39:44,599:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:39:44,599:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 11:39:44,607:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,652:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,688:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,688:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:39:44,690:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:39:44,697:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,742:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,778:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,779:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:39:44,781:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:39:44,781:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 11:39:44,833:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,869:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,870:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:39:44,872:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:39:44,924:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,960:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:39:44,961:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:39:44,963:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:39:44,963:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 11:39:45,015:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:39:45,052:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:39:45,054:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:39:45,106:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:39:45,142:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:39:45,144:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:39:45,144:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 11:39:45,236:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:39:45,238:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:39:45,326:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:39:45,329:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:39:45,329:INFO:Preparing preprocessing pipeline...
2023-08-11 11:39:45,329:INFO:Set up simple imputation.
2023-08-11 11:39:45,340:INFO:Finished creating preprocessing pipeline.
2023-08-11 11:39:45,342:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ABC', 'nAcid', 'nSpiro',
                                             'nBridgehead', 'AATS0i', 'ATSC4c',
                                             'ATSC6c', 'GATS2d', 'PEOE_VSA13'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-11 11:39:45,342:INFO:Creating final display dataframe.
2023-08-11 11:39:45,382:INFO:Setup _display_container:                     Description             Value
0                    Session id                 1
1                        Target               pKi
2                   Target type        Regression
3           Original data shape         (316, 10)
4        Transformed data shape         (316, 10)
5   Transformed train set shape         (221, 10)
6    Transformed test set shape          (95, 10)
7              Numeric features                 9
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              3da5
2023-08-11 11:39:45,477:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:39:45,479:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:39:45,565:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:39:45,567:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:39:45,568:INFO:setup() successfully completed in 1.4s...............
2023-08-11 11:39:47,643:INFO:Initializing compare_models()
2023-08-11 11:39:47,644:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 11:39:47,645:INFO:Checking exceptions
2023-08-11 11:39:47,649:INFO:Preparing display monitor
2023-08-11 11:39:47,704:INFO:Initializing Linear Regression
2023-08-11 11:39:47,704:INFO:Total runtime is 3.7630399068196614e-06 minutes
2023-08-11 11:39:47,708:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:47,708:INFO:Initializing create_model()
2023-08-11 11:39:47,708:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=lr, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:47,708:INFO:Checking exceptions
2023-08-11 11:39:47,708:INFO:Importing libraries
2023-08-11 11:39:47,708:INFO:Copying training dataset
2023-08-11 11:39:47,711:INFO:Defining folds
2023-08-11 11:39:47,711:INFO:Declaring metric variables
2023-08-11 11:39:47,714:INFO:Importing untrained model
2023-08-11 11:39:47,717:INFO:Linear Regression Imported successfully
2023-08-11 11:39:47,722:INFO:Starting cross validation
2023-08-11 11:39:47,723:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:47,906:INFO:Calculating mean and std
2023-08-11 11:39:47,906:INFO:Creating metrics dataframe
2023-08-11 11:39:47,930:INFO:Uploading results into container
2023-08-11 11:39:47,931:INFO:Uploading model into container now
2023-08-11 11:39:47,931:INFO:_master_model_container: 1
2023-08-11 11:39:47,931:INFO:_display_container: 2
2023-08-11 11:39:47,931:INFO:LinearRegression(n_jobs=-1)
2023-08-11 11:39:47,931:INFO:create_model() successfully completed......................................
2023-08-11 11:39:48,063:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:48,063:INFO:Creating metrics dataframe
2023-08-11 11:39:48,070:INFO:Initializing Lasso Regression
2023-08-11 11:39:48,070:INFO:Total runtime is 0.006106766064961751 minutes
2023-08-11 11:39:48,072:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:48,073:INFO:Initializing create_model()
2023-08-11 11:39:48,073:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=lasso, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:48,073:INFO:Checking exceptions
2023-08-11 11:39:48,073:INFO:Importing libraries
2023-08-11 11:39:48,073:INFO:Copying training dataset
2023-08-11 11:39:48,075:INFO:Defining folds
2023-08-11 11:39:48,075:INFO:Declaring metric variables
2023-08-11 11:39:48,077:INFO:Importing untrained model
2023-08-11 11:39:48,079:INFO:Lasso Regression Imported successfully
2023-08-11 11:39:48,083:INFO:Starting cross validation
2023-08-11 11:39:48,083:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:48,262:INFO:Calculating mean and std
2023-08-11 11:39:48,263:INFO:Creating metrics dataframe
2023-08-11 11:39:48,287:INFO:Uploading results into container
2023-08-11 11:39:48,287:INFO:Uploading model into container now
2023-08-11 11:39:48,287:INFO:_master_model_container: 2
2023-08-11 11:39:48,287:INFO:_display_container: 2
2023-08-11 11:39:48,287:INFO:Lasso(random_state=1)
2023-08-11 11:39:48,287:INFO:create_model() successfully completed......................................
2023-08-11 11:39:48,417:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:48,417:INFO:Creating metrics dataframe
2023-08-11 11:39:48,425:INFO:Initializing Ridge Regression
2023-08-11 11:39:48,425:INFO:Total runtime is 0.012021152178446452 minutes
2023-08-11 11:39:48,427:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:48,427:INFO:Initializing create_model()
2023-08-11 11:39:48,427:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=ridge, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:48,428:INFO:Checking exceptions
2023-08-11 11:39:48,428:INFO:Importing libraries
2023-08-11 11:39:48,428:INFO:Copying training dataset
2023-08-11 11:39:48,429:INFO:Defining folds
2023-08-11 11:39:48,429:INFO:Declaring metric variables
2023-08-11 11:39:48,431:INFO:Importing untrained model
2023-08-11 11:39:48,433:INFO:Ridge Regression Imported successfully
2023-08-11 11:39:48,437:INFO:Starting cross validation
2023-08-11 11:39:48,438:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:48,620:INFO:Calculating mean and std
2023-08-11 11:39:48,620:INFO:Creating metrics dataframe
2023-08-11 11:39:48,644:INFO:Uploading results into container
2023-08-11 11:39:48,645:INFO:Uploading model into container now
2023-08-11 11:39:48,645:INFO:_master_model_container: 3
2023-08-11 11:39:48,645:INFO:_display_container: 2
2023-08-11 11:39:48,645:INFO:Ridge(random_state=1)
2023-08-11 11:39:48,645:INFO:create_model() successfully completed......................................
2023-08-11 11:39:48,777:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:48,777:INFO:Creating metrics dataframe
2023-08-11 11:39:48,785:INFO:Initializing Elastic Net
2023-08-11 11:39:48,785:INFO:Total runtime is 0.018016735712687176 minutes
2023-08-11 11:39:48,787:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:48,787:INFO:Initializing create_model()
2023-08-11 11:39:48,787:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=en, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:48,787:INFO:Checking exceptions
2023-08-11 11:39:48,787:INFO:Importing libraries
2023-08-11 11:39:48,787:INFO:Copying training dataset
2023-08-11 11:39:48,790:INFO:Defining folds
2023-08-11 11:39:48,790:INFO:Declaring metric variables
2023-08-11 11:39:48,792:INFO:Importing untrained model
2023-08-11 11:39:48,796:INFO:Elastic Net Imported successfully
2023-08-11 11:39:48,801:INFO:Starting cross validation
2023-08-11 11:39:48,802:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:48,990:INFO:Calculating mean and std
2023-08-11 11:39:48,991:INFO:Creating metrics dataframe
2023-08-11 11:39:49,016:INFO:Uploading results into container
2023-08-11 11:39:49,016:INFO:Uploading model into container now
2023-08-11 11:39:49,016:INFO:_master_model_container: 4
2023-08-11 11:39:49,016:INFO:_display_container: 2
2023-08-11 11:39:49,017:INFO:ElasticNet(random_state=1)
2023-08-11 11:39:49,017:INFO:create_model() successfully completed......................................
2023-08-11 11:39:49,146:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:49,146:INFO:Creating metrics dataframe
2023-08-11 11:39:49,154:INFO:Initializing Least Angle Regression
2023-08-11 11:39:49,154:INFO:Total runtime is 0.024171515305836996 minutes
2023-08-11 11:39:49,156:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:49,157:INFO:Initializing create_model()
2023-08-11 11:39:49,157:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=lar, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:49,157:INFO:Checking exceptions
2023-08-11 11:39:49,157:INFO:Importing libraries
2023-08-11 11:39:49,157:INFO:Copying training dataset
2023-08-11 11:39:49,159:INFO:Defining folds
2023-08-11 11:39:49,159:INFO:Declaring metric variables
2023-08-11 11:39:49,161:INFO:Importing untrained model
2023-08-11 11:39:49,164:INFO:Least Angle Regression Imported successfully
2023-08-11 11:39:49,168:INFO:Starting cross validation
2023-08-11 11:39:49,169:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:49,200:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,213:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,214:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,224:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,227:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,233:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,246:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,249:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,259:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,282:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,345:INFO:Calculating mean and std
2023-08-11 11:39:49,346:INFO:Creating metrics dataframe
2023-08-11 11:39:49,371:INFO:Uploading results into container
2023-08-11 11:39:49,372:INFO:Uploading model into container now
2023-08-11 11:39:49,372:INFO:_master_model_container: 5
2023-08-11 11:39:49,372:INFO:_display_container: 2
2023-08-11 11:39:49,372:INFO:Lars(random_state=1)
2023-08-11 11:39:49,372:INFO:create_model() successfully completed......................................
2023-08-11 11:39:49,501:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:49,502:INFO:Creating metrics dataframe
2023-08-11 11:39:49,510:INFO:Initializing Lasso Least Angle Regression
2023-08-11 11:39:49,510:INFO:Total runtime is 0.03009965022404989 minutes
2023-08-11 11:39:49,512:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:49,512:INFO:Initializing create_model()
2023-08-11 11:39:49,512:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=llar, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:49,512:INFO:Checking exceptions
2023-08-11 11:39:49,512:INFO:Importing libraries
2023-08-11 11:39:49,512:INFO:Copying training dataset
2023-08-11 11:39:49,515:INFO:Defining folds
2023-08-11 11:39:49,515:INFO:Declaring metric variables
2023-08-11 11:39:49,517:INFO:Importing untrained model
2023-08-11 11:39:49,519:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 11:39:49,523:INFO:Starting cross validation
2023-08-11 11:39:49,524:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:49,557:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:39:49,564:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:39:49,566:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:39:49,576:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:39:49,589:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:39:49,594:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:39:49,600:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:39:49,602:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:39:49,617:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:39:49,631:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:39:49,706:INFO:Calculating mean and std
2023-08-11 11:39:49,707:INFO:Creating metrics dataframe
2023-08-11 11:39:49,732:INFO:Uploading results into container
2023-08-11 11:39:49,732:INFO:Uploading model into container now
2023-08-11 11:39:49,732:INFO:_master_model_container: 6
2023-08-11 11:39:49,732:INFO:_display_container: 2
2023-08-11 11:39:49,732:INFO:LassoLars(random_state=1)
2023-08-11 11:39:49,732:INFO:create_model() successfully completed......................................
2023-08-11 11:39:49,862:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:49,862:INFO:Creating metrics dataframe
2023-08-11 11:39:49,871:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 11:39:49,871:INFO:Total runtime is 0.03611321846644084 minutes
2023-08-11 11:39:49,873:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:49,873:INFO:Initializing create_model()
2023-08-11 11:39:49,873:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=omp, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:49,873:INFO:Checking exceptions
2023-08-11 11:39:49,873:INFO:Importing libraries
2023-08-11 11:39:49,873:INFO:Copying training dataset
2023-08-11 11:39:49,876:INFO:Defining folds
2023-08-11 11:39:49,876:INFO:Declaring metric variables
2023-08-11 11:39:49,878:INFO:Importing untrained model
2023-08-11 11:39:49,880:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 11:39:49,885:INFO:Starting cross validation
2023-08-11 11:39:49,886:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:49,916:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,920:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,930:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,935:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,949:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,950:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,959:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,961:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,971:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:49,982:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:39:50,061:INFO:Calculating mean and std
2023-08-11 11:39:50,062:INFO:Creating metrics dataframe
2023-08-11 11:39:50,087:INFO:Uploading results into container
2023-08-11 11:39:50,087:INFO:Uploading model into container now
2023-08-11 11:39:50,087:INFO:_master_model_container: 7
2023-08-11 11:39:50,087:INFO:_display_container: 2
2023-08-11 11:39:50,087:INFO:OrthogonalMatchingPursuit()
2023-08-11 11:39:50,087:INFO:create_model() successfully completed......................................
2023-08-11 11:39:50,219:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:50,219:INFO:Creating metrics dataframe
2023-08-11 11:39:50,228:INFO:Initializing Bayesian Ridge
2023-08-11 11:39:50,228:INFO:Total runtime is 0.04206816752751669 minutes
2023-08-11 11:39:50,230:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:50,230:INFO:Initializing create_model()
2023-08-11 11:39:50,230:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=br, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:50,230:INFO:Checking exceptions
2023-08-11 11:39:50,230:INFO:Importing libraries
2023-08-11 11:39:50,230:INFO:Copying training dataset
2023-08-11 11:39:50,233:INFO:Defining folds
2023-08-11 11:39:50,233:INFO:Declaring metric variables
2023-08-11 11:39:50,235:INFO:Importing untrained model
2023-08-11 11:39:50,237:INFO:Bayesian Ridge Imported successfully
2023-08-11 11:39:50,241:INFO:Starting cross validation
2023-08-11 11:39:50,242:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:50,427:INFO:Calculating mean and std
2023-08-11 11:39:50,428:INFO:Creating metrics dataframe
2023-08-11 11:39:50,453:INFO:Uploading results into container
2023-08-11 11:39:50,453:INFO:Uploading model into container now
2023-08-11 11:39:50,453:INFO:_master_model_container: 8
2023-08-11 11:39:50,453:INFO:_display_container: 2
2023-08-11 11:39:50,453:INFO:BayesianRidge()
2023-08-11 11:39:50,454:INFO:create_model() successfully completed......................................
2023-08-11 11:39:50,584:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:50,584:INFO:Creating metrics dataframe
2023-08-11 11:39:50,593:INFO:Initializing Passive Aggressive Regressor
2023-08-11 11:39:50,593:INFO:Total runtime is 0.048148663838704434 minutes
2023-08-11 11:39:50,595:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:50,595:INFO:Initializing create_model()
2023-08-11 11:39:50,595:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=par, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:50,595:INFO:Checking exceptions
2023-08-11 11:39:50,595:INFO:Importing libraries
2023-08-11 11:39:50,595:INFO:Copying training dataset
2023-08-11 11:39:50,598:INFO:Defining folds
2023-08-11 11:39:50,598:INFO:Declaring metric variables
2023-08-11 11:39:50,600:INFO:Importing untrained model
2023-08-11 11:39:50,602:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 11:39:50,606:INFO:Starting cross validation
2023-08-11 11:39:50,607:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:50,795:INFO:Calculating mean and std
2023-08-11 11:39:50,796:INFO:Creating metrics dataframe
2023-08-11 11:39:50,821:INFO:Uploading results into container
2023-08-11 11:39:50,821:INFO:Uploading model into container now
2023-08-11 11:39:50,822:INFO:_master_model_container: 9
2023-08-11 11:39:50,822:INFO:_display_container: 2
2023-08-11 11:39:50,822:INFO:PassiveAggressiveRegressor(random_state=1)
2023-08-11 11:39:50,822:INFO:create_model() successfully completed......................................
2023-08-11 11:39:50,954:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:50,955:INFO:Creating metrics dataframe
2023-08-11 11:39:50,964:INFO:Initializing Huber Regressor
2023-08-11 11:39:50,964:INFO:Total runtime is 0.05432748397191366 minutes
2023-08-11 11:39:50,966:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:50,966:INFO:Initializing create_model()
2023-08-11 11:39:50,966:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=huber, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:50,966:INFO:Checking exceptions
2023-08-11 11:39:50,966:INFO:Importing libraries
2023-08-11 11:39:50,966:INFO:Copying training dataset
2023-08-11 11:39:50,968:INFO:Defining folds
2023-08-11 11:39:50,968:INFO:Declaring metric variables
2023-08-11 11:39:50,971:INFO:Importing untrained model
2023-08-11 11:39:50,973:INFO:Huber Regressor Imported successfully
2023-08-11 11:39:50,977:INFO:Starting cross validation
2023-08-11 11:39:50,977:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:51,162:INFO:Calculating mean and std
2023-08-11 11:39:51,163:INFO:Creating metrics dataframe
2023-08-11 11:39:51,188:INFO:Uploading results into container
2023-08-11 11:39:51,188:INFO:Uploading model into container now
2023-08-11 11:39:51,188:INFO:_master_model_container: 10
2023-08-11 11:39:51,188:INFO:_display_container: 2
2023-08-11 11:39:51,188:INFO:HuberRegressor()
2023-08-11 11:39:51,188:INFO:create_model() successfully completed......................................
2023-08-11 11:39:51,320:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:51,320:INFO:Creating metrics dataframe
2023-08-11 11:39:51,329:INFO:Initializing K Neighbors Regressor
2023-08-11 11:39:51,329:INFO:Total runtime is 0.06041711568832398 minutes
2023-08-11 11:39:51,331:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:51,331:INFO:Initializing create_model()
2023-08-11 11:39:51,331:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=knn, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:51,331:INFO:Checking exceptions
2023-08-11 11:39:51,331:INFO:Importing libraries
2023-08-11 11:39:51,331:INFO:Copying training dataset
2023-08-11 11:39:51,334:INFO:Defining folds
2023-08-11 11:39:51,334:INFO:Declaring metric variables
2023-08-11 11:39:51,336:INFO:Importing untrained model
2023-08-11 11:39:51,338:INFO:K Neighbors Regressor Imported successfully
2023-08-11 11:39:51,342:INFO:Starting cross validation
2023-08-11 11:39:51,343:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:51,653:INFO:Calculating mean and std
2023-08-11 11:39:51,654:INFO:Creating metrics dataframe
2023-08-11 11:39:51,680:INFO:Uploading results into container
2023-08-11 11:39:51,680:INFO:Uploading model into container now
2023-08-11 11:39:51,680:INFO:_master_model_container: 11
2023-08-11 11:39:51,680:INFO:_display_container: 2
2023-08-11 11:39:51,680:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 11:39:51,681:INFO:create_model() successfully completed......................................
2023-08-11 11:39:51,811:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:51,811:INFO:Creating metrics dataframe
2023-08-11 11:39:51,820:INFO:Initializing Decision Tree Regressor
2023-08-11 11:39:51,820:INFO:Total runtime is 0.06860106786092122 minutes
2023-08-11 11:39:51,822:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:51,822:INFO:Initializing create_model()
2023-08-11 11:39:51,822:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=dt, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:51,822:INFO:Checking exceptions
2023-08-11 11:39:51,822:INFO:Importing libraries
2023-08-11 11:39:51,822:INFO:Copying training dataset
2023-08-11 11:39:51,825:INFO:Defining folds
2023-08-11 11:39:51,825:INFO:Declaring metric variables
2023-08-11 11:39:51,827:INFO:Importing untrained model
2023-08-11 11:39:51,829:INFO:Decision Tree Regressor Imported successfully
2023-08-11 11:39:51,834:INFO:Starting cross validation
2023-08-11 11:39:51,835:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:52,013:INFO:Calculating mean and std
2023-08-11 11:39:52,014:INFO:Creating metrics dataframe
2023-08-11 11:39:52,039:INFO:Uploading results into container
2023-08-11 11:39:52,039:INFO:Uploading model into container now
2023-08-11 11:39:52,039:INFO:_master_model_container: 12
2023-08-11 11:39:52,039:INFO:_display_container: 2
2023-08-11 11:39:52,040:INFO:DecisionTreeRegressor(random_state=1)
2023-08-11 11:39:52,040:INFO:create_model() successfully completed......................................
2023-08-11 11:39:52,170:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:52,170:INFO:Creating metrics dataframe
2023-08-11 11:39:52,179:INFO:Initializing Random Forest Regressor
2023-08-11 11:39:52,179:INFO:Total runtime is 0.07458779811859131 minutes
2023-08-11 11:39:52,181:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:52,181:INFO:Initializing create_model()
2023-08-11 11:39:52,181:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=rf, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:52,182:INFO:Checking exceptions
2023-08-11 11:39:52,182:INFO:Importing libraries
2023-08-11 11:39:52,182:INFO:Copying training dataset
2023-08-11 11:39:52,184:INFO:Defining folds
2023-08-11 11:39:52,184:INFO:Declaring metric variables
2023-08-11 11:39:52,186:INFO:Importing untrained model
2023-08-11 11:39:52,188:INFO:Random Forest Regressor Imported successfully
2023-08-11 11:39:52,192:INFO:Starting cross validation
2023-08-11 11:39:52,193:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:53,078:INFO:Calculating mean and std
2023-08-11 11:39:53,080:INFO:Creating metrics dataframe
2023-08-11 11:39:53,108:INFO:Uploading results into container
2023-08-11 11:39:53,109:INFO:Uploading model into container now
2023-08-11 11:39:53,109:INFO:_master_model_container: 13
2023-08-11 11:39:53,109:INFO:_display_container: 2
2023-08-11 11:39:53,109:INFO:RandomForestRegressor(n_jobs=-1, random_state=1)
2023-08-11 11:39:53,109:INFO:create_model() successfully completed......................................
2023-08-11 11:39:53,242:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:53,242:INFO:Creating metrics dataframe
2023-08-11 11:39:53,252:INFO:Initializing Extra Trees Regressor
2023-08-11 11:39:53,252:INFO:Total runtime is 0.09246098597844442 minutes
2023-08-11 11:39:53,254:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:53,254:INFO:Initializing create_model()
2023-08-11 11:39:53,254:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=et, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:53,254:INFO:Checking exceptions
2023-08-11 11:39:53,254:INFO:Importing libraries
2023-08-11 11:39:53,254:INFO:Copying training dataset
2023-08-11 11:39:53,257:INFO:Defining folds
2023-08-11 11:39:53,257:INFO:Declaring metric variables
2023-08-11 11:39:53,259:INFO:Importing untrained model
2023-08-11 11:39:53,261:INFO:Extra Trees Regressor Imported successfully
2023-08-11 11:39:53,265:INFO:Starting cross validation
2023-08-11 11:39:53,266:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:54,072:INFO:Calculating mean and std
2023-08-11 11:39:54,073:INFO:Creating metrics dataframe
2023-08-11 11:39:54,104:INFO:Uploading results into container
2023-08-11 11:39:54,104:INFO:Uploading model into container now
2023-08-11 11:39:54,104:INFO:_master_model_container: 14
2023-08-11 11:39:54,104:INFO:_display_container: 2
2023-08-11 11:39:54,105:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-08-11 11:39:54,105:INFO:create_model() successfully completed......................................
2023-08-11 11:39:54,235:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:54,235:INFO:Creating metrics dataframe
2023-08-11 11:39:54,245:INFO:Initializing AdaBoost Regressor
2023-08-11 11:39:54,245:INFO:Total runtime is 0.10902193387349446 minutes
2023-08-11 11:39:54,247:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:54,248:INFO:Initializing create_model()
2023-08-11 11:39:54,248:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=ada, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:54,248:INFO:Checking exceptions
2023-08-11 11:39:54,248:INFO:Importing libraries
2023-08-11 11:39:54,248:INFO:Copying training dataset
2023-08-11 11:39:54,250:INFO:Defining folds
2023-08-11 11:39:54,250:INFO:Declaring metric variables
2023-08-11 11:39:54,252:INFO:Importing untrained model
2023-08-11 11:39:54,254:INFO:AdaBoost Regressor Imported successfully
2023-08-11 11:39:54,259:INFO:Starting cross validation
2023-08-11 11:39:54,259:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:54,524:INFO:Calculating mean and std
2023-08-11 11:39:54,525:INFO:Creating metrics dataframe
2023-08-11 11:39:54,554:INFO:Uploading results into container
2023-08-11 11:39:54,554:INFO:Uploading model into container now
2023-08-11 11:39:54,554:INFO:_master_model_container: 15
2023-08-11 11:39:54,555:INFO:_display_container: 2
2023-08-11 11:39:54,555:INFO:AdaBoostRegressor(random_state=1)
2023-08-11 11:39:54,555:INFO:create_model() successfully completed......................................
2023-08-11 11:39:54,686:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:54,686:INFO:Creating metrics dataframe
2023-08-11 11:39:54,696:INFO:Initializing Gradient Boosting Regressor
2023-08-11 11:39:54,696:INFO:Total runtime is 0.11652945280075072 minutes
2023-08-11 11:39:54,698:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:54,698:INFO:Initializing create_model()
2023-08-11 11:39:54,698:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=gbr, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:54,698:INFO:Checking exceptions
2023-08-11 11:39:54,698:INFO:Importing libraries
2023-08-11 11:39:54,698:INFO:Copying training dataset
2023-08-11 11:39:54,701:INFO:Defining folds
2023-08-11 11:39:54,701:INFO:Declaring metric variables
2023-08-11 11:39:54,703:INFO:Importing untrained model
2023-08-11 11:39:54,705:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 11:39:54,709:INFO:Starting cross validation
2023-08-11 11:39:54,710:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:54,987:INFO:Calculating mean and std
2023-08-11 11:39:54,989:INFO:Creating metrics dataframe
2023-08-11 11:39:55,018:INFO:Uploading results into container
2023-08-11 11:39:55,018:INFO:Uploading model into container now
2023-08-11 11:39:55,018:INFO:_master_model_container: 16
2023-08-11 11:39:55,018:INFO:_display_container: 2
2023-08-11 11:39:55,019:INFO:GradientBoostingRegressor(random_state=1)
2023-08-11 11:39:55,019:INFO:create_model() successfully completed......................................
2023-08-11 11:39:55,149:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:55,149:INFO:Creating metrics dataframe
2023-08-11 11:39:55,159:INFO:Initializing Extreme Gradient Boosting
2023-08-11 11:39:55,159:INFO:Total runtime is 0.12425213257471719 minutes
2023-08-11 11:39:55,161:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:55,161:INFO:Initializing create_model()
2023-08-11 11:39:55,161:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=xgboost, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:55,161:INFO:Checking exceptions
2023-08-11 11:39:55,161:INFO:Importing libraries
2023-08-11 11:39:55,161:INFO:Copying training dataset
2023-08-11 11:39:55,164:INFO:Defining folds
2023-08-11 11:39:55,164:INFO:Declaring metric variables
2023-08-11 11:39:55,166:INFO:Importing untrained model
2023-08-11 11:39:55,168:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 11:39:55,173:INFO:Starting cross validation
2023-08-11 11:39:55,173:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:55,415:INFO:Calculating mean and std
2023-08-11 11:39:55,416:INFO:Creating metrics dataframe
2023-08-11 11:39:55,445:INFO:Uploading results into container
2023-08-11 11:39:55,445:INFO:Uploading model into container now
2023-08-11 11:39:55,445:INFO:_master_model_container: 17
2023-08-11 11:39:55,445:INFO:_display_container: 2
2023-08-11 11:39:55,446:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=1,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 11:39:55,446:INFO:create_model() successfully completed......................................
2023-08-11 11:39:55,576:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:55,576:INFO:Creating metrics dataframe
2023-08-11 11:39:55,586:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 11:39:55,587:INFO:Total runtime is 0.1313751498858134 minutes
2023-08-11 11:39:55,589:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:55,589:INFO:Initializing create_model()
2023-08-11 11:39:55,589:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:55,589:INFO:Checking exceptions
2023-08-11 11:39:55,589:INFO:Importing libraries
2023-08-11 11:39:55,589:INFO:Copying training dataset
2023-08-11 11:39:55,591:INFO:Defining folds
2023-08-11 11:39:55,591:INFO:Declaring metric variables
2023-08-11 11:39:55,593:INFO:Importing untrained model
2023-08-11 11:39:55,596:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 11:39:55,600:INFO:Starting cross validation
2023-08-11 11:39:55,601:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:55,810:INFO:Calculating mean and std
2023-08-11 11:39:55,811:INFO:Creating metrics dataframe
2023-08-11 11:39:55,841:INFO:Uploading results into container
2023-08-11 11:39:55,841:INFO:Uploading model into container now
2023-08-11 11:39:55,841:INFO:_master_model_container: 18
2023-08-11 11:39:55,841:INFO:_display_container: 2
2023-08-11 11:39:55,842:INFO:LGBMRegressor(random_state=1)
2023-08-11 11:39:55,842:INFO:create_model() successfully completed......................................
2023-08-11 11:39:55,972:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:55,972:INFO:Creating metrics dataframe
2023-08-11 11:39:55,982:INFO:Initializing CatBoost Regressor
2023-08-11 11:39:55,982:INFO:Total runtime is 0.13796743551890056 minutes
2023-08-11 11:39:55,984:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:55,984:INFO:Initializing create_model()
2023-08-11 11:39:55,984:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=catboost, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:55,984:INFO:Checking exceptions
2023-08-11 11:39:55,984:INFO:Importing libraries
2023-08-11 11:39:55,984:INFO:Copying training dataset
2023-08-11 11:39:55,987:INFO:Defining folds
2023-08-11 11:39:55,987:INFO:Declaring metric variables
2023-08-11 11:39:55,989:INFO:Importing untrained model
2023-08-11 11:39:55,991:INFO:CatBoost Regressor Imported successfully
2023-08-11 11:39:55,995:INFO:Starting cross validation
2023-08-11 11:39:55,996:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:58,001:INFO:Calculating mean and std
2023-08-11 11:39:58,002:INFO:Creating metrics dataframe
2023-08-11 11:39:58,034:INFO:Uploading results into container
2023-08-11 11:39:58,035:INFO:Uploading model into container now
2023-08-11 11:39:58,035:INFO:_master_model_container: 19
2023-08-11 11:39:58,035:INFO:_display_container: 2
2023-08-11 11:39:58,035:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d21874190>
2023-08-11 11:39:58,035:INFO:create_model() successfully completed......................................
2023-08-11 11:39:58,166:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:58,166:INFO:Creating metrics dataframe
2023-08-11 11:39:58,177:INFO:Initializing Dummy Regressor
2023-08-11 11:39:58,177:INFO:Total runtime is 0.174544099966685 minutes
2023-08-11 11:39:58,179:INFO:SubProcess create_model() called ==================================
2023-08-11 11:39:58,179:INFO:Initializing create_model()
2023-08-11 11:39:58,179:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=dummy, fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21948ed0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:58,179:INFO:Checking exceptions
2023-08-11 11:39:58,179:INFO:Importing libraries
2023-08-11 11:39:58,179:INFO:Copying training dataset
2023-08-11 11:39:58,181:INFO:Defining folds
2023-08-11 11:39:58,181:INFO:Declaring metric variables
2023-08-11 11:39:58,184:INFO:Importing untrained model
2023-08-11 11:39:58,186:INFO:Dummy Regressor Imported successfully
2023-08-11 11:39:58,190:INFO:Starting cross validation
2023-08-11 11:39:58,190:INFO:Cross validating with KFold(n_splits=10, random_state=1, shuffle=True), n_jobs=-1
2023-08-11 11:39:58,384:INFO:Calculating mean and std
2023-08-11 11:39:58,385:INFO:Creating metrics dataframe
2023-08-11 11:39:58,416:INFO:Uploading results into container
2023-08-11 11:39:58,416:INFO:Uploading model into container now
2023-08-11 11:39:58,416:INFO:_master_model_container: 20
2023-08-11 11:39:58,416:INFO:_display_container: 2
2023-08-11 11:39:58,416:INFO:DummyRegressor()
2023-08-11 11:39:58,416:INFO:create_model() successfully completed......................................
2023-08-11 11:39:58,547:INFO:SubProcess create_model() end ==================================
2023-08-11 11:39:58,547:INFO:Creating metrics dataframe
2023-08-11 11:39:58,564:INFO:Initializing create_model()
2023-08-11 11:39:58,564:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21f30f90>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=1), fold=KFold(n_splits=10, random_state=1, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:39:58,564:INFO:Checking exceptions
2023-08-11 11:39:58,565:INFO:Importing libraries
2023-08-11 11:39:58,565:INFO:Copying training dataset
2023-08-11 11:39:58,566:INFO:Defining folds
2023-08-11 11:39:58,566:INFO:Declaring metric variables
2023-08-11 11:39:58,567:INFO:Importing untrained model
2023-08-11 11:39:58,567:INFO:Declaring custom model
2023-08-11 11:39:58,567:INFO:Extra Trees Regressor Imported successfully
2023-08-11 11:39:58,568:INFO:Cross validation set to False
2023-08-11 11:39:58,568:INFO:Fitting Model
2023-08-11 11:39:58,782:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-08-11 11:39:58,782:INFO:create_model() successfully completed......................................
2023-08-11 11:39:58,940:INFO:_master_model_container: 20
2023-08-11 11:39:58,940:INFO:_display_container: 2
2023-08-11 11:39:58,941:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1)
2023-08-11 11:39:58,941:INFO:compare_models() successfully completed......................................
2023-08-11 11:43:52,899:INFO:PyCaret RegressionExperiment
2023-08-11 11:43:52,900:INFO:Logging name: reg-default-name
2023-08-11 11:43:52,900:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 11:43:52,900:INFO:version 3.0.2
2023-08-11 11:43:52,900:INFO:Initializing setup()
2023-08-11 11:43:52,900:INFO:self.USI: e69f
2023-08-11 11:43:52,900:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 11:43:52,900:INFO:Checking environment
2023-08-11 11:43:52,900:INFO:python_version: 3.7.13
2023-08-11 11:43:52,900:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 11:43:52,900:INFO:machine: x86_64
2023-08-11 11:43:52,900:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 11:43:52,900:INFO:Memory: svmem(total=17179869184, available=1298178048, percent=92.4, used=1709494272, free=46821376, active=1257406464, inactive=1248739328, wired=452087808)
2023-08-11 11:43:52,900:INFO:Physical Core: 8
2023-08-11 11:43:52,900:INFO:Logical Core: 8
2023-08-11 11:43:52,900:INFO:Checking libraries
2023-08-11 11:43:52,900:INFO:System:
2023-08-11 11:43:52,900:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 11:43:52,900:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 11:43:52,900:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 11:43:52,900:INFO:PyCaret required dependencies:
2023-08-11 11:43:52,900:INFO:                 pip: 22.3.1
2023-08-11 11:43:52,901:INFO:          setuptools: 63.4.1
2023-08-11 11:43:52,901:INFO:             pycaret: 3.0.2
2023-08-11 11:43:52,901:INFO:             IPython: 7.33.0
2023-08-11 11:43:52,901:INFO:          ipywidgets: 8.0.2
2023-08-11 11:43:52,901:INFO:                tqdm: 4.64.1
2023-08-11 11:43:52,901:INFO:               numpy: 1.21.5
2023-08-11 11:43:52,901:INFO:              pandas: 1.3.5
2023-08-11 11:43:52,901:INFO:              jinja2: 3.1.2
2023-08-11 11:43:52,901:INFO:               scipy: 1.7.3
2023-08-11 11:43:52,901:INFO:              joblib: 1.2.0
2023-08-11 11:43:52,901:INFO:             sklearn: 1.0.2
2023-08-11 11:43:52,901:INFO:                pyod: 1.0.9
2023-08-11 11:43:52,901:INFO:            imblearn: 0.10.1
2023-08-11 11:43:52,901:INFO:   category_encoders: 2.6.1
2023-08-11 11:43:52,901:INFO:            lightgbm: 3.3.2
2023-08-11 11:43:52,901:INFO:               numba: 0.56.2
2023-08-11 11:43:52,901:INFO:            requests: 2.28.1
2023-08-11 11:43:52,901:INFO:          matplotlib: 3.5.3
2023-08-11 11:43:52,901:INFO:          scikitplot: 0.3.7
2023-08-11 11:43:52,901:INFO:         yellowbrick: 1.5
2023-08-11 11:43:52,901:INFO:              plotly: 5.13.0
2023-08-11 11:43:52,901:INFO:             kaleido: 0.2.1
2023-08-11 11:43:52,901:INFO:         statsmodels: 0.13.2
2023-08-11 11:43:52,901:INFO:              sktime: 0.17.0
2023-08-11 11:43:52,901:INFO:               tbats: 1.1.3
2023-08-11 11:43:52,901:INFO:            pmdarima: 2.0.3
2023-08-11 11:43:52,901:INFO:              psutil: 5.9.2
2023-08-11 11:43:52,901:INFO:PyCaret optional dependencies:
2023-08-11 11:43:52,901:INFO:                shap: Not installed
2023-08-11 11:43:52,901:INFO:           interpret: Not installed
2023-08-11 11:43:52,901:INFO:                umap: 0.5.3
2023-08-11 11:43:52,901:INFO:    pandas_profiling: 3.0.0
2023-08-11 11:43:52,901:INFO:  explainerdashboard: Not installed
2023-08-11 11:43:52,901:INFO:             autoviz: Not installed
2023-08-11 11:43:52,901:INFO:           fairlearn: Not installed
2023-08-11 11:43:52,902:INFO:             xgboost: 1.6.2
2023-08-11 11:43:52,902:INFO:            catboost: 1.0.4
2023-08-11 11:43:52,902:INFO:              kmodes: 0.12.2
2023-08-11 11:43:52,902:INFO:             mlxtend: 0.19.0
2023-08-11 11:43:52,902:INFO:       statsforecast: Not installed
2023-08-11 11:43:52,902:INFO:        tune_sklearn: Not installed
2023-08-11 11:43:52,902:INFO:                 ray: Not installed
2023-08-11 11:43:52,902:INFO:            hyperopt: Not installed
2023-08-11 11:43:52,902:INFO:              optuna: Not installed
2023-08-11 11:43:52,902:INFO:               skopt: Not installed
2023-08-11 11:43:52,902:INFO:              mlflow: 1.29.0
2023-08-11 11:43:52,902:INFO:              gradio: Not installed
2023-08-11 11:43:52,902:INFO:             fastapi: Not installed
2023-08-11 11:43:52,902:INFO:             uvicorn: Not installed
2023-08-11 11:43:52,902:INFO:              m2cgen: Not installed
2023-08-11 11:43:52,902:INFO:           evidently: Not installed
2023-08-11 11:43:52,902:INFO:               fugue: Not installed
2023-08-11 11:43:52,902:INFO:           streamlit: 1.13.0
2023-08-11 11:43:52,902:INFO:             prophet: Not installed
2023-08-11 11:43:52,902:INFO:None
2023-08-11 11:43:52,902:INFO:Set up data.
2023-08-11 11:43:52,907:INFO:Set up train/test split.
2023-08-11 11:43:52,909:INFO:Set up index.
2023-08-11 11:43:52,909:INFO:Set up folding strategy.
2023-08-11 11:43:52,909:INFO:Assigning column types.
2023-08-11 11:43:52,913:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 11:43:52,914:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 11:43:52,920:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:43:52,925:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:43:52,973:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,009:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,009:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:43:53,011:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:43:53,012:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,016:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,019:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,064:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,100:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,101:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:43:53,103:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:43:53,103:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 11:43:53,107:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,111:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,156:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,192:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,192:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:43:53,194:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:43:53,198:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,202:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,246:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,283:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,283:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:43:53,285:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:43:53,285:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 11:43:53,293:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,337:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,373:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,373:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:43:53,375:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:43:53,383:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,428:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,463:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,464:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:43:53,466:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:43:53,466:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 11:43:53,518:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,554:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,554:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:43:53,556:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:43:53,608:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,644:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,644:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:43:53,646:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:43:53,647:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 11:43:53,699:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,735:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:43:53,737:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:43:53,789:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:43:53,825:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:43:53,827:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:43:53,828:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 11:43:53,916:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:43:53,918:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:43:54,010:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:43:54,012:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:43:54,013:INFO:Preparing preprocessing pipeline...
2023-08-11 11:43:54,013:INFO:Set up simple imputation.
2023-08-11 11:43:54,023:INFO:Finished creating preprocessing pipeline.
2023-08-11 11:43:54,026:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ABC', 'nAcid', 'nSpiro',
                                             'nBridgehead', 'AATS0i', 'ATSC4c',
                                             'ATSC6c', 'GATS2d', 'PEOE_VSA13'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-11 11:43:54,026:INFO:Creating final display dataframe.
2023-08-11 11:43:54,067:INFO:Setup _display_container:                     Description             Value
0                    Session id                34
1                        Target               pKi
2                   Target type        Regression
3           Original data shape         (316, 10)
4        Transformed data shape         (316, 10)
5   Transformed train set shape         (221, 10)
6    Transformed test set shape          (95, 10)
7              Numeric features                 9
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              e69f
2023-08-11 11:43:54,161:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:43:54,164:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:43:54,252:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:43:54,254:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:43:54,254:INFO:setup() successfully completed in 1.39s...............
2023-08-11 11:43:54,932:INFO:Initializing compare_models()
2023-08-11 11:43:54,933:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 11:43:54,933:INFO:Checking exceptions
2023-08-11 11:43:54,936:INFO:Preparing display monitor
2023-08-11 11:43:54,986:INFO:Initializing Linear Regression
2023-08-11 11:43:54,986:INFO:Total runtime is 3.3696492513020832e-06 minutes
2023-08-11 11:43:54,990:INFO:SubProcess create_model() called ==================================
2023-08-11 11:43:54,990:INFO:Initializing create_model()
2023-08-11 11:43:54,990:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=lr, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:43:54,990:INFO:Checking exceptions
2023-08-11 11:43:54,990:INFO:Importing libraries
2023-08-11 11:43:54,990:INFO:Copying training dataset
2023-08-11 11:43:54,993:INFO:Defining folds
2023-08-11 11:43:54,993:INFO:Declaring metric variables
2023-08-11 11:43:54,997:INFO:Importing untrained model
2023-08-11 11:43:55,001:INFO:Linear Regression Imported successfully
2023-08-11 11:43:55,007:INFO:Starting cross validation
2023-08-11 11:43:55,008:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:43:55,227:INFO:Calculating mean and std
2023-08-11 11:43:55,227:INFO:Creating metrics dataframe
2023-08-11 11:43:55,256:INFO:Uploading results into container
2023-08-11 11:43:55,257:INFO:Uploading model into container now
2023-08-11 11:43:55,257:INFO:_master_model_container: 1
2023-08-11 11:43:55,257:INFO:_display_container: 2
2023-08-11 11:43:55,257:INFO:LinearRegression(n_jobs=-1)
2023-08-11 11:43:55,257:INFO:create_model() successfully completed......................................
2023-08-11 11:43:55,392:INFO:SubProcess create_model() end ==================================
2023-08-11 11:43:55,392:INFO:Creating metrics dataframe
2023-08-11 11:43:55,400:INFO:Initializing Lasso Regression
2023-08-11 11:43:55,400:INFO:Total runtime is 0.006898820400238037 minutes
2023-08-11 11:43:55,402:INFO:SubProcess create_model() called ==================================
2023-08-11 11:43:55,402:INFO:Initializing create_model()
2023-08-11 11:43:55,402:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=lasso, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:43:55,402:INFO:Checking exceptions
2023-08-11 11:43:55,402:INFO:Importing libraries
2023-08-11 11:43:55,402:INFO:Copying training dataset
2023-08-11 11:43:55,404:INFO:Defining folds
2023-08-11 11:43:55,404:INFO:Declaring metric variables
2023-08-11 11:43:55,406:INFO:Importing untrained model
2023-08-11 11:43:55,408:INFO:Lasso Regression Imported successfully
2023-08-11 11:43:55,411:INFO:Starting cross validation
2023-08-11 11:43:55,412:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:43:55,607:INFO:Calculating mean and std
2023-08-11 11:43:55,608:INFO:Creating metrics dataframe
2023-08-11 11:43:55,637:INFO:Uploading results into container
2023-08-11 11:43:55,637:INFO:Uploading model into container now
2023-08-11 11:43:55,638:INFO:_master_model_container: 2
2023-08-11 11:43:55,638:INFO:_display_container: 2
2023-08-11 11:43:55,638:INFO:Lasso(random_state=34)
2023-08-11 11:43:55,638:INFO:create_model() successfully completed......................................
2023-08-11 11:43:55,767:INFO:SubProcess create_model() end ==================================
2023-08-11 11:43:55,767:INFO:Creating metrics dataframe
2023-08-11 11:43:55,775:INFO:Initializing Ridge Regression
2023-08-11 11:43:55,775:INFO:Total runtime is 0.01315848429997762 minutes
2023-08-11 11:43:55,777:INFO:SubProcess create_model() called ==================================
2023-08-11 11:43:55,777:INFO:Initializing create_model()
2023-08-11 11:43:55,777:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=ridge, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:43:55,777:INFO:Checking exceptions
2023-08-11 11:43:55,777:INFO:Importing libraries
2023-08-11 11:43:55,778:INFO:Copying training dataset
2023-08-11 11:43:55,779:INFO:Defining folds
2023-08-11 11:43:55,779:INFO:Declaring metric variables
2023-08-11 11:43:55,781:INFO:Importing untrained model
2023-08-11 11:43:55,783:INFO:Ridge Regression Imported successfully
2023-08-11 11:43:55,787:INFO:Starting cross validation
2023-08-11 11:43:55,788:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:43:56,002:INFO:Calculating mean and std
2023-08-11 11:43:56,003:INFO:Creating metrics dataframe
2023-08-11 11:43:56,034:INFO:Uploading results into container
2023-08-11 11:43:56,034:INFO:Uploading model into container now
2023-08-11 11:43:56,034:INFO:_master_model_container: 3
2023-08-11 11:43:56,034:INFO:_display_container: 2
2023-08-11 11:43:56,034:INFO:Ridge(random_state=34)
2023-08-11 11:43:56,034:INFO:create_model() successfully completed......................................
2023-08-11 11:43:56,165:INFO:SubProcess create_model() end ==================================
2023-08-11 11:43:56,165:INFO:Creating metrics dataframe
2023-08-11 11:43:56,173:INFO:Initializing Elastic Net
2023-08-11 11:43:56,173:INFO:Total runtime is 0.019786818822224935 minutes
2023-08-11 11:43:56,175:INFO:SubProcess create_model() called ==================================
2023-08-11 11:43:56,175:INFO:Initializing create_model()
2023-08-11 11:43:56,175:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=en, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:43:56,175:INFO:Checking exceptions
2023-08-11 11:43:56,175:INFO:Importing libraries
2023-08-11 11:43:56,175:INFO:Copying training dataset
2023-08-11 11:43:56,178:INFO:Defining folds
2023-08-11 11:43:56,178:INFO:Declaring metric variables
2023-08-11 11:43:56,180:INFO:Importing untrained model
2023-08-11 11:43:56,182:INFO:Elastic Net Imported successfully
2023-08-11 11:43:56,186:INFO:Starting cross validation
2023-08-11 11:43:56,187:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:43:56,391:INFO:Calculating mean and std
2023-08-11 11:43:56,392:INFO:Creating metrics dataframe
2023-08-11 11:43:56,423:INFO:Uploading results into container
2023-08-11 11:43:56,423:INFO:Uploading model into container now
2023-08-11 11:43:56,424:INFO:_master_model_container: 4
2023-08-11 11:43:56,424:INFO:_display_container: 2
2023-08-11 11:43:56,424:INFO:ElasticNet(random_state=34)
2023-08-11 11:43:56,424:INFO:create_model() successfully completed......................................
2023-08-11 11:43:56,553:INFO:SubProcess create_model() end ==================================
2023-08-11 11:43:56,553:INFO:Creating metrics dataframe
2023-08-11 11:43:56,561:INFO:Initializing Least Angle Regression
2023-08-11 11:43:56,562:INFO:Total runtime is 0.026263650258382162 minutes
2023-08-11 11:43:56,564:INFO:SubProcess create_model() called ==================================
2023-08-11 11:43:56,564:INFO:Initializing create_model()
2023-08-11 11:43:56,564:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=lar, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:43:56,564:INFO:Checking exceptions
2023-08-11 11:43:56,564:INFO:Importing libraries
2023-08-11 11:43:56,564:INFO:Copying training dataset
2023-08-11 11:43:56,566:INFO:Defining folds
2023-08-11 11:43:56,566:INFO:Declaring metric variables
2023-08-11 11:43:56,568:INFO:Importing untrained model
2023-08-11 11:43:56,571:INFO:Least Angle Regression Imported successfully
2023-08-11 11:43:56,575:INFO:Starting cross validation
2023-08-11 11:43:56,575:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:43:56,608:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:56,612:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:56,627:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:56,631:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:56,636:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:56,643:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:56,667:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:56,674:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:56,678:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:56,682:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:56,776:INFO:Calculating mean and std
2023-08-11 11:43:56,778:INFO:Creating metrics dataframe
2023-08-11 11:43:56,808:INFO:Uploading results into container
2023-08-11 11:43:56,808:INFO:Uploading model into container now
2023-08-11 11:43:56,808:INFO:_master_model_container: 5
2023-08-11 11:43:56,808:INFO:_display_container: 2
2023-08-11 11:43:56,809:INFO:Lars(random_state=34)
2023-08-11 11:43:56,809:INFO:create_model() successfully completed......................................
2023-08-11 11:43:56,938:INFO:SubProcess create_model() end ==================================
2023-08-11 11:43:56,938:INFO:Creating metrics dataframe
2023-08-11 11:43:56,947:INFO:Initializing Lasso Least Angle Regression
2023-08-11 11:43:56,947:INFO:Total runtime is 0.032682470480600995 minutes
2023-08-11 11:43:56,949:INFO:SubProcess create_model() called ==================================
2023-08-11 11:43:56,949:INFO:Initializing create_model()
2023-08-11 11:43:56,949:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=llar, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:43:56,949:INFO:Checking exceptions
2023-08-11 11:43:56,949:INFO:Importing libraries
2023-08-11 11:43:56,949:INFO:Copying training dataset
2023-08-11 11:43:56,952:INFO:Defining folds
2023-08-11 11:43:56,952:INFO:Declaring metric variables
2023-08-11 11:43:56,954:INFO:Importing untrained model
2023-08-11 11:43:56,956:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 11:43:56,960:INFO:Starting cross validation
2023-08-11 11:43:56,961:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:43:56,994:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:43:57,005:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:43:57,006:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:43:57,013:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:43:57,018:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:43:57,038:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:43:57,044:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:43:57,053:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:43:57,068:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:43:57,069:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:43:57,174:INFO:Calculating mean and std
2023-08-11 11:43:57,175:INFO:Creating metrics dataframe
2023-08-11 11:43:57,207:INFO:Uploading results into container
2023-08-11 11:43:57,207:INFO:Uploading model into container now
2023-08-11 11:43:57,207:INFO:_master_model_container: 6
2023-08-11 11:43:57,207:INFO:_display_container: 2
2023-08-11 11:43:57,207:INFO:LassoLars(random_state=34)
2023-08-11 11:43:57,208:INFO:create_model() successfully completed......................................
2023-08-11 11:43:57,341:INFO:SubProcess create_model() end ==================================
2023-08-11 11:43:57,341:INFO:Creating metrics dataframe
2023-08-11 11:43:57,350:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 11:43:57,350:INFO:Total runtime is 0.0394038200378418 minutes
2023-08-11 11:43:57,352:INFO:SubProcess create_model() called ==================================
2023-08-11 11:43:57,352:INFO:Initializing create_model()
2023-08-11 11:43:57,352:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=omp, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:43:57,352:INFO:Checking exceptions
2023-08-11 11:43:57,352:INFO:Importing libraries
2023-08-11 11:43:57,352:INFO:Copying training dataset
2023-08-11 11:43:57,355:INFO:Defining folds
2023-08-11 11:43:57,355:INFO:Declaring metric variables
2023-08-11 11:43:57,357:INFO:Importing untrained model
2023-08-11 11:43:57,359:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 11:43:57,363:INFO:Starting cross validation
2023-08-11 11:43:57,364:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:43:57,402:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:57,402:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:57,406:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:57,419:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:57,428:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:57,447:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:57,449:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:57,449:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:57,464:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:57,476:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:43:57,573:INFO:Calculating mean and std
2023-08-11 11:43:57,574:INFO:Creating metrics dataframe
2023-08-11 11:43:57,605:INFO:Uploading results into container
2023-08-11 11:43:57,605:INFO:Uploading model into container now
2023-08-11 11:43:57,605:INFO:_master_model_container: 7
2023-08-11 11:43:57,605:INFO:_display_container: 2
2023-08-11 11:43:57,605:INFO:OrthogonalMatchingPursuit()
2023-08-11 11:43:57,605:INFO:create_model() successfully completed......................................
2023-08-11 11:43:57,735:INFO:SubProcess create_model() end ==================================
2023-08-11 11:43:57,735:INFO:Creating metrics dataframe
2023-08-11 11:43:57,744:INFO:Initializing Bayesian Ridge
2023-08-11 11:43:57,744:INFO:Total runtime is 0.045974135398864746 minutes
2023-08-11 11:43:57,746:INFO:SubProcess create_model() called ==================================
2023-08-11 11:43:57,746:INFO:Initializing create_model()
2023-08-11 11:43:57,746:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=br, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:43:57,746:INFO:Checking exceptions
2023-08-11 11:43:57,746:INFO:Importing libraries
2023-08-11 11:43:57,746:INFO:Copying training dataset
2023-08-11 11:43:57,749:INFO:Defining folds
2023-08-11 11:43:57,749:INFO:Declaring metric variables
2023-08-11 11:43:57,751:INFO:Importing untrained model
2023-08-11 11:43:57,753:INFO:Bayesian Ridge Imported successfully
2023-08-11 11:43:57,757:INFO:Starting cross validation
2023-08-11 11:43:57,758:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:43:57,970:INFO:Calculating mean and std
2023-08-11 11:43:57,971:INFO:Creating metrics dataframe
2023-08-11 11:43:58,001:INFO:Uploading results into container
2023-08-11 11:43:58,002:INFO:Uploading model into container now
2023-08-11 11:43:58,002:INFO:_master_model_container: 8
2023-08-11 11:43:58,002:INFO:_display_container: 2
2023-08-11 11:43:58,002:INFO:BayesianRidge()
2023-08-11 11:43:58,002:INFO:create_model() successfully completed......................................
2023-08-11 11:43:58,135:INFO:SubProcess create_model() end ==================================
2023-08-11 11:43:58,135:INFO:Creating metrics dataframe
2023-08-11 11:43:58,144:INFO:Initializing Passive Aggressive Regressor
2023-08-11 11:43:58,144:INFO:Total runtime is 0.05263568560282389 minutes
2023-08-11 11:43:58,146:INFO:SubProcess create_model() called ==================================
2023-08-11 11:43:58,146:INFO:Initializing create_model()
2023-08-11 11:43:58,146:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=par, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:43:58,146:INFO:Checking exceptions
2023-08-11 11:43:58,146:INFO:Importing libraries
2023-08-11 11:43:58,146:INFO:Copying training dataset
2023-08-11 11:43:58,149:INFO:Defining folds
2023-08-11 11:43:58,149:INFO:Declaring metric variables
2023-08-11 11:43:58,151:INFO:Importing untrained model
2023-08-11 11:43:58,153:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 11:43:58,157:INFO:Starting cross validation
2023-08-11 11:43:58,158:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:43:58,362:INFO:Calculating mean and std
2023-08-11 11:43:58,363:INFO:Creating metrics dataframe
2023-08-11 11:43:58,394:INFO:Uploading results into container
2023-08-11 11:43:58,394:INFO:Uploading model into container now
2023-08-11 11:43:58,394:INFO:_master_model_container: 9
2023-08-11 11:43:58,394:INFO:_display_container: 2
2023-08-11 11:43:58,394:INFO:PassiveAggressiveRegressor(random_state=34)
2023-08-11 11:43:58,394:INFO:create_model() successfully completed......................................
2023-08-11 11:43:58,524:INFO:SubProcess create_model() end ==================================
2023-08-11 11:43:58,524:INFO:Creating metrics dataframe
2023-08-11 11:43:58,533:INFO:Initializing Huber Regressor
2023-08-11 11:43:58,533:INFO:Total runtime is 0.05912760098775227 minutes
2023-08-11 11:43:58,535:INFO:SubProcess create_model() called ==================================
2023-08-11 11:43:58,536:INFO:Initializing create_model()
2023-08-11 11:43:58,536:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=huber, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:43:58,536:INFO:Checking exceptions
2023-08-11 11:43:58,536:INFO:Importing libraries
2023-08-11 11:43:58,536:INFO:Copying training dataset
2023-08-11 11:43:58,538:INFO:Defining folds
2023-08-11 11:43:58,538:INFO:Declaring metric variables
2023-08-11 11:43:58,540:INFO:Importing untrained model
2023-08-11 11:43:58,542:INFO:Huber Regressor Imported successfully
2023-08-11 11:43:58,546:INFO:Starting cross validation
2023-08-11 11:43:58,547:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:43:58,746:INFO:Calculating mean and std
2023-08-11 11:43:58,748:INFO:Creating metrics dataframe
2023-08-11 11:43:58,778:INFO:Uploading results into container
2023-08-11 11:43:58,778:INFO:Uploading model into container now
2023-08-11 11:43:58,779:INFO:_master_model_container: 10
2023-08-11 11:43:58,779:INFO:_display_container: 2
2023-08-11 11:43:58,779:INFO:HuberRegressor()
2023-08-11 11:43:58,779:INFO:create_model() successfully completed......................................
2023-08-11 11:43:58,908:INFO:SubProcess create_model() end ==================================
2023-08-11 11:43:58,908:INFO:Creating metrics dataframe
2023-08-11 11:43:58,918:INFO:Initializing K Neighbors Regressor
2023-08-11 11:43:58,918:INFO:Total runtime is 0.06553070147832234 minutes
2023-08-11 11:43:58,920:INFO:SubProcess create_model() called ==================================
2023-08-11 11:43:58,920:INFO:Initializing create_model()
2023-08-11 11:43:58,920:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=knn, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:43:58,920:INFO:Checking exceptions
2023-08-11 11:43:58,920:INFO:Importing libraries
2023-08-11 11:43:58,920:INFO:Copying training dataset
2023-08-11 11:43:58,922:INFO:Defining folds
2023-08-11 11:43:58,922:INFO:Declaring metric variables
2023-08-11 11:43:58,924:INFO:Importing untrained model
2023-08-11 11:43:58,927:INFO:K Neighbors Regressor Imported successfully
2023-08-11 11:43:58,931:INFO:Starting cross validation
2023-08-11 11:43:58,931:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:43:59,248:INFO:Calculating mean and std
2023-08-11 11:43:59,249:INFO:Creating metrics dataframe
2023-08-11 11:43:59,280:INFO:Uploading results into container
2023-08-11 11:43:59,280:INFO:Uploading model into container now
2023-08-11 11:43:59,281:INFO:_master_model_container: 11
2023-08-11 11:43:59,281:INFO:_display_container: 2
2023-08-11 11:43:59,281:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 11:43:59,281:INFO:create_model() successfully completed......................................
2023-08-11 11:43:59,413:INFO:SubProcess create_model() end ==================================
2023-08-11 11:43:59,413:INFO:Creating metrics dataframe
2023-08-11 11:43:59,422:INFO:Initializing Decision Tree Regressor
2023-08-11 11:43:59,423:INFO:Total runtime is 0.07394642035166421 minutes
2023-08-11 11:43:59,425:INFO:SubProcess create_model() called ==================================
2023-08-11 11:43:59,425:INFO:Initializing create_model()
2023-08-11 11:43:59,425:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=dt, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:43:59,425:INFO:Checking exceptions
2023-08-11 11:43:59,425:INFO:Importing libraries
2023-08-11 11:43:59,425:INFO:Copying training dataset
2023-08-11 11:43:59,427:INFO:Defining folds
2023-08-11 11:43:59,427:INFO:Declaring metric variables
2023-08-11 11:43:59,429:INFO:Importing untrained model
2023-08-11 11:43:59,432:INFO:Decision Tree Regressor Imported successfully
2023-08-11 11:43:59,437:INFO:Starting cross validation
2023-08-11 11:43:59,438:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:43:59,644:INFO:Calculating mean and std
2023-08-11 11:43:59,645:INFO:Creating metrics dataframe
2023-08-11 11:43:59,676:INFO:Uploading results into container
2023-08-11 11:43:59,676:INFO:Uploading model into container now
2023-08-11 11:43:59,677:INFO:_master_model_container: 12
2023-08-11 11:43:59,677:INFO:_display_container: 2
2023-08-11 11:43:59,677:INFO:DecisionTreeRegressor(random_state=34)
2023-08-11 11:43:59,677:INFO:create_model() successfully completed......................................
2023-08-11 11:43:59,810:INFO:SubProcess create_model() end ==================================
2023-08-11 11:43:59,810:INFO:Creating metrics dataframe
2023-08-11 11:43:59,820:INFO:Initializing Random Forest Regressor
2023-08-11 11:43:59,820:INFO:Total runtime is 0.0805652856826782 minutes
2023-08-11 11:43:59,822:INFO:SubProcess create_model() called ==================================
2023-08-11 11:43:59,822:INFO:Initializing create_model()
2023-08-11 11:43:59,822:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=rf, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:43:59,822:INFO:Checking exceptions
2023-08-11 11:43:59,822:INFO:Importing libraries
2023-08-11 11:43:59,822:INFO:Copying training dataset
2023-08-11 11:43:59,824:INFO:Defining folds
2023-08-11 11:43:59,824:INFO:Declaring metric variables
2023-08-11 11:43:59,827:INFO:Importing untrained model
2023-08-11 11:43:59,829:INFO:Random Forest Regressor Imported successfully
2023-08-11 11:43:59,833:INFO:Starting cross validation
2023-08-11 11:43:59,833:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:44:00,724:INFO:Calculating mean and std
2023-08-11 11:44:00,725:INFO:Creating metrics dataframe
2023-08-11 11:44:00,760:INFO:Uploading results into container
2023-08-11 11:44:00,760:INFO:Uploading model into container now
2023-08-11 11:44:00,760:INFO:_master_model_container: 13
2023-08-11 11:44:00,760:INFO:_display_container: 2
2023-08-11 11:44:00,761:INFO:RandomForestRegressor(n_jobs=-1, random_state=34)
2023-08-11 11:44:00,761:INFO:create_model() successfully completed......................................
2023-08-11 11:44:00,894:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:00,894:INFO:Creating metrics dataframe
2023-08-11 11:44:00,903:INFO:Initializing Extra Trees Regressor
2023-08-11 11:44:00,903:INFO:Total runtime is 0.09862788518269855 minutes
2023-08-11 11:44:00,905:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:00,906:INFO:Initializing create_model()
2023-08-11 11:44:00,906:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=et, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:00,906:INFO:Checking exceptions
2023-08-11 11:44:00,906:INFO:Importing libraries
2023-08-11 11:44:00,906:INFO:Copying training dataset
2023-08-11 11:44:00,908:INFO:Defining folds
2023-08-11 11:44:00,908:INFO:Declaring metric variables
2023-08-11 11:44:00,910:INFO:Importing untrained model
2023-08-11 11:44:00,913:INFO:Extra Trees Regressor Imported successfully
2023-08-11 11:44:00,917:INFO:Starting cross validation
2023-08-11 11:44:00,917:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:44:01,726:INFO:Calculating mean and std
2023-08-11 11:44:01,727:INFO:Creating metrics dataframe
2023-08-11 11:44:01,763:INFO:Uploading results into container
2023-08-11 11:44:01,763:INFO:Uploading model into container now
2023-08-11 11:44:01,764:INFO:_master_model_container: 14
2023-08-11 11:44:01,764:INFO:_display_container: 2
2023-08-11 11:44:01,764:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=34)
2023-08-11 11:44:01,764:INFO:create_model() successfully completed......................................
2023-08-11 11:44:01,894:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:01,894:INFO:Creating metrics dataframe
2023-08-11 11:44:01,904:INFO:Initializing AdaBoost Regressor
2023-08-11 11:44:01,904:INFO:Total runtime is 0.11531166632970172 minutes
2023-08-11 11:44:01,907:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:01,907:INFO:Initializing create_model()
2023-08-11 11:44:01,907:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=ada, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:01,907:INFO:Checking exceptions
2023-08-11 11:44:01,907:INFO:Importing libraries
2023-08-11 11:44:01,907:INFO:Copying training dataset
2023-08-11 11:44:01,909:INFO:Defining folds
2023-08-11 11:44:01,909:INFO:Declaring metric variables
2023-08-11 11:44:01,912:INFO:Importing untrained model
2023-08-11 11:44:01,914:INFO:AdaBoost Regressor Imported successfully
2023-08-11 11:44:01,918:INFO:Starting cross validation
2023-08-11 11:44:01,918:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:44:02,207:INFO:Calculating mean and std
2023-08-11 11:44:02,209:INFO:Creating metrics dataframe
2023-08-11 11:44:02,242:INFO:Uploading results into container
2023-08-11 11:44:02,243:INFO:Uploading model into container now
2023-08-11 11:44:02,243:INFO:_master_model_container: 15
2023-08-11 11:44:02,243:INFO:_display_container: 2
2023-08-11 11:44:02,243:INFO:AdaBoostRegressor(random_state=34)
2023-08-11 11:44:02,243:INFO:create_model() successfully completed......................................
2023-08-11 11:44:02,373:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:02,373:INFO:Creating metrics dataframe
2023-08-11 11:44:02,383:INFO:Initializing Gradient Boosting Regressor
2023-08-11 11:44:02,383:INFO:Total runtime is 0.12328486839930214 minutes
2023-08-11 11:44:02,385:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:02,385:INFO:Initializing create_model()
2023-08-11 11:44:02,385:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=gbr, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:02,385:INFO:Checking exceptions
2023-08-11 11:44:02,385:INFO:Importing libraries
2023-08-11 11:44:02,385:INFO:Copying training dataset
2023-08-11 11:44:02,388:INFO:Defining folds
2023-08-11 11:44:02,388:INFO:Declaring metric variables
2023-08-11 11:44:02,390:INFO:Importing untrained model
2023-08-11 11:44:02,392:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 11:44:02,396:INFO:Starting cross validation
2023-08-11 11:44:02,396:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:44:02,687:INFO:Calculating mean and std
2023-08-11 11:44:02,689:INFO:Creating metrics dataframe
2023-08-11 11:44:02,723:INFO:Uploading results into container
2023-08-11 11:44:02,723:INFO:Uploading model into container now
2023-08-11 11:44:02,723:INFO:_master_model_container: 16
2023-08-11 11:44:02,723:INFO:_display_container: 2
2023-08-11 11:44:02,723:INFO:GradientBoostingRegressor(random_state=34)
2023-08-11 11:44:02,723:INFO:create_model() successfully completed......................................
2023-08-11 11:44:02,853:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:02,853:INFO:Creating metrics dataframe
2023-08-11 11:44:02,863:INFO:Initializing Extreme Gradient Boosting
2023-08-11 11:44:02,863:INFO:Total runtime is 0.13129180272420246 minutes
2023-08-11 11:44:02,865:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:02,865:INFO:Initializing create_model()
2023-08-11 11:44:02,865:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=xgboost, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:02,865:INFO:Checking exceptions
2023-08-11 11:44:02,866:INFO:Importing libraries
2023-08-11 11:44:02,866:INFO:Copying training dataset
2023-08-11 11:44:02,868:INFO:Defining folds
2023-08-11 11:44:02,868:INFO:Declaring metric variables
2023-08-11 11:44:02,870:INFO:Importing untrained model
2023-08-11 11:44:02,873:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 11:44:02,877:INFO:Starting cross validation
2023-08-11 11:44:02,877:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:44:03,155:INFO:Calculating mean and std
2023-08-11 11:44:03,156:INFO:Creating metrics dataframe
2023-08-11 11:44:03,190:INFO:Uploading results into container
2023-08-11 11:44:03,190:INFO:Uploading model into container now
2023-08-11 11:44:03,190:INFO:_master_model_container: 17
2023-08-11 11:44:03,190:INFO:_display_container: 2
2023-08-11 11:44:03,191:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=34,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 11:44:03,191:INFO:create_model() successfully completed......................................
2023-08-11 11:44:03,321:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:03,321:INFO:Creating metrics dataframe
2023-08-11 11:44:03,331:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 11:44:03,331:INFO:Total runtime is 0.13909103473027545 minutes
2023-08-11 11:44:03,333:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:03,333:INFO:Initializing create_model()
2023-08-11 11:44:03,333:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:03,333:INFO:Checking exceptions
2023-08-11 11:44:03,334:INFO:Importing libraries
2023-08-11 11:44:03,334:INFO:Copying training dataset
2023-08-11 11:44:03,336:INFO:Defining folds
2023-08-11 11:44:03,336:INFO:Declaring metric variables
2023-08-11 11:44:03,338:INFO:Importing untrained model
2023-08-11 11:44:03,340:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 11:44:03,344:INFO:Starting cross validation
2023-08-11 11:44:03,345:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:44:03,592:INFO:Calculating mean and std
2023-08-11 11:44:03,594:INFO:Creating metrics dataframe
2023-08-11 11:44:03,627:INFO:Uploading results into container
2023-08-11 11:44:03,627:INFO:Uploading model into container now
2023-08-11 11:44:03,628:INFO:_master_model_container: 18
2023-08-11 11:44:03,628:INFO:_display_container: 2
2023-08-11 11:44:03,628:INFO:LGBMRegressor(random_state=34)
2023-08-11 11:44:03,628:INFO:create_model() successfully completed......................................
2023-08-11 11:44:03,758:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:03,758:INFO:Creating metrics dataframe
2023-08-11 11:44:03,768:INFO:Initializing CatBoost Regressor
2023-08-11 11:44:03,768:INFO:Total runtime is 0.1463714003562927 minutes
2023-08-11 11:44:03,770:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:03,770:INFO:Initializing create_model()
2023-08-11 11:44:03,770:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=catboost, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:03,770:INFO:Checking exceptions
2023-08-11 11:44:03,770:INFO:Importing libraries
2023-08-11 11:44:03,770:INFO:Copying training dataset
2023-08-11 11:44:03,773:INFO:Defining folds
2023-08-11 11:44:03,773:INFO:Declaring metric variables
2023-08-11 11:44:03,775:INFO:Importing untrained model
2023-08-11 11:44:03,777:INFO:CatBoost Regressor Imported successfully
2023-08-11 11:44:03,781:INFO:Starting cross validation
2023-08-11 11:44:03,781:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:44:05,713:INFO:Calculating mean and std
2023-08-11 11:44:05,714:INFO:Creating metrics dataframe
2023-08-11 11:44:05,751:INFO:Uploading results into container
2023-08-11 11:44:05,751:INFO:Uploading model into container now
2023-08-11 11:44:05,751:INFO:_master_model_container: 19
2023-08-11 11:44:05,751:INFO:_display_container: 2
2023-08-11 11:44:05,751:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d11e4a650>
2023-08-11 11:44:05,751:INFO:create_model() successfully completed......................................
2023-08-11 11:44:05,884:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:05,884:INFO:Creating metrics dataframe
2023-08-11 11:44:05,895:INFO:Initializing Dummy Regressor
2023-08-11 11:44:05,895:INFO:Total runtime is 0.18182204961776732 minutes
2023-08-11 11:44:05,897:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:05,897:INFO:Initializing create_model()
2023-08-11 11:44:05,897:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=dummy, fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d429b6f50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:05,897:INFO:Checking exceptions
2023-08-11 11:44:05,897:INFO:Importing libraries
2023-08-11 11:44:05,897:INFO:Copying training dataset
2023-08-11 11:44:05,900:INFO:Defining folds
2023-08-11 11:44:05,900:INFO:Declaring metric variables
2023-08-11 11:44:05,902:INFO:Importing untrained model
2023-08-11 11:44:05,904:INFO:Dummy Regressor Imported successfully
2023-08-11 11:44:05,908:INFO:Starting cross validation
2023-08-11 11:44:05,908:INFO:Cross validating with KFold(n_splits=10, random_state=34, shuffle=True), n_jobs=-1
2023-08-11 11:44:06,161:INFO:Calculating mean and std
2023-08-11 11:44:06,162:INFO:Creating metrics dataframe
2023-08-11 11:44:06,201:INFO:Uploading results into container
2023-08-11 11:44:06,202:INFO:Uploading model into container now
2023-08-11 11:44:06,202:INFO:_master_model_container: 20
2023-08-11 11:44:06,202:INFO:_display_container: 2
2023-08-11 11:44:06,202:INFO:DummyRegressor()
2023-08-11 11:44:06,202:INFO:create_model() successfully completed......................................
2023-08-11 11:44:06,345:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:06,345:INFO:Creating metrics dataframe
2023-08-11 11:44:06,406:INFO:Initializing create_model()
2023-08-11 11:44:06,406:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d218bde50>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=34), fold=KFold(n_splits=10, random_state=34, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:06,406:INFO:Checking exceptions
2023-08-11 11:44:06,408:INFO:Importing libraries
2023-08-11 11:44:06,408:INFO:Copying training dataset
2023-08-11 11:44:06,410:INFO:Defining folds
2023-08-11 11:44:06,411:INFO:Declaring metric variables
2023-08-11 11:44:06,411:INFO:Importing untrained model
2023-08-11 11:44:06,411:INFO:Declaring custom model
2023-08-11 11:44:06,411:INFO:Extra Trees Regressor Imported successfully
2023-08-11 11:44:06,412:INFO:Cross validation set to False
2023-08-11 11:44:06,412:INFO:Fitting Model
2023-08-11 11:44:06,642:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=34)
2023-08-11 11:44:06,642:INFO:create_model() successfully completed......................................
2023-08-11 11:44:06,800:INFO:_master_model_container: 20
2023-08-11 11:44:06,800:INFO:_display_container: 2
2023-08-11 11:44:06,800:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=34)
2023-08-11 11:44:06,800:INFO:compare_models() successfully completed......................................
2023-08-11 11:44:22,717:INFO:PyCaret RegressionExperiment
2023-08-11 11:44:22,717:INFO:Logging name: reg-default-name
2023-08-11 11:44:22,717:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 11:44:22,717:INFO:version 3.0.2
2023-08-11 11:44:22,717:INFO:Initializing setup()
2023-08-11 11:44:22,717:INFO:self.USI: 339f
2023-08-11 11:44:22,717:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 11:44:22,717:INFO:Checking environment
2023-08-11 11:44:22,717:INFO:python_version: 3.7.13
2023-08-11 11:44:22,717:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 11:44:22,717:INFO:machine: x86_64
2023-08-11 11:44:22,717:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 11:44:22,717:INFO:Memory: svmem(total=17179869184, available=1293172736, percent=92.5, used=1716617216, free=32907264, active=1263017984, inactive=1255391232, wired=453599232)
2023-08-11 11:44:22,717:INFO:Physical Core: 8
2023-08-11 11:44:22,717:INFO:Logical Core: 8
2023-08-11 11:44:22,717:INFO:Checking libraries
2023-08-11 11:44:22,718:INFO:System:
2023-08-11 11:44:22,718:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 11:44:22,718:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 11:44:22,718:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 11:44:22,718:INFO:PyCaret required dependencies:
2023-08-11 11:44:22,718:INFO:                 pip: 22.3.1
2023-08-11 11:44:22,718:INFO:          setuptools: 63.4.1
2023-08-11 11:44:22,718:INFO:             pycaret: 3.0.2
2023-08-11 11:44:22,718:INFO:             IPython: 7.33.0
2023-08-11 11:44:22,718:INFO:          ipywidgets: 8.0.2
2023-08-11 11:44:22,718:INFO:                tqdm: 4.64.1
2023-08-11 11:44:22,718:INFO:               numpy: 1.21.5
2023-08-11 11:44:22,718:INFO:              pandas: 1.3.5
2023-08-11 11:44:22,718:INFO:              jinja2: 3.1.2
2023-08-11 11:44:22,718:INFO:               scipy: 1.7.3
2023-08-11 11:44:22,718:INFO:              joblib: 1.2.0
2023-08-11 11:44:22,718:INFO:             sklearn: 1.0.2
2023-08-11 11:44:22,718:INFO:                pyod: 1.0.9
2023-08-11 11:44:22,718:INFO:            imblearn: 0.10.1
2023-08-11 11:44:22,718:INFO:   category_encoders: 2.6.1
2023-08-11 11:44:22,718:INFO:            lightgbm: 3.3.2
2023-08-11 11:44:22,718:INFO:               numba: 0.56.2
2023-08-11 11:44:22,718:INFO:            requests: 2.28.1
2023-08-11 11:44:22,718:INFO:          matplotlib: 3.5.3
2023-08-11 11:44:22,718:INFO:          scikitplot: 0.3.7
2023-08-11 11:44:22,719:INFO:         yellowbrick: 1.5
2023-08-11 11:44:22,719:INFO:              plotly: 5.13.0
2023-08-11 11:44:22,719:INFO:             kaleido: 0.2.1
2023-08-11 11:44:22,719:INFO:         statsmodels: 0.13.2
2023-08-11 11:44:22,719:INFO:              sktime: 0.17.0
2023-08-11 11:44:22,719:INFO:               tbats: 1.1.3
2023-08-11 11:44:22,719:INFO:            pmdarima: 2.0.3
2023-08-11 11:44:22,719:INFO:              psutil: 5.9.2
2023-08-11 11:44:22,719:INFO:PyCaret optional dependencies:
2023-08-11 11:44:22,719:INFO:                shap: Not installed
2023-08-11 11:44:22,719:INFO:           interpret: Not installed
2023-08-11 11:44:22,719:INFO:                umap: 0.5.3
2023-08-11 11:44:22,719:INFO:    pandas_profiling: 3.0.0
2023-08-11 11:44:22,719:INFO:  explainerdashboard: Not installed
2023-08-11 11:44:22,719:INFO:             autoviz: Not installed
2023-08-11 11:44:22,719:INFO:           fairlearn: Not installed
2023-08-11 11:44:22,719:INFO:             xgboost: 1.6.2
2023-08-11 11:44:22,719:INFO:            catboost: 1.0.4
2023-08-11 11:44:22,719:INFO:              kmodes: 0.12.2
2023-08-11 11:44:22,719:INFO:             mlxtend: 0.19.0
2023-08-11 11:44:22,719:INFO:       statsforecast: Not installed
2023-08-11 11:44:22,719:INFO:        tune_sklearn: Not installed
2023-08-11 11:44:22,719:INFO:                 ray: Not installed
2023-08-11 11:44:22,719:INFO:            hyperopt: Not installed
2023-08-11 11:44:22,720:INFO:              optuna: Not installed
2023-08-11 11:44:22,720:INFO:               skopt: Not installed
2023-08-11 11:44:22,720:INFO:              mlflow: 1.29.0
2023-08-11 11:44:22,720:INFO:              gradio: Not installed
2023-08-11 11:44:22,720:INFO:             fastapi: Not installed
2023-08-11 11:44:22,720:INFO:             uvicorn: Not installed
2023-08-11 11:44:22,720:INFO:              m2cgen: Not installed
2023-08-11 11:44:22,720:INFO:           evidently: Not installed
2023-08-11 11:44:22,720:INFO:               fugue: Not installed
2023-08-11 11:44:22,720:INFO:           streamlit: 1.13.0
2023-08-11 11:44:22,720:INFO:             prophet: Not installed
2023-08-11 11:44:22,720:INFO:None
2023-08-11 11:44:22,720:INFO:Set up data.
2023-08-11 11:44:22,725:INFO:Set up train/test split.
2023-08-11 11:44:22,727:INFO:Set up index.
2023-08-11 11:44:22,728:INFO:Set up folding strategy.
2023-08-11 11:44:22,728:INFO:Assigning column types.
2023-08-11 11:44:22,732:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 11:44:22,732:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 11:44:22,737:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:44:22,743:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:44:22,790:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:22,826:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:44:22,827:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:22,829:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:22,829:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 11:44:22,833:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:44:22,837:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:44:22,881:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:22,917:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:44:22,918:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:22,920:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:22,920:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 11:44:22,924:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:44:22,928:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:44:22,972:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,007:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,008:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:23,010:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:23,014:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,017:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,062:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,097:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,098:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:23,100:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:23,100:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 11:44:23,107:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,151:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,187:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,188:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:23,190:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:23,198:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,243:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,279:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,280:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:23,282:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:23,282:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 11:44:23,334:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,370:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,370:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:23,372:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:23,425:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,461:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,462:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:23,464:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:23,464:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 11:44:23,516:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,552:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:23,554:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:23,606:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:23,642:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:23,644:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:23,645:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 11:44:23,733:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:23,735:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:23,827:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:23,829:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:23,829:INFO:Preparing preprocessing pipeline...
2023-08-11 11:44:23,829:INFO:Set up simple imputation.
2023-08-11 11:44:23,840:INFO:Finished creating preprocessing pipeline.
2023-08-11 11:44:23,843:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ABC', 'nAcid', 'nSpiro',
                                             'nBridgehead', 'AATS0i', 'ATSC4c',
                                             'ATSC6c', 'GATS2d', 'PEOE_VSA13'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-11 11:44:23,843:INFO:Creating final display dataframe.
2023-08-11 11:44:23,883:INFO:Setup _display_container:                     Description             Value
0                    Session id                 4
1                        Target               pKi
2                   Target type        Regression
3           Original data shape         (316, 10)
4        Transformed data shape         (316, 10)
5   Transformed train set shape         (221, 10)
6    Transformed test set shape          (95, 10)
7              Numeric features                 9
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              339f
2023-08-11 11:44:23,976:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:23,978:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:24,067:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:24,069:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:24,069:INFO:setup() successfully completed in 1.4s...............
2023-08-11 11:44:24,088:INFO:Initializing compare_models()
2023-08-11 11:44:24,088:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 11:44:24,088:INFO:Checking exceptions
2023-08-11 11:44:24,089:INFO:Preparing display monitor
2023-08-11 11:44:24,114:INFO:Initializing Linear Regression
2023-08-11 11:44:24,114:INFO:Total runtime is 3.7670135498046877e-06 minutes
2023-08-11 11:44:24,117:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:24,117:INFO:Initializing create_model()
2023-08-11 11:44:24,117:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=lr, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:24,117:INFO:Checking exceptions
2023-08-11 11:44:24,117:INFO:Importing libraries
2023-08-11 11:44:24,117:INFO:Copying training dataset
2023-08-11 11:44:24,119:INFO:Defining folds
2023-08-11 11:44:24,119:INFO:Declaring metric variables
2023-08-11 11:44:24,122:INFO:Importing untrained model
2023-08-11 11:44:24,124:INFO:Linear Regression Imported successfully
2023-08-11 11:44:24,128:INFO:Starting cross validation
2023-08-11 11:44:24,128:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:24,365:INFO:Calculating mean and std
2023-08-11 11:44:24,365:INFO:Creating metrics dataframe
2023-08-11 11:44:24,400:INFO:Uploading results into container
2023-08-11 11:44:24,401:INFO:Uploading model into container now
2023-08-11 11:44:24,401:INFO:_master_model_container: 1
2023-08-11 11:44:24,401:INFO:_display_container: 2
2023-08-11 11:44:24,401:INFO:LinearRegression(n_jobs=-1)
2023-08-11 11:44:24,401:INFO:create_model() successfully completed......................................
2023-08-11 11:44:24,536:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:24,536:INFO:Creating metrics dataframe
2023-08-11 11:44:24,543:INFO:Initializing Lasso Regression
2023-08-11 11:44:24,543:INFO:Total runtime is 0.007157079378763835 minutes
2023-08-11 11:44:24,545:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:24,545:INFO:Initializing create_model()
2023-08-11 11:44:24,546:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=lasso, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:24,546:INFO:Checking exceptions
2023-08-11 11:44:24,546:INFO:Importing libraries
2023-08-11 11:44:24,546:INFO:Copying training dataset
2023-08-11 11:44:24,547:INFO:Defining folds
2023-08-11 11:44:24,547:INFO:Declaring metric variables
2023-08-11 11:44:24,549:INFO:Importing untrained model
2023-08-11 11:44:24,551:INFO:Lasso Regression Imported successfully
2023-08-11 11:44:24,555:INFO:Starting cross validation
2023-08-11 11:44:24,556:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:24,785:INFO:Calculating mean and std
2023-08-11 11:44:24,786:INFO:Creating metrics dataframe
2023-08-11 11:44:24,820:INFO:Uploading results into container
2023-08-11 11:44:24,821:INFO:Uploading model into container now
2023-08-11 11:44:24,821:INFO:_master_model_container: 2
2023-08-11 11:44:24,821:INFO:_display_container: 2
2023-08-11 11:44:24,821:INFO:Lasso(random_state=4)
2023-08-11 11:44:24,821:INFO:create_model() successfully completed......................................
2023-08-11 11:44:24,951:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:24,951:INFO:Creating metrics dataframe
2023-08-11 11:44:24,959:INFO:Initializing Ridge Regression
2023-08-11 11:44:24,959:INFO:Total runtime is 0.014077699184417725 minutes
2023-08-11 11:44:24,961:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:24,961:INFO:Initializing create_model()
2023-08-11 11:44:24,961:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=ridge, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:24,961:INFO:Checking exceptions
2023-08-11 11:44:24,961:INFO:Importing libraries
2023-08-11 11:44:24,961:INFO:Copying training dataset
2023-08-11 11:44:24,962:INFO:Defining folds
2023-08-11 11:44:24,962:INFO:Declaring metric variables
2023-08-11 11:44:24,964:INFO:Importing untrained model
2023-08-11 11:44:24,967:INFO:Ridge Regression Imported successfully
2023-08-11 11:44:24,971:INFO:Starting cross validation
2023-08-11 11:44:24,971:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:25,197:INFO:Calculating mean and std
2023-08-11 11:44:25,198:INFO:Creating metrics dataframe
2023-08-11 11:44:25,234:INFO:Uploading results into container
2023-08-11 11:44:25,234:INFO:Uploading model into container now
2023-08-11 11:44:25,234:INFO:_master_model_container: 3
2023-08-11 11:44:25,234:INFO:_display_container: 2
2023-08-11 11:44:25,234:INFO:Ridge(random_state=4)
2023-08-11 11:44:25,234:INFO:create_model() successfully completed......................................
2023-08-11 11:44:25,368:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:25,368:INFO:Creating metrics dataframe
2023-08-11 11:44:25,376:INFO:Initializing Elastic Net
2023-08-11 11:44:25,376:INFO:Total runtime is 0.021033199628194173 minutes
2023-08-11 11:44:25,378:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:25,378:INFO:Initializing create_model()
2023-08-11 11:44:25,378:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=en, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:25,378:INFO:Checking exceptions
2023-08-11 11:44:25,378:INFO:Importing libraries
2023-08-11 11:44:25,378:INFO:Copying training dataset
2023-08-11 11:44:25,381:INFO:Defining folds
2023-08-11 11:44:25,381:INFO:Declaring metric variables
2023-08-11 11:44:25,383:INFO:Importing untrained model
2023-08-11 11:44:25,385:INFO:Elastic Net Imported successfully
2023-08-11 11:44:25,389:INFO:Starting cross validation
2023-08-11 11:44:25,389:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:25,622:INFO:Calculating mean and std
2023-08-11 11:44:25,623:INFO:Creating metrics dataframe
2023-08-11 11:44:25,660:INFO:Uploading results into container
2023-08-11 11:44:25,660:INFO:Uploading model into container now
2023-08-11 11:44:25,660:INFO:_master_model_container: 4
2023-08-11 11:44:25,661:INFO:_display_container: 2
2023-08-11 11:44:25,661:INFO:ElasticNet(random_state=4)
2023-08-11 11:44:25,661:INFO:create_model() successfully completed......................................
2023-08-11 11:44:25,796:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:25,796:INFO:Creating metrics dataframe
2023-08-11 11:44:25,804:INFO:Initializing Least Angle Regression
2023-08-11 11:44:25,804:INFO:Total runtime is 0.028172298272450765 minutes
2023-08-11 11:44:25,806:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:25,806:INFO:Initializing create_model()
2023-08-11 11:44:25,807:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=lar, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:25,807:INFO:Checking exceptions
2023-08-11 11:44:25,807:INFO:Importing libraries
2023-08-11 11:44:25,807:INFO:Copying training dataset
2023-08-11 11:44:25,809:INFO:Defining folds
2023-08-11 11:44:25,809:INFO:Declaring metric variables
2023-08-11 11:44:25,811:INFO:Importing untrained model
2023-08-11 11:44:25,813:INFO:Least Angle Regression Imported successfully
2023-08-11 11:44:25,817:INFO:Starting cross validation
2023-08-11 11:44:25,818:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:25,851:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:25,855:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:25,867:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:25,872:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:25,875:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:25,904:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:25,905:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:25,908:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:25,910:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:25,926:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:26,054:INFO:Calculating mean and std
2023-08-11 11:44:26,055:INFO:Creating metrics dataframe
2023-08-11 11:44:26,091:INFO:Uploading results into container
2023-08-11 11:44:26,091:INFO:Uploading model into container now
2023-08-11 11:44:26,092:INFO:_master_model_container: 5
2023-08-11 11:44:26,092:INFO:_display_container: 2
2023-08-11 11:44:26,092:INFO:Lars(random_state=4)
2023-08-11 11:44:26,092:INFO:create_model() successfully completed......................................
2023-08-11 11:44:26,224:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:26,224:INFO:Creating metrics dataframe
2023-08-11 11:44:26,233:INFO:Initializing Lasso Least Angle Regression
2023-08-11 11:44:26,233:INFO:Total runtime is 0.03531323273976644 minutes
2023-08-11 11:44:26,235:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:26,235:INFO:Initializing create_model()
2023-08-11 11:44:26,235:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=llar, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:26,235:INFO:Checking exceptions
2023-08-11 11:44:26,235:INFO:Importing libraries
2023-08-11 11:44:26,235:INFO:Copying training dataset
2023-08-11 11:44:26,238:INFO:Defining folds
2023-08-11 11:44:26,238:INFO:Declaring metric variables
2023-08-11 11:44:26,240:INFO:Importing untrained model
2023-08-11 11:44:26,242:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 11:44:26,247:INFO:Starting cross validation
2023-08-11 11:44:26,248:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:26,282:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:26,286:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:26,291:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:26,312:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:26,319:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:26,322:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:26,339:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:26,344:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:26,348:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:26,352:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:26,478:INFO:Calculating mean and std
2023-08-11 11:44:26,479:INFO:Creating metrics dataframe
2023-08-11 11:44:26,515:INFO:Uploading results into container
2023-08-11 11:44:26,515:INFO:Uploading model into container now
2023-08-11 11:44:26,515:INFO:_master_model_container: 6
2023-08-11 11:44:26,516:INFO:_display_container: 2
2023-08-11 11:44:26,516:INFO:LassoLars(random_state=4)
2023-08-11 11:44:26,516:INFO:create_model() successfully completed......................................
2023-08-11 11:44:26,645:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:26,646:INFO:Creating metrics dataframe
2023-08-11 11:44:26,654:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 11:44:26,654:INFO:Total runtime is 0.042336765925089524 minutes
2023-08-11 11:44:26,656:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:26,656:INFO:Initializing create_model()
2023-08-11 11:44:26,656:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=omp, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:26,656:INFO:Checking exceptions
2023-08-11 11:44:26,656:INFO:Importing libraries
2023-08-11 11:44:26,656:INFO:Copying training dataset
2023-08-11 11:44:26,659:INFO:Defining folds
2023-08-11 11:44:26,659:INFO:Declaring metric variables
2023-08-11 11:44:26,661:INFO:Importing untrained model
2023-08-11 11:44:26,663:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 11:44:26,667:INFO:Starting cross validation
2023-08-11 11:44:26,668:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:26,698:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:26,702:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:26,707:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:26,717:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:26,733:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:26,741:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:26,752:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:26,755:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:26,774:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:26,779:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:26,892:INFO:Calculating mean and std
2023-08-11 11:44:26,893:INFO:Creating metrics dataframe
2023-08-11 11:44:26,929:INFO:Uploading results into container
2023-08-11 11:44:26,929:INFO:Uploading model into container now
2023-08-11 11:44:26,930:INFO:_master_model_container: 7
2023-08-11 11:44:26,930:INFO:_display_container: 2
2023-08-11 11:44:26,930:INFO:OrthogonalMatchingPursuit()
2023-08-11 11:44:26,930:INFO:create_model() successfully completed......................................
2023-08-11 11:44:27,059:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:27,059:INFO:Creating metrics dataframe
2023-08-11 11:44:27,068:INFO:Initializing Bayesian Ridge
2023-08-11 11:44:27,068:INFO:Total runtime is 0.049230166276295985 minutes
2023-08-11 11:44:27,070:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:27,070:INFO:Initializing create_model()
2023-08-11 11:44:27,070:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=br, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:27,070:INFO:Checking exceptions
2023-08-11 11:44:27,070:INFO:Importing libraries
2023-08-11 11:44:27,070:INFO:Copying training dataset
2023-08-11 11:44:27,073:INFO:Defining folds
2023-08-11 11:44:27,073:INFO:Declaring metric variables
2023-08-11 11:44:27,075:INFO:Importing untrained model
2023-08-11 11:44:27,077:INFO:Bayesian Ridge Imported successfully
2023-08-11 11:44:27,081:INFO:Starting cross validation
2023-08-11 11:44:27,082:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:27,312:INFO:Calculating mean and std
2023-08-11 11:44:27,313:INFO:Creating metrics dataframe
2023-08-11 11:44:27,349:INFO:Uploading results into container
2023-08-11 11:44:27,350:INFO:Uploading model into container now
2023-08-11 11:44:27,350:INFO:_master_model_container: 8
2023-08-11 11:44:27,350:INFO:_display_container: 2
2023-08-11 11:44:27,350:INFO:BayesianRidge()
2023-08-11 11:44:27,350:INFO:create_model() successfully completed......................................
2023-08-11 11:44:27,480:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:27,480:INFO:Creating metrics dataframe
2023-08-11 11:44:27,489:INFO:Initializing Passive Aggressive Regressor
2023-08-11 11:44:27,489:INFO:Total runtime is 0.05625356833140056 minutes
2023-08-11 11:44:27,491:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:27,491:INFO:Initializing create_model()
2023-08-11 11:44:27,491:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=par, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:27,491:INFO:Checking exceptions
2023-08-11 11:44:27,491:INFO:Importing libraries
2023-08-11 11:44:27,491:INFO:Copying training dataset
2023-08-11 11:44:27,494:INFO:Defining folds
2023-08-11 11:44:27,494:INFO:Declaring metric variables
2023-08-11 11:44:27,496:INFO:Importing untrained model
2023-08-11 11:44:27,498:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 11:44:27,502:INFO:Starting cross validation
2023-08-11 11:44:27,503:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:27,736:INFO:Calculating mean and std
2023-08-11 11:44:27,737:INFO:Creating metrics dataframe
2023-08-11 11:44:27,773:INFO:Uploading results into container
2023-08-11 11:44:27,773:INFO:Uploading model into container now
2023-08-11 11:44:27,773:INFO:_master_model_container: 9
2023-08-11 11:44:27,773:INFO:_display_container: 2
2023-08-11 11:44:27,774:INFO:PassiveAggressiveRegressor(random_state=4)
2023-08-11 11:44:27,774:INFO:create_model() successfully completed......................................
2023-08-11 11:44:27,904:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:27,904:INFO:Creating metrics dataframe
2023-08-11 11:44:27,913:INFO:Initializing Huber Regressor
2023-08-11 11:44:27,913:INFO:Total runtime is 0.06331188281377156 minutes
2023-08-11 11:44:27,915:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:27,915:INFO:Initializing create_model()
2023-08-11 11:44:27,915:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=huber, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:27,915:INFO:Checking exceptions
2023-08-11 11:44:27,915:INFO:Importing libraries
2023-08-11 11:44:27,915:INFO:Copying training dataset
2023-08-11 11:44:27,917:INFO:Defining folds
2023-08-11 11:44:27,917:INFO:Declaring metric variables
2023-08-11 11:44:27,920:INFO:Importing untrained model
2023-08-11 11:44:27,922:INFO:Huber Regressor Imported successfully
2023-08-11 11:44:27,926:INFO:Starting cross validation
2023-08-11 11:44:27,926:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:28,153:INFO:Calculating mean and std
2023-08-11 11:44:28,154:INFO:Creating metrics dataframe
2023-08-11 11:44:28,190:INFO:Uploading results into container
2023-08-11 11:44:28,191:INFO:Uploading model into container now
2023-08-11 11:44:28,191:INFO:_master_model_container: 10
2023-08-11 11:44:28,191:INFO:_display_container: 2
2023-08-11 11:44:28,191:INFO:HuberRegressor()
2023-08-11 11:44:28,191:INFO:create_model() successfully completed......................................
2023-08-11 11:44:28,321:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:28,321:INFO:Creating metrics dataframe
2023-08-11 11:44:28,330:INFO:Initializing K Neighbors Regressor
2023-08-11 11:44:28,330:INFO:Total runtime is 0.0702698826789856 minutes
2023-08-11 11:44:28,332:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:28,332:INFO:Initializing create_model()
2023-08-11 11:44:28,332:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=knn, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:28,332:INFO:Checking exceptions
2023-08-11 11:44:28,332:INFO:Importing libraries
2023-08-11 11:44:28,332:INFO:Copying training dataset
2023-08-11 11:44:28,335:INFO:Defining folds
2023-08-11 11:44:28,335:INFO:Declaring metric variables
2023-08-11 11:44:28,337:INFO:Importing untrained model
2023-08-11 11:44:28,339:INFO:K Neighbors Regressor Imported successfully
2023-08-11 11:44:28,343:INFO:Starting cross validation
2023-08-11 11:44:28,344:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:28,678:INFO:Calculating mean and std
2023-08-11 11:44:28,680:INFO:Creating metrics dataframe
2023-08-11 11:44:28,716:INFO:Uploading results into container
2023-08-11 11:44:28,716:INFO:Uploading model into container now
2023-08-11 11:44:28,716:INFO:_master_model_container: 11
2023-08-11 11:44:28,716:INFO:_display_container: 2
2023-08-11 11:44:28,716:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 11:44:28,716:INFO:create_model() successfully completed......................................
2023-08-11 11:44:28,846:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:28,846:INFO:Creating metrics dataframe
2023-08-11 11:44:28,856:INFO:Initializing Decision Tree Regressor
2023-08-11 11:44:28,856:INFO:Total runtime is 0.0790282130241394 minutes
2023-08-11 11:44:28,858:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:28,858:INFO:Initializing create_model()
2023-08-11 11:44:28,858:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=dt, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:28,858:INFO:Checking exceptions
2023-08-11 11:44:28,858:INFO:Importing libraries
2023-08-11 11:44:28,858:INFO:Copying training dataset
2023-08-11 11:44:28,860:INFO:Defining folds
2023-08-11 11:44:28,860:INFO:Declaring metric variables
2023-08-11 11:44:28,863:INFO:Importing untrained model
2023-08-11 11:44:28,865:INFO:Decision Tree Regressor Imported successfully
2023-08-11 11:44:28,869:INFO:Starting cross validation
2023-08-11 11:44:28,870:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:29,106:INFO:Calculating mean and std
2023-08-11 11:44:29,107:INFO:Creating metrics dataframe
2023-08-11 11:44:29,143:INFO:Uploading results into container
2023-08-11 11:44:29,143:INFO:Uploading model into container now
2023-08-11 11:44:29,143:INFO:_master_model_container: 12
2023-08-11 11:44:29,143:INFO:_display_container: 2
2023-08-11 11:44:29,144:INFO:DecisionTreeRegressor(random_state=4)
2023-08-11 11:44:29,144:INFO:create_model() successfully completed......................................
2023-08-11 11:44:29,273:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:29,273:INFO:Creating metrics dataframe
2023-08-11 11:44:29,283:INFO:Initializing Random Forest Regressor
2023-08-11 11:44:29,283:INFO:Total runtime is 0.08614758253097533 minutes
2023-08-11 11:44:29,285:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:29,285:INFO:Initializing create_model()
2023-08-11 11:44:29,285:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=rf, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:29,285:INFO:Checking exceptions
2023-08-11 11:44:29,285:INFO:Importing libraries
2023-08-11 11:44:29,285:INFO:Copying training dataset
2023-08-11 11:44:29,288:INFO:Defining folds
2023-08-11 11:44:29,288:INFO:Declaring metric variables
2023-08-11 11:44:29,290:INFO:Importing untrained model
2023-08-11 11:44:29,292:INFO:Random Forest Regressor Imported successfully
2023-08-11 11:44:29,296:INFO:Starting cross validation
2023-08-11 11:44:29,296:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:30,212:INFO:Calculating mean and std
2023-08-11 11:44:30,213:INFO:Creating metrics dataframe
2023-08-11 11:44:30,253:INFO:Uploading results into container
2023-08-11 11:44:30,253:INFO:Uploading model into container now
2023-08-11 11:44:30,253:INFO:_master_model_container: 13
2023-08-11 11:44:30,253:INFO:_display_container: 2
2023-08-11 11:44:30,254:INFO:RandomForestRegressor(n_jobs=-1, random_state=4)
2023-08-11 11:44:30,254:INFO:create_model() successfully completed......................................
2023-08-11 11:44:30,387:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:30,387:INFO:Creating metrics dataframe
2023-08-11 11:44:30,397:INFO:Initializing Extra Trees Regressor
2023-08-11 11:44:30,397:INFO:Total runtime is 0.10471161603927612 minutes
2023-08-11 11:44:30,399:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:30,399:INFO:Initializing create_model()
2023-08-11 11:44:30,399:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=et, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:30,399:INFO:Checking exceptions
2023-08-11 11:44:30,399:INFO:Importing libraries
2023-08-11 11:44:30,399:INFO:Copying training dataset
2023-08-11 11:44:30,401:INFO:Defining folds
2023-08-11 11:44:30,401:INFO:Declaring metric variables
2023-08-11 11:44:30,404:INFO:Importing untrained model
2023-08-11 11:44:30,406:INFO:Extra Trees Regressor Imported successfully
2023-08-11 11:44:30,411:INFO:Starting cross validation
2023-08-11 11:44:30,412:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:31,304:INFO:Calculating mean and std
2023-08-11 11:44:31,306:INFO:Creating metrics dataframe
2023-08-11 11:44:31,348:INFO:Uploading results into container
2023-08-11 11:44:31,348:INFO:Uploading model into container now
2023-08-11 11:44:31,348:INFO:_master_model_container: 14
2023-08-11 11:44:31,348:INFO:_display_container: 2
2023-08-11 11:44:31,348:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2023-08-11 11:44:31,349:INFO:create_model() successfully completed......................................
2023-08-11 11:44:31,480:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:31,480:INFO:Creating metrics dataframe
2023-08-11 11:44:31,490:INFO:Initializing AdaBoost Regressor
2023-08-11 11:44:31,490:INFO:Total runtime is 0.12293481826782227 minutes
2023-08-11 11:44:31,492:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:31,493:INFO:Initializing create_model()
2023-08-11 11:44:31,493:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=ada, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:31,493:INFO:Checking exceptions
2023-08-11 11:44:31,493:INFO:Importing libraries
2023-08-11 11:44:31,493:INFO:Copying training dataset
2023-08-11 11:44:31,495:INFO:Defining folds
2023-08-11 11:44:31,495:INFO:Declaring metric variables
2023-08-11 11:44:31,498:INFO:Importing untrained model
2023-08-11 11:44:31,500:INFO:AdaBoost Regressor Imported successfully
2023-08-11 11:44:31,503:INFO:Starting cross validation
2023-08-11 11:44:31,504:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:31,829:INFO:Calculating mean and std
2023-08-11 11:44:31,831:INFO:Creating metrics dataframe
2023-08-11 11:44:31,870:INFO:Uploading results into container
2023-08-11 11:44:31,870:INFO:Uploading model into container now
2023-08-11 11:44:31,871:INFO:_master_model_container: 15
2023-08-11 11:44:31,871:INFO:_display_container: 2
2023-08-11 11:44:31,871:INFO:AdaBoostRegressor(random_state=4)
2023-08-11 11:44:31,871:INFO:create_model() successfully completed......................................
2023-08-11 11:44:32,002:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:32,002:INFO:Creating metrics dataframe
2023-08-11 11:44:32,012:INFO:Initializing Gradient Boosting Regressor
2023-08-11 11:44:32,012:INFO:Total runtime is 0.13163588047027588 minutes
2023-08-11 11:44:32,014:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:32,014:INFO:Initializing create_model()
2023-08-11 11:44:32,014:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=gbr, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:32,014:INFO:Checking exceptions
2023-08-11 11:44:32,014:INFO:Importing libraries
2023-08-11 11:44:32,014:INFO:Copying training dataset
2023-08-11 11:44:32,017:INFO:Defining folds
2023-08-11 11:44:32,017:INFO:Declaring metric variables
2023-08-11 11:44:32,019:INFO:Importing untrained model
2023-08-11 11:44:32,022:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 11:44:32,026:INFO:Starting cross validation
2023-08-11 11:44:32,026:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:32,350:INFO:Calculating mean and std
2023-08-11 11:44:32,351:INFO:Creating metrics dataframe
2023-08-11 11:44:32,391:INFO:Uploading results into container
2023-08-11 11:44:32,391:INFO:Uploading model into container now
2023-08-11 11:44:32,392:INFO:_master_model_container: 16
2023-08-11 11:44:32,392:INFO:_display_container: 2
2023-08-11 11:44:32,392:INFO:GradientBoostingRegressor(random_state=4)
2023-08-11 11:44:32,392:INFO:create_model() successfully completed......................................
2023-08-11 11:44:32,523:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:32,523:INFO:Creating metrics dataframe
2023-08-11 11:44:32,533:INFO:Initializing Extreme Gradient Boosting
2023-08-11 11:44:32,533:INFO:Total runtime is 0.1403199315071106 minutes
2023-08-11 11:44:32,535:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:32,535:INFO:Initializing create_model()
2023-08-11 11:44:32,535:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=xgboost, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:32,535:INFO:Checking exceptions
2023-08-11 11:44:32,535:INFO:Importing libraries
2023-08-11 11:44:32,535:INFO:Copying training dataset
2023-08-11 11:44:32,538:INFO:Defining folds
2023-08-11 11:44:32,538:INFO:Declaring metric variables
2023-08-11 11:44:32,540:INFO:Importing untrained model
2023-08-11 11:44:32,542:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 11:44:32,547:INFO:Starting cross validation
2023-08-11 11:44:32,548:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:32,844:INFO:Calculating mean and std
2023-08-11 11:44:32,845:INFO:Creating metrics dataframe
2023-08-11 11:44:32,886:INFO:Uploading results into container
2023-08-11 11:44:32,886:INFO:Uploading model into container now
2023-08-11 11:44:32,886:INFO:_master_model_container: 17
2023-08-11 11:44:32,886:INFO:_display_container: 2
2023-08-11 11:44:32,887:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=4,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 11:44:32,887:INFO:create_model() successfully completed......................................
2023-08-11 11:44:33,022:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:33,022:INFO:Creating metrics dataframe
2023-08-11 11:44:33,033:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 11:44:33,033:INFO:Total runtime is 0.1486490845680237 minutes
2023-08-11 11:44:33,035:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:33,035:INFO:Initializing create_model()
2023-08-11 11:44:33,035:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:33,035:INFO:Checking exceptions
2023-08-11 11:44:33,035:INFO:Importing libraries
2023-08-11 11:44:33,035:INFO:Copying training dataset
2023-08-11 11:44:33,038:INFO:Defining folds
2023-08-11 11:44:33,038:INFO:Declaring metric variables
2023-08-11 11:44:33,040:INFO:Importing untrained model
2023-08-11 11:44:33,043:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 11:44:33,048:INFO:Starting cross validation
2023-08-11 11:44:33,048:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:33,308:INFO:Calculating mean and std
2023-08-11 11:44:33,309:INFO:Creating metrics dataframe
2023-08-11 11:44:33,349:INFO:Uploading results into container
2023-08-11 11:44:33,349:INFO:Uploading model into container now
2023-08-11 11:44:33,349:INFO:_master_model_container: 18
2023-08-11 11:44:33,349:INFO:_display_container: 2
2023-08-11 11:44:33,350:INFO:LGBMRegressor(random_state=4)
2023-08-11 11:44:33,350:INFO:create_model() successfully completed......................................
2023-08-11 11:44:33,487:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:33,487:INFO:Creating metrics dataframe
2023-08-11 11:44:33,498:INFO:Initializing CatBoost Regressor
2023-08-11 11:44:33,498:INFO:Total runtime is 0.15640290180842084 minutes
2023-08-11 11:44:33,500:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:33,500:INFO:Initializing create_model()
2023-08-11 11:44:33,500:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=catboost, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:33,500:INFO:Checking exceptions
2023-08-11 11:44:33,500:INFO:Importing libraries
2023-08-11 11:44:33,500:INFO:Copying training dataset
2023-08-11 11:44:33,503:INFO:Defining folds
2023-08-11 11:44:33,503:INFO:Declaring metric variables
2023-08-11 11:44:33,505:INFO:Importing untrained model
2023-08-11 11:44:33,507:INFO:CatBoost Regressor Imported successfully
2023-08-11 11:44:33,511:INFO:Starting cross validation
2023-08-11 11:44:33,512:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:35,442:INFO:Calculating mean and std
2023-08-11 11:44:35,444:INFO:Creating metrics dataframe
2023-08-11 11:44:35,486:INFO:Uploading results into container
2023-08-11 11:44:35,486:INFO:Uploading model into container now
2023-08-11 11:44:35,486:INFO:_master_model_container: 19
2023-08-11 11:44:35,486:INFO:_display_container: 2
2023-08-11 11:44:35,486:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d11e4ac50>
2023-08-11 11:44:35,487:INFO:create_model() successfully completed......................................
2023-08-11 11:44:35,618:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:35,618:INFO:Creating metrics dataframe
2023-08-11 11:44:35,628:INFO:Initializing Dummy Regressor
2023-08-11 11:44:35,628:INFO:Total runtime is 0.1919075131416321 minutes
2023-08-11 11:44:35,630:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:35,631:INFO:Initializing create_model()
2023-08-11 11:44:35,631:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=dummy, fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43ddced0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:35,631:INFO:Checking exceptions
2023-08-11 11:44:35,631:INFO:Importing libraries
2023-08-11 11:44:35,631:INFO:Copying training dataset
2023-08-11 11:44:35,633:INFO:Defining folds
2023-08-11 11:44:35,633:INFO:Declaring metric variables
2023-08-11 11:44:35,635:INFO:Importing untrained model
2023-08-11 11:44:35,638:INFO:Dummy Regressor Imported successfully
2023-08-11 11:44:35,642:INFO:Starting cross validation
2023-08-11 11:44:35,642:INFO:Cross validating with KFold(n_splits=10, random_state=4, shuffle=True), n_jobs=-1
2023-08-11 11:44:35,896:INFO:Calculating mean and std
2023-08-11 11:44:35,897:INFO:Creating metrics dataframe
2023-08-11 11:44:35,941:INFO:Uploading results into container
2023-08-11 11:44:35,941:INFO:Uploading model into container now
2023-08-11 11:44:35,942:INFO:_master_model_container: 20
2023-08-11 11:44:35,942:INFO:_display_container: 2
2023-08-11 11:44:35,942:INFO:DummyRegressor()
2023-08-11 11:44:35,942:INFO:create_model() successfully completed......................................
2023-08-11 11:44:36,072:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:36,072:INFO:Creating metrics dataframe
2023-08-11 11:44:36,089:INFO:Initializing create_model()
2023-08-11 11:44:36,089:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21fc9510>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=4), fold=KFold(n_splits=10, random_state=4, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:36,089:INFO:Checking exceptions
2023-08-11 11:44:36,090:INFO:Importing libraries
2023-08-11 11:44:36,090:INFO:Copying training dataset
2023-08-11 11:44:36,092:INFO:Defining folds
2023-08-11 11:44:36,092:INFO:Declaring metric variables
2023-08-11 11:44:36,092:INFO:Importing untrained model
2023-08-11 11:44:36,092:INFO:Declaring custom model
2023-08-11 11:44:36,092:INFO:Extra Trees Regressor Imported successfully
2023-08-11 11:44:36,093:INFO:Cross validation set to False
2023-08-11 11:44:36,093:INFO:Fitting Model
2023-08-11 11:44:36,311:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2023-08-11 11:44:36,312:INFO:create_model() successfully completed......................................
2023-08-11 11:44:36,469:INFO:_master_model_container: 20
2023-08-11 11:44:36,469:INFO:_display_container: 2
2023-08-11 11:44:36,470:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=4)
2023-08-11 11:44:36,470:INFO:compare_models() successfully completed......................................
2023-08-11 11:44:44,283:INFO:PyCaret RegressionExperiment
2023-08-11 11:44:44,283:INFO:Logging name: reg-default-name
2023-08-11 11:44:44,283:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 11:44:44,283:INFO:version 3.0.2
2023-08-11 11:44:44,283:INFO:Initializing setup()
2023-08-11 11:44:44,283:INFO:self.USI: 9602
2023-08-11 11:44:44,283:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 11:44:44,283:INFO:Checking environment
2023-08-11 11:44:44,283:INFO:python_version: 3.7.13
2023-08-11 11:44:44,283:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 11:44:44,283:INFO:machine: x86_64
2023-08-11 11:44:44,283:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 11:44:44,283:INFO:Memory: svmem(total=17179869184, available=1286705152, percent=92.5, used=1728655360, free=13918208, active=1275187200, inactive=1263943680, wired=453468160)
2023-08-11 11:44:44,284:INFO:Physical Core: 8
2023-08-11 11:44:44,284:INFO:Logical Core: 8
2023-08-11 11:44:44,284:INFO:Checking libraries
2023-08-11 11:44:44,284:INFO:System:
2023-08-11 11:44:44,284:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 11:44:44,284:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 11:44:44,284:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 11:44:44,284:INFO:PyCaret required dependencies:
2023-08-11 11:44:44,284:INFO:                 pip: 22.3.1
2023-08-11 11:44:44,284:INFO:          setuptools: 63.4.1
2023-08-11 11:44:44,284:INFO:             pycaret: 3.0.2
2023-08-11 11:44:44,284:INFO:             IPython: 7.33.0
2023-08-11 11:44:44,284:INFO:          ipywidgets: 8.0.2
2023-08-11 11:44:44,284:INFO:                tqdm: 4.64.1
2023-08-11 11:44:44,284:INFO:               numpy: 1.21.5
2023-08-11 11:44:44,284:INFO:              pandas: 1.3.5
2023-08-11 11:44:44,284:INFO:              jinja2: 3.1.2
2023-08-11 11:44:44,284:INFO:               scipy: 1.7.3
2023-08-11 11:44:44,284:INFO:              joblib: 1.2.0
2023-08-11 11:44:44,284:INFO:             sklearn: 1.0.2
2023-08-11 11:44:44,284:INFO:                pyod: 1.0.9
2023-08-11 11:44:44,284:INFO:            imblearn: 0.10.1
2023-08-11 11:44:44,284:INFO:   category_encoders: 2.6.1
2023-08-11 11:44:44,284:INFO:            lightgbm: 3.3.2
2023-08-11 11:44:44,284:INFO:               numba: 0.56.2
2023-08-11 11:44:44,284:INFO:            requests: 2.28.1
2023-08-11 11:44:44,284:INFO:          matplotlib: 3.5.3
2023-08-11 11:44:44,284:INFO:          scikitplot: 0.3.7
2023-08-11 11:44:44,284:INFO:         yellowbrick: 1.5
2023-08-11 11:44:44,285:INFO:              plotly: 5.13.0
2023-08-11 11:44:44,285:INFO:             kaleido: 0.2.1
2023-08-11 11:44:44,285:INFO:         statsmodels: 0.13.2
2023-08-11 11:44:44,285:INFO:              sktime: 0.17.0
2023-08-11 11:44:44,285:INFO:               tbats: 1.1.3
2023-08-11 11:44:44,285:INFO:            pmdarima: 2.0.3
2023-08-11 11:44:44,285:INFO:              psutil: 5.9.2
2023-08-11 11:44:44,285:INFO:PyCaret optional dependencies:
2023-08-11 11:44:44,285:INFO:                shap: Not installed
2023-08-11 11:44:44,285:INFO:           interpret: Not installed
2023-08-11 11:44:44,285:INFO:                umap: 0.5.3
2023-08-11 11:44:44,285:INFO:    pandas_profiling: 3.0.0
2023-08-11 11:44:44,285:INFO:  explainerdashboard: Not installed
2023-08-11 11:44:44,285:INFO:             autoviz: Not installed
2023-08-11 11:44:44,285:INFO:           fairlearn: Not installed
2023-08-11 11:44:44,285:INFO:             xgboost: 1.6.2
2023-08-11 11:44:44,285:INFO:            catboost: 1.0.4
2023-08-11 11:44:44,285:INFO:              kmodes: 0.12.2
2023-08-11 11:44:44,285:INFO:             mlxtend: 0.19.0
2023-08-11 11:44:44,285:INFO:       statsforecast: Not installed
2023-08-11 11:44:44,285:INFO:        tune_sklearn: Not installed
2023-08-11 11:44:44,285:INFO:                 ray: Not installed
2023-08-11 11:44:44,285:INFO:            hyperopt: Not installed
2023-08-11 11:44:44,285:INFO:              optuna: Not installed
2023-08-11 11:44:44,285:INFO:               skopt: Not installed
2023-08-11 11:44:44,285:INFO:              mlflow: 1.29.0
2023-08-11 11:44:44,285:INFO:              gradio: Not installed
2023-08-11 11:44:44,285:INFO:             fastapi: Not installed
2023-08-11 11:44:44,286:INFO:             uvicorn: Not installed
2023-08-11 11:44:44,286:INFO:              m2cgen: Not installed
2023-08-11 11:44:44,286:INFO:           evidently: Not installed
2023-08-11 11:44:44,286:INFO:               fugue: Not installed
2023-08-11 11:44:44,286:INFO:           streamlit: 1.13.0
2023-08-11 11:44:44,286:INFO:             prophet: Not installed
2023-08-11 11:44:44,286:INFO:None
2023-08-11 11:44:44,286:INFO:Set up data.
2023-08-11 11:44:44,290:INFO:Set up train/test split.
2023-08-11 11:44:44,293:INFO:Set up index.
2023-08-11 11:44:44,293:INFO:Set up folding strategy.
2023-08-11 11:44:44,293:INFO:Assigning column types.
2023-08-11 11:44:44,297:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 11:44:44,297:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,302:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,307:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,354:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,390:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,390:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:44,393:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:44,393:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,397:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,400:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,444:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,497:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,497:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:44,499:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:44,500:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 11:44:44,503:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,507:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,552:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,588:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,588:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:44,590:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:44,594:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,598:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,644:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,680:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,681:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:44,683:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:44,683:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 11:44:44,691:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,736:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,773:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,774:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:44,776:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:44,783:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,827:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,868:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,869:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:44,871:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:44,871:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 11:44:44,923:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,959:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:44:44,959:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:44,961:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:45,013:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:45,048:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 11:44:45,048:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:45,050:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:45,050:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 11:44:45,102:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:45,137:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:45,139:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:45,191:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 11:44:45,227:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:45,229:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:45,229:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 11:44:45,316:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:45,318:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:45,409:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:45,411:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:45,411:INFO:Preparing preprocessing pipeline...
2023-08-11 11:44:45,411:INFO:Set up simple imputation.
2023-08-11 11:44:45,422:INFO:Finished creating preprocessing pipeline.
2023-08-11 11:44:45,424:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ABC', 'nAcid', 'nSpiro',
                                             'nBridgehead', 'AATS0i', 'ATSC4c',
                                             'ATSC6c', 'GATS2d', 'PEOE_VSA13'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-11 11:44:45,424:INFO:Creating final display dataframe.
2023-08-11 11:44:45,465:INFO:Setup _display_container:                     Description             Value
0                    Session id               555
1                        Target               pKi
2                   Target type        Regression
3           Original data shape         (316, 10)
4        Transformed data shape         (316, 10)
5   Transformed train set shape         (221, 10)
6    Transformed test set shape          (95, 10)
7              Numeric features                 9
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              9602
2023-08-11 11:44:45,559:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:45,561:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:45,651:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 11:44:45,653:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 11:44:45,653:INFO:setup() successfully completed in 1.42s...............
2023-08-11 11:44:45,675:INFO:Initializing compare_models()
2023-08-11 11:44:45,675:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 11:44:45,675:INFO:Checking exceptions
2023-08-11 11:44:45,677:INFO:Preparing display monitor
2023-08-11 11:44:45,701:INFO:Initializing Linear Regression
2023-08-11 11:44:45,701:INFO:Total runtime is 4.518032073974609e-06 minutes
2023-08-11 11:44:45,703:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:45,703:INFO:Initializing create_model()
2023-08-11 11:44:45,703:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=lr, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:45,704:INFO:Checking exceptions
2023-08-11 11:44:45,704:INFO:Importing libraries
2023-08-11 11:44:45,704:INFO:Copying training dataset
2023-08-11 11:44:45,706:INFO:Defining folds
2023-08-11 11:44:45,706:INFO:Declaring metric variables
2023-08-11 11:44:45,708:INFO:Importing untrained model
2023-08-11 11:44:45,710:INFO:Linear Regression Imported successfully
2023-08-11 11:44:45,714:INFO:Starting cross validation
2023-08-11 11:44:45,715:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:45,986:INFO:Calculating mean and std
2023-08-11 11:44:45,987:INFO:Creating metrics dataframe
2023-08-11 11:44:46,027:INFO:Uploading results into container
2023-08-11 11:44:46,027:INFO:Uploading model into container now
2023-08-11 11:44:46,028:INFO:_master_model_container: 1
2023-08-11 11:44:46,028:INFO:_display_container: 2
2023-08-11 11:44:46,028:INFO:LinearRegression(n_jobs=-1)
2023-08-11 11:44:46,028:INFO:create_model() successfully completed......................................
2023-08-11 11:44:46,162:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:46,162:INFO:Creating metrics dataframe
2023-08-11 11:44:46,169:INFO:Initializing Lasso Regression
2023-08-11 11:44:46,169:INFO:Total runtime is 0.0078098018964131675 minutes
2023-08-11 11:44:46,171:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:46,171:INFO:Initializing create_model()
2023-08-11 11:44:46,171:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=lasso, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:46,171:INFO:Checking exceptions
2023-08-11 11:44:46,172:INFO:Importing libraries
2023-08-11 11:44:46,172:INFO:Copying training dataset
2023-08-11 11:44:46,173:INFO:Defining folds
2023-08-11 11:44:46,173:INFO:Declaring metric variables
2023-08-11 11:44:46,175:INFO:Importing untrained model
2023-08-11 11:44:46,177:INFO:Lasso Regression Imported successfully
2023-08-11 11:44:46,181:INFO:Starting cross validation
2023-08-11 11:44:46,181:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:46,444:INFO:Calculating mean and std
2023-08-11 11:44:46,444:INFO:Creating metrics dataframe
2023-08-11 11:44:46,485:INFO:Uploading results into container
2023-08-11 11:44:46,485:INFO:Uploading model into container now
2023-08-11 11:44:46,485:INFO:_master_model_container: 2
2023-08-11 11:44:46,485:INFO:_display_container: 2
2023-08-11 11:44:46,485:INFO:Lasso(random_state=555)
2023-08-11 11:44:46,485:INFO:create_model() successfully completed......................................
2023-08-11 11:44:46,618:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:46,618:INFO:Creating metrics dataframe
2023-08-11 11:44:46,626:INFO:Initializing Ridge Regression
2023-08-11 11:44:46,626:INFO:Total runtime is 0.015421617031097411 minutes
2023-08-11 11:44:46,628:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:46,628:INFO:Initializing create_model()
2023-08-11 11:44:46,628:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=ridge, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:46,628:INFO:Checking exceptions
2023-08-11 11:44:46,628:INFO:Importing libraries
2023-08-11 11:44:46,628:INFO:Copying training dataset
2023-08-11 11:44:46,630:INFO:Defining folds
2023-08-11 11:44:46,630:INFO:Declaring metric variables
2023-08-11 11:44:46,632:INFO:Importing untrained model
2023-08-11 11:44:46,634:INFO:Ridge Regression Imported successfully
2023-08-11 11:44:46,638:INFO:Starting cross validation
2023-08-11 11:44:46,639:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:46,893:INFO:Calculating mean and std
2023-08-11 11:44:46,894:INFO:Creating metrics dataframe
2023-08-11 11:44:46,936:INFO:Uploading results into container
2023-08-11 11:44:46,936:INFO:Uploading model into container now
2023-08-11 11:44:46,937:INFO:_master_model_container: 3
2023-08-11 11:44:46,937:INFO:_display_container: 2
2023-08-11 11:44:46,937:INFO:Ridge(random_state=555)
2023-08-11 11:44:46,937:INFO:create_model() successfully completed......................................
2023-08-11 11:44:47,069:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:47,070:INFO:Creating metrics dataframe
2023-08-11 11:44:47,078:INFO:Initializing Elastic Net
2023-08-11 11:44:47,078:INFO:Total runtime is 0.022951765855153402 minutes
2023-08-11 11:44:47,080:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:47,080:INFO:Initializing create_model()
2023-08-11 11:44:47,080:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=en, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:47,080:INFO:Checking exceptions
2023-08-11 11:44:47,080:INFO:Importing libraries
2023-08-11 11:44:47,080:INFO:Copying training dataset
2023-08-11 11:44:47,083:INFO:Defining folds
2023-08-11 11:44:47,083:INFO:Declaring metric variables
2023-08-11 11:44:47,085:INFO:Importing untrained model
2023-08-11 11:44:47,087:INFO:Elastic Net Imported successfully
2023-08-11 11:44:47,091:INFO:Starting cross validation
2023-08-11 11:44:47,092:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:47,351:INFO:Calculating mean and std
2023-08-11 11:44:47,353:INFO:Creating metrics dataframe
2023-08-11 11:44:47,394:INFO:Uploading results into container
2023-08-11 11:44:47,395:INFO:Uploading model into container now
2023-08-11 11:44:47,395:INFO:_master_model_container: 4
2023-08-11 11:44:47,395:INFO:_display_container: 2
2023-08-11 11:44:47,395:INFO:ElasticNet(random_state=555)
2023-08-11 11:44:47,395:INFO:create_model() successfully completed......................................
2023-08-11 11:44:47,526:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:47,526:INFO:Creating metrics dataframe
2023-08-11 11:44:47,535:INFO:Initializing Least Angle Regression
2023-08-11 11:44:47,535:INFO:Total runtime is 0.030570451418558756 minutes
2023-08-11 11:44:47,537:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:47,537:INFO:Initializing create_model()
2023-08-11 11:44:47,537:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=lar, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:47,537:INFO:Checking exceptions
2023-08-11 11:44:47,537:INFO:Importing libraries
2023-08-11 11:44:47,537:INFO:Copying training dataset
2023-08-11 11:44:47,540:INFO:Defining folds
2023-08-11 11:44:47,540:INFO:Declaring metric variables
2023-08-11 11:44:47,542:INFO:Importing untrained model
2023-08-11 11:44:47,544:INFO:Least Angle Regression Imported successfully
2023-08-11 11:44:47,548:INFO:Starting cross validation
2023-08-11 11:44:47,549:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:47,582:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:47,597:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:47,600:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:47,603:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:47,618:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:47,628:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:47,643:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:47,647:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:47,670:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:47,674:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:47,805:INFO:Calculating mean and std
2023-08-11 11:44:47,806:INFO:Creating metrics dataframe
2023-08-11 11:44:47,848:INFO:Uploading results into container
2023-08-11 11:44:47,848:INFO:Uploading model into container now
2023-08-11 11:44:47,848:INFO:_master_model_container: 5
2023-08-11 11:44:47,848:INFO:_display_container: 2
2023-08-11 11:44:47,849:INFO:Lars(random_state=555)
2023-08-11 11:44:47,849:INFO:create_model() successfully completed......................................
2023-08-11 11:44:47,979:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:47,979:INFO:Creating metrics dataframe
2023-08-11 11:44:47,987:INFO:Initializing Lasso Least Angle Regression
2023-08-11 11:44:47,987:INFO:Total runtime is 0.03811194896697998 minutes
2023-08-11 11:44:47,989:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:47,989:INFO:Initializing create_model()
2023-08-11 11:44:47,990:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=llar, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:47,990:INFO:Checking exceptions
2023-08-11 11:44:47,990:INFO:Importing libraries
2023-08-11 11:44:47,990:INFO:Copying training dataset
2023-08-11 11:44:47,992:INFO:Defining folds
2023-08-11 11:44:47,992:INFO:Declaring metric variables
2023-08-11 11:44:47,994:INFO:Importing untrained model
2023-08-11 11:44:47,997:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 11:44:48,001:INFO:Starting cross validation
2023-08-11 11:44:48,001:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:48,035:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:48,042:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:48,051:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:48,059:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:48,061:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:48,066:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:48,088:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:48,092:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:48,113:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:48,115:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 11:44:48,255:INFO:Calculating mean and std
2023-08-11 11:44:48,257:INFO:Creating metrics dataframe
2023-08-11 11:44:48,299:INFO:Uploading results into container
2023-08-11 11:44:48,299:INFO:Uploading model into container now
2023-08-11 11:44:48,299:INFO:_master_model_container: 6
2023-08-11 11:44:48,299:INFO:_display_container: 2
2023-08-11 11:44:48,299:INFO:LassoLars(random_state=555)
2023-08-11 11:44:48,299:INFO:create_model() successfully completed......................................
2023-08-11 11:44:48,430:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:48,430:INFO:Creating metrics dataframe
2023-08-11 11:44:48,438:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 11:44:48,438:INFO:Total runtime is 0.04563043514887492 minutes
2023-08-11 11:44:48,440:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:48,441:INFO:Initializing create_model()
2023-08-11 11:44:48,441:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=omp, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:48,441:INFO:Checking exceptions
2023-08-11 11:44:48,441:INFO:Importing libraries
2023-08-11 11:44:48,441:INFO:Copying training dataset
2023-08-11 11:44:48,443:INFO:Defining folds
2023-08-11 11:44:48,443:INFO:Declaring metric variables
2023-08-11 11:44:48,445:INFO:Importing untrained model
2023-08-11 11:44:48,447:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 11:44:48,452:INFO:Starting cross validation
2023-08-11 11:44:48,452:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:48,484:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:48,494:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:48,494:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:48,510:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:48,520:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:48,527:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:48,537:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:48,539:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:48,558:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:48,562:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 11:44:48,710:INFO:Calculating mean and std
2023-08-11 11:44:48,711:INFO:Creating metrics dataframe
2023-08-11 11:44:48,754:INFO:Uploading results into container
2023-08-11 11:44:48,754:INFO:Uploading model into container now
2023-08-11 11:44:48,754:INFO:_master_model_container: 7
2023-08-11 11:44:48,754:INFO:_display_container: 2
2023-08-11 11:44:48,754:INFO:OrthogonalMatchingPursuit()
2023-08-11 11:44:48,754:INFO:create_model() successfully completed......................................
2023-08-11 11:44:48,885:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:48,885:INFO:Creating metrics dataframe
2023-08-11 11:44:48,894:INFO:Initializing Bayesian Ridge
2023-08-11 11:44:48,894:INFO:Total runtime is 0.05322146813074748 minutes
2023-08-11 11:44:48,896:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:48,896:INFO:Initializing create_model()
2023-08-11 11:44:48,896:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=br, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:48,896:INFO:Checking exceptions
2023-08-11 11:44:48,896:INFO:Importing libraries
2023-08-11 11:44:48,896:INFO:Copying training dataset
2023-08-11 11:44:48,899:INFO:Defining folds
2023-08-11 11:44:48,899:INFO:Declaring metric variables
2023-08-11 11:44:48,901:INFO:Importing untrained model
2023-08-11 11:44:48,903:INFO:Bayesian Ridge Imported successfully
2023-08-11 11:44:48,907:INFO:Starting cross validation
2023-08-11 11:44:48,907:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:49,165:INFO:Calculating mean and std
2023-08-11 11:44:49,166:INFO:Creating metrics dataframe
2023-08-11 11:44:49,209:INFO:Uploading results into container
2023-08-11 11:44:49,209:INFO:Uploading model into container now
2023-08-11 11:44:49,209:INFO:_master_model_container: 8
2023-08-11 11:44:49,209:INFO:_display_container: 2
2023-08-11 11:44:49,209:INFO:BayesianRidge()
2023-08-11 11:44:49,209:INFO:create_model() successfully completed......................................
2023-08-11 11:44:49,340:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:49,340:INFO:Creating metrics dataframe
2023-08-11 11:44:49,349:INFO:Initializing Passive Aggressive Regressor
2023-08-11 11:44:49,349:INFO:Total runtime is 0.06080456574757895 minutes
2023-08-11 11:44:49,351:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:49,351:INFO:Initializing create_model()
2023-08-11 11:44:49,351:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=par, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:49,351:INFO:Checking exceptions
2023-08-11 11:44:49,351:INFO:Importing libraries
2023-08-11 11:44:49,351:INFO:Copying training dataset
2023-08-11 11:44:49,354:INFO:Defining folds
2023-08-11 11:44:49,354:INFO:Declaring metric variables
2023-08-11 11:44:49,356:INFO:Importing untrained model
2023-08-11 11:44:49,358:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 11:44:49,364:INFO:Starting cross validation
2023-08-11 11:44:49,364:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:49,664:INFO:Calculating mean and std
2023-08-11 11:44:49,665:INFO:Creating metrics dataframe
2023-08-11 11:44:49,708:INFO:Uploading results into container
2023-08-11 11:44:49,708:INFO:Uploading model into container now
2023-08-11 11:44:49,708:INFO:_master_model_container: 9
2023-08-11 11:44:49,708:INFO:_display_container: 2
2023-08-11 11:44:49,708:INFO:PassiveAggressiveRegressor(random_state=555)
2023-08-11 11:44:49,708:INFO:create_model() successfully completed......................................
2023-08-11 11:44:49,840:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:49,840:INFO:Creating metrics dataframe
2023-08-11 11:44:49,849:INFO:Initializing Huber Regressor
2023-08-11 11:44:49,849:INFO:Total runtime is 0.06913478374481202 minutes
2023-08-11 11:44:49,851:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:49,851:INFO:Initializing create_model()
2023-08-11 11:44:49,851:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=huber, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:49,851:INFO:Checking exceptions
2023-08-11 11:44:49,851:INFO:Importing libraries
2023-08-11 11:44:49,851:INFO:Copying training dataset
2023-08-11 11:44:49,853:INFO:Defining folds
2023-08-11 11:44:49,854:INFO:Declaring metric variables
2023-08-11 11:44:49,856:INFO:Importing untrained model
2023-08-11 11:44:49,858:INFO:Huber Regressor Imported successfully
2023-08-11 11:44:49,862:INFO:Starting cross validation
2023-08-11 11:44:49,862:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:50,117:INFO:Calculating mean and std
2023-08-11 11:44:50,118:INFO:Creating metrics dataframe
2023-08-11 11:44:50,161:INFO:Uploading results into container
2023-08-11 11:44:50,161:INFO:Uploading model into container now
2023-08-11 11:44:50,161:INFO:_master_model_container: 10
2023-08-11 11:44:50,161:INFO:_display_container: 2
2023-08-11 11:44:50,161:INFO:HuberRegressor()
2023-08-11 11:44:50,161:INFO:create_model() successfully completed......................................
2023-08-11 11:44:50,293:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:50,293:INFO:Creating metrics dataframe
2023-08-11 11:44:50,302:INFO:Initializing K Neighbors Regressor
2023-08-11 11:44:50,302:INFO:Total runtime is 0.07669121821721396 minutes
2023-08-11 11:44:50,304:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:50,304:INFO:Initializing create_model()
2023-08-11 11:44:50,304:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=knn, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:50,305:INFO:Checking exceptions
2023-08-11 11:44:50,305:INFO:Importing libraries
2023-08-11 11:44:50,305:INFO:Copying training dataset
2023-08-11 11:44:50,307:INFO:Defining folds
2023-08-11 11:44:50,307:INFO:Declaring metric variables
2023-08-11 11:44:50,309:INFO:Importing untrained model
2023-08-11 11:44:50,311:INFO:K Neighbors Regressor Imported successfully
2023-08-11 11:44:50,316:INFO:Starting cross validation
2023-08-11 11:44:50,316:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:50,648:INFO:Calculating mean and std
2023-08-11 11:44:50,649:INFO:Creating metrics dataframe
2023-08-11 11:44:50,692:INFO:Uploading results into container
2023-08-11 11:44:50,692:INFO:Uploading model into container now
2023-08-11 11:44:50,692:INFO:_master_model_container: 11
2023-08-11 11:44:50,692:INFO:_display_container: 2
2023-08-11 11:44:50,692:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 11:44:50,692:INFO:create_model() successfully completed......................................
2023-08-11 11:44:50,823:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:50,823:INFO:Creating metrics dataframe
2023-08-11 11:44:50,832:INFO:Initializing Decision Tree Regressor
2023-08-11 11:44:50,832:INFO:Total runtime is 0.08552703460057577 minutes
2023-08-11 11:44:50,834:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:50,834:INFO:Initializing create_model()
2023-08-11 11:44:50,834:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=dt, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:50,835:INFO:Checking exceptions
2023-08-11 11:44:50,835:INFO:Importing libraries
2023-08-11 11:44:50,835:INFO:Copying training dataset
2023-08-11 11:44:50,837:INFO:Defining folds
2023-08-11 11:44:50,837:INFO:Declaring metric variables
2023-08-11 11:44:50,839:INFO:Importing untrained model
2023-08-11 11:44:50,842:INFO:Decision Tree Regressor Imported successfully
2023-08-11 11:44:50,847:INFO:Starting cross validation
2023-08-11 11:44:50,848:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:51,098:INFO:Calculating mean and std
2023-08-11 11:44:51,099:INFO:Creating metrics dataframe
2023-08-11 11:44:51,142:INFO:Uploading results into container
2023-08-11 11:44:51,142:INFO:Uploading model into container now
2023-08-11 11:44:51,143:INFO:_master_model_container: 12
2023-08-11 11:44:51,143:INFO:_display_container: 2
2023-08-11 11:44:51,143:INFO:DecisionTreeRegressor(random_state=555)
2023-08-11 11:44:51,143:INFO:create_model() successfully completed......................................
2023-08-11 11:44:51,274:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:51,274:INFO:Creating metrics dataframe
2023-08-11 11:44:51,284:INFO:Initializing Random Forest Regressor
2023-08-11 11:44:51,284:INFO:Total runtime is 0.09304953416188559 minutes
2023-08-11 11:44:51,286:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:51,286:INFO:Initializing create_model()
2023-08-11 11:44:51,286:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=rf, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:51,286:INFO:Checking exceptions
2023-08-11 11:44:51,286:INFO:Importing libraries
2023-08-11 11:44:51,286:INFO:Copying training dataset
2023-08-11 11:44:51,288:INFO:Defining folds
2023-08-11 11:44:51,288:INFO:Declaring metric variables
2023-08-11 11:44:51,290:INFO:Importing untrained model
2023-08-11 11:44:51,293:INFO:Random Forest Regressor Imported successfully
2023-08-11 11:44:51,297:INFO:Starting cross validation
2023-08-11 11:44:51,297:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:52,184:INFO:Calculating mean and std
2023-08-11 11:44:52,185:INFO:Creating metrics dataframe
2023-08-11 11:44:52,231:INFO:Uploading results into container
2023-08-11 11:44:52,231:INFO:Uploading model into container now
2023-08-11 11:44:52,232:INFO:_master_model_container: 13
2023-08-11 11:44:52,232:INFO:_display_container: 2
2023-08-11 11:44:52,232:INFO:RandomForestRegressor(n_jobs=-1, random_state=555)
2023-08-11 11:44:52,232:INFO:create_model() successfully completed......................................
2023-08-11 11:44:52,363:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:52,363:INFO:Creating metrics dataframe
2023-08-11 11:44:52,372:INFO:Initializing Extra Trees Regressor
2023-08-11 11:44:52,372:INFO:Total runtime is 0.1111979643503825 minutes
2023-08-11 11:44:52,375:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:52,375:INFO:Initializing create_model()
2023-08-11 11:44:52,375:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=et, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:52,375:INFO:Checking exceptions
2023-08-11 11:44:52,375:INFO:Importing libraries
2023-08-11 11:44:52,375:INFO:Copying training dataset
2023-08-11 11:44:52,377:INFO:Defining folds
2023-08-11 11:44:52,377:INFO:Declaring metric variables
2023-08-11 11:44:52,379:INFO:Importing untrained model
2023-08-11 11:44:52,382:INFO:Extra Trees Regressor Imported successfully
2023-08-11 11:44:52,386:INFO:Starting cross validation
2023-08-11 11:44:52,387:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:53,179:INFO:Calculating mean and std
2023-08-11 11:44:53,181:INFO:Creating metrics dataframe
2023-08-11 11:44:53,227:INFO:Uploading results into container
2023-08-11 11:44:53,228:INFO:Uploading model into container now
2023-08-11 11:44:53,228:INFO:_master_model_container: 14
2023-08-11 11:44:53,228:INFO:_display_container: 2
2023-08-11 11:44:53,228:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=555)
2023-08-11 11:44:53,228:INFO:create_model() successfully completed......................................
2023-08-11 11:44:53,359:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:53,359:INFO:Creating metrics dataframe
2023-08-11 11:44:53,369:INFO:Initializing AdaBoost Regressor
2023-08-11 11:44:53,369:INFO:Total runtime is 0.12780404885609944 minutes
2023-08-11 11:44:53,371:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:53,371:INFO:Initializing create_model()
2023-08-11 11:44:53,371:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=ada, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:53,371:INFO:Checking exceptions
2023-08-11 11:44:53,371:INFO:Importing libraries
2023-08-11 11:44:53,371:INFO:Copying training dataset
2023-08-11 11:44:53,374:INFO:Defining folds
2023-08-11 11:44:53,374:INFO:Declaring metric variables
2023-08-11 11:44:53,376:INFO:Importing untrained model
2023-08-11 11:44:53,378:INFO:AdaBoost Regressor Imported successfully
2023-08-11 11:44:53,382:INFO:Starting cross validation
2023-08-11 11:44:53,383:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:53,724:INFO:Calculating mean and std
2023-08-11 11:44:53,725:INFO:Creating metrics dataframe
2023-08-11 11:44:53,771:INFO:Uploading results into container
2023-08-11 11:44:53,771:INFO:Uploading model into container now
2023-08-11 11:44:53,771:INFO:_master_model_container: 15
2023-08-11 11:44:53,771:INFO:_display_container: 2
2023-08-11 11:44:53,771:INFO:AdaBoostRegressor(random_state=555)
2023-08-11 11:44:53,771:INFO:create_model() successfully completed......................................
2023-08-11 11:44:53,903:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:53,903:INFO:Creating metrics dataframe
2023-08-11 11:44:53,913:INFO:Initializing Gradient Boosting Regressor
2023-08-11 11:44:53,913:INFO:Total runtime is 0.1368798017501831 minutes
2023-08-11 11:44:53,916:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:53,916:INFO:Initializing create_model()
2023-08-11 11:44:53,916:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=gbr, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:53,916:INFO:Checking exceptions
2023-08-11 11:44:53,916:INFO:Importing libraries
2023-08-11 11:44:53,916:INFO:Copying training dataset
2023-08-11 11:44:53,918:INFO:Defining folds
2023-08-11 11:44:53,919:INFO:Declaring metric variables
2023-08-11 11:44:53,921:INFO:Importing untrained model
2023-08-11 11:44:53,923:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 11:44:53,928:INFO:Starting cross validation
2023-08-11 11:44:53,928:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:54,286:INFO:Calculating mean and std
2023-08-11 11:44:54,287:INFO:Creating metrics dataframe
2023-08-11 11:44:54,336:INFO:Uploading results into container
2023-08-11 11:44:54,336:INFO:Uploading model into container now
2023-08-11 11:44:54,337:INFO:_master_model_container: 16
2023-08-11 11:44:54,337:INFO:_display_container: 2
2023-08-11 11:44:54,337:INFO:GradientBoostingRegressor(random_state=555)
2023-08-11 11:44:54,337:INFO:create_model() successfully completed......................................
2023-08-11 11:44:54,472:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:54,472:INFO:Creating metrics dataframe
2023-08-11 11:44:54,482:INFO:Initializing Extreme Gradient Boosting
2023-08-11 11:44:54,482:INFO:Total runtime is 0.14635630051294962 minutes
2023-08-11 11:44:54,484:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:54,484:INFO:Initializing create_model()
2023-08-11 11:44:54,484:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=xgboost, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:54,484:INFO:Checking exceptions
2023-08-11 11:44:54,484:INFO:Importing libraries
2023-08-11 11:44:54,484:INFO:Copying training dataset
2023-08-11 11:44:54,487:INFO:Defining folds
2023-08-11 11:44:54,487:INFO:Declaring metric variables
2023-08-11 11:44:54,489:INFO:Importing untrained model
2023-08-11 11:44:54,492:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 11:44:54,496:INFO:Starting cross validation
2023-08-11 11:44:54,497:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:54,815:INFO:Calculating mean and std
2023-08-11 11:44:54,816:INFO:Creating metrics dataframe
2023-08-11 11:44:54,862:INFO:Uploading results into container
2023-08-11 11:44:54,863:INFO:Uploading model into container now
2023-08-11 11:44:54,863:INFO:_master_model_container: 17
2023-08-11 11:44:54,863:INFO:_display_container: 2
2023-08-11 11:44:54,863:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=555,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 11:44:54,863:INFO:create_model() successfully completed......................................
2023-08-11 11:44:54,994:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:54,994:INFO:Creating metrics dataframe
2023-08-11 11:44:55,004:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 11:44:55,005:INFO:Total runtime is 0.15506519873936972 minutes
2023-08-11 11:44:55,007:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:55,007:INFO:Initializing create_model()
2023-08-11 11:44:55,007:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:55,007:INFO:Checking exceptions
2023-08-11 11:44:55,007:INFO:Importing libraries
2023-08-11 11:44:55,007:INFO:Copying training dataset
2023-08-11 11:44:55,009:INFO:Defining folds
2023-08-11 11:44:55,009:INFO:Declaring metric variables
2023-08-11 11:44:55,012:INFO:Importing untrained model
2023-08-11 11:44:55,014:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 11:44:55,019:INFO:Starting cross validation
2023-08-11 11:44:55,019:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:55,297:INFO:Calculating mean and std
2023-08-11 11:44:55,298:INFO:Creating metrics dataframe
2023-08-11 11:44:55,344:INFO:Uploading results into container
2023-08-11 11:44:55,344:INFO:Uploading model into container now
2023-08-11 11:44:55,344:INFO:_master_model_container: 18
2023-08-11 11:44:55,344:INFO:_display_container: 2
2023-08-11 11:44:55,344:INFO:LGBMRegressor(random_state=555)
2023-08-11 11:44:55,344:INFO:create_model() successfully completed......................................
2023-08-11 11:44:55,475:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:55,475:INFO:Creating metrics dataframe
2023-08-11 11:44:55,485:INFO:Initializing CatBoost Regressor
2023-08-11 11:44:55,485:INFO:Total runtime is 0.1630801836649577 minutes
2023-08-11 11:44:55,488:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:55,488:INFO:Initializing create_model()
2023-08-11 11:44:55,488:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=catboost, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:55,488:INFO:Checking exceptions
2023-08-11 11:44:55,488:INFO:Importing libraries
2023-08-11 11:44:55,488:INFO:Copying training dataset
2023-08-11 11:44:55,490:INFO:Defining folds
2023-08-11 11:44:55,490:INFO:Declaring metric variables
2023-08-11 11:44:55,492:INFO:Importing untrained model
2023-08-11 11:44:55,495:INFO:CatBoost Regressor Imported successfully
2023-08-11 11:44:55,499:INFO:Starting cross validation
2023-08-11 11:44:55,500:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:57,409:INFO:Calculating mean and std
2023-08-11 11:44:57,411:INFO:Creating metrics dataframe
2023-08-11 11:44:57,458:INFO:Uploading results into container
2023-08-11 11:44:57,458:INFO:Uploading model into container now
2023-08-11 11:44:57,459:INFO:_master_model_container: 19
2023-08-11 11:44:57,459:INFO:_display_container: 2
2023-08-11 11:44:57,459:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d44563f10>
2023-08-11 11:44:57,459:INFO:create_model() successfully completed......................................
2023-08-11 11:44:57,594:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:57,595:INFO:Creating metrics dataframe
2023-08-11 11:44:57,606:INFO:Initializing Dummy Regressor
2023-08-11 11:44:57,606:INFO:Total runtime is 0.1984241008758545 minutes
2023-08-11 11:44:57,608:INFO:SubProcess create_model() called ==================================
2023-08-11 11:44:57,608:INFO:Initializing create_model()
2023-08-11 11:44:57,608:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=dummy, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d2185eb50>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:57,608:INFO:Checking exceptions
2023-08-11 11:44:57,608:INFO:Importing libraries
2023-08-11 11:44:57,608:INFO:Copying training dataset
2023-08-11 11:44:57,611:INFO:Defining folds
2023-08-11 11:44:57,611:INFO:Declaring metric variables
2023-08-11 11:44:57,613:INFO:Importing untrained model
2023-08-11 11:44:57,615:INFO:Dummy Regressor Imported successfully
2023-08-11 11:44:57,619:INFO:Starting cross validation
2023-08-11 11:44:57,620:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 11:44:57,905:INFO:Calculating mean and std
2023-08-11 11:44:57,906:INFO:Creating metrics dataframe
2023-08-11 11:44:57,954:INFO:Uploading results into container
2023-08-11 11:44:57,955:INFO:Uploading model into container now
2023-08-11 11:44:57,955:INFO:_master_model_container: 20
2023-08-11 11:44:57,955:INFO:_display_container: 2
2023-08-11 11:44:57,955:INFO:DummyRegressor()
2023-08-11 11:44:57,955:INFO:create_model() successfully completed......................................
2023-08-11 11:44:58,086:INFO:SubProcess create_model() end ==================================
2023-08-11 11:44:58,086:INFO:Creating metrics dataframe
2023-08-11 11:44:58,104:INFO:Initializing create_model()
2023-08-11 11:44:58,104:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21944890>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=555), fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 11:44:58,104:INFO:Checking exceptions
2023-08-11 11:44:58,105:INFO:Importing libraries
2023-08-11 11:44:58,105:INFO:Copying training dataset
2023-08-11 11:44:58,106:INFO:Defining folds
2023-08-11 11:44:58,106:INFO:Declaring metric variables
2023-08-11 11:44:58,107:INFO:Importing untrained model
2023-08-11 11:44:58,107:INFO:Declaring custom model
2023-08-11 11:44:58,107:INFO:Extra Trees Regressor Imported successfully
2023-08-11 11:44:58,108:INFO:Cross validation set to False
2023-08-11 11:44:58,108:INFO:Fitting Model
2023-08-11 11:44:58,330:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=555)
2023-08-11 11:44:58,330:INFO:create_model() successfully completed......................................
2023-08-11 11:44:58,489:INFO:_master_model_container: 20
2023-08-11 11:44:58,489:INFO:_display_container: 2
2023-08-11 11:44:58,490:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=555)
2023-08-11 11:44:58,490:INFO:compare_models() successfully completed......................................
2023-08-11 12:57:14,226:INFO:PyCaret RegressionExperiment
2023-08-11 12:57:14,226:INFO:Logging name: reg-default-name
2023-08-11 12:57:14,226:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 12:57:14,226:INFO:version 3.0.2
2023-08-11 12:57:14,226:INFO:Initializing setup()
2023-08-11 12:57:14,227:INFO:self.USI: d060
2023-08-11 12:57:14,227:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 12:57:14,227:INFO:Checking environment
2023-08-11 12:57:14,227:INFO:python_version: 3.7.13
2023-08-11 12:57:14,227:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 12:57:14,227:INFO:machine: x86_64
2023-08-11 12:57:14,227:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 12:57:14,227:INFO:Memory: svmem(total=17179869184, available=1383718912, percent=91.9, used=1774931968, free=61112320, active=1326395392, inactive=1313480704, wired=448536576)
2023-08-11 12:57:14,227:INFO:Physical Core: 8
2023-08-11 12:57:14,227:INFO:Logical Core: 8
2023-08-11 12:57:14,227:INFO:Checking libraries
2023-08-11 12:57:14,227:INFO:System:
2023-08-11 12:57:14,227:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 12:57:14,227:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 12:57:14,227:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 12:57:14,227:INFO:PyCaret required dependencies:
2023-08-11 12:57:14,228:INFO:                 pip: 22.3.1
2023-08-11 12:57:14,228:INFO:          setuptools: 63.4.1
2023-08-11 12:57:14,228:INFO:             pycaret: 3.0.2
2023-08-11 12:57:14,228:INFO:             IPython: 7.33.0
2023-08-11 12:57:14,228:INFO:          ipywidgets: 8.0.2
2023-08-11 12:57:14,228:INFO:                tqdm: 4.64.1
2023-08-11 12:57:14,228:INFO:               numpy: 1.21.5
2023-08-11 12:57:14,228:INFO:              pandas: 1.3.5
2023-08-11 12:57:14,228:INFO:              jinja2: 3.1.2
2023-08-11 12:57:14,228:INFO:               scipy: 1.7.3
2023-08-11 12:57:14,228:INFO:              joblib: 1.2.0
2023-08-11 12:57:14,228:INFO:             sklearn: 1.0.2
2023-08-11 12:57:14,228:INFO:                pyod: 1.0.9
2023-08-11 12:57:14,228:INFO:            imblearn: 0.10.1
2023-08-11 12:57:14,228:INFO:   category_encoders: 2.6.1
2023-08-11 12:57:14,228:INFO:            lightgbm: 3.3.2
2023-08-11 12:57:14,228:INFO:               numba: 0.56.2
2023-08-11 12:57:14,228:INFO:            requests: 2.28.1
2023-08-11 12:57:14,228:INFO:          matplotlib: 3.5.3
2023-08-11 12:57:14,228:INFO:          scikitplot: 0.3.7
2023-08-11 12:57:14,228:INFO:         yellowbrick: 1.5
2023-08-11 12:57:14,228:INFO:              plotly: 5.13.0
2023-08-11 12:57:14,228:INFO:             kaleido: 0.2.1
2023-08-11 12:57:14,228:INFO:         statsmodels: 0.13.2
2023-08-11 12:57:14,228:INFO:              sktime: 0.17.0
2023-08-11 12:57:14,228:INFO:               tbats: 1.1.3
2023-08-11 12:57:14,228:INFO:            pmdarima: 2.0.3
2023-08-11 12:57:14,228:INFO:              psutil: 5.9.2
2023-08-11 12:57:14,228:INFO:PyCaret optional dependencies:
2023-08-11 12:57:14,229:INFO:                shap: Not installed
2023-08-11 12:57:14,229:INFO:           interpret: Not installed
2023-08-11 12:57:14,229:INFO:                umap: 0.5.3
2023-08-11 12:57:14,229:INFO:    pandas_profiling: 3.0.0
2023-08-11 12:57:14,229:INFO:  explainerdashboard: Not installed
2023-08-11 12:57:14,229:INFO:             autoviz: Not installed
2023-08-11 12:57:14,229:INFO:           fairlearn: Not installed
2023-08-11 12:57:14,229:INFO:             xgboost: 1.6.2
2023-08-11 12:57:14,229:INFO:            catboost: 1.0.4
2023-08-11 12:57:14,229:INFO:              kmodes: 0.12.2
2023-08-11 12:57:14,229:INFO:             mlxtend: 0.19.0
2023-08-11 12:57:14,229:INFO:       statsforecast: Not installed
2023-08-11 12:57:14,229:INFO:        tune_sklearn: Not installed
2023-08-11 12:57:14,229:INFO:                 ray: Not installed
2023-08-11 12:57:14,229:INFO:            hyperopt: Not installed
2023-08-11 12:57:14,229:INFO:              optuna: Not installed
2023-08-11 12:57:14,229:INFO:               skopt: Not installed
2023-08-11 12:57:14,229:INFO:              mlflow: 1.29.0
2023-08-11 12:57:14,229:INFO:              gradio: Not installed
2023-08-11 12:57:14,229:INFO:             fastapi: Not installed
2023-08-11 12:57:14,229:INFO:             uvicorn: Not installed
2023-08-11 12:57:14,229:INFO:              m2cgen: Not installed
2023-08-11 12:57:14,229:INFO:           evidently: Not installed
2023-08-11 12:57:14,229:INFO:               fugue: Not installed
2023-08-11 12:57:14,229:INFO:           streamlit: 1.13.0
2023-08-11 12:57:14,229:INFO:             prophet: Not installed
2023-08-11 12:57:14,230:INFO:None
2023-08-11 12:57:14,230:INFO:Set up data.
2023-08-11 12:57:14,233:INFO:Set up train/test split.
2023-08-11 12:57:14,236:INFO:Set up index.
2023-08-11 12:57:14,236:INFO:Set up folding strategy.
2023-08-11 12:57:14,236:INFO:Assigning column types.
2023-08-11 12:57:14,239:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 12:57:14,239:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,244:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,249:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,296:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,332:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,332:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:57:14,335:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:57:14,335:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,339:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,342:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,387:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,423:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,423:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:57:14,425:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:57:14,426:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 12:57:14,429:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,433:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,478:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,513:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,513:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:57:14,515:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:57:14,519:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,523:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,567:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,603:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,603:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:57:14,605:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:57:14,605:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 12:57:14,613:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,657:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,692:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,692:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:57:14,694:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:57:14,702:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,746:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,782:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,782:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:57:14,784:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:57:14,784:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 12:57:14,836:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,872:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,872:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:57:14,874:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:57:14,926:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,963:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 12:57:14,963:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:57:14,965:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:57:14,965:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 12:57:15,017:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:57:15,053:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:57:15,055:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:57:15,107:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:57:15,143:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:57:15,145:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:57:15,146:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 12:57:15,233:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:57:15,235:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:57:15,323:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:57:15,325:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:57:15,326:INFO:Preparing preprocessing pipeline...
2023-08-11 12:57:15,326:INFO:Set up simple imputation.
2023-08-11 12:57:15,326:INFO:Set up column name cleaning.
2023-08-11 12:57:15,341:INFO:Finished creating preprocessing pipeline.
2023-08-11 12:57:15,344:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['n8Ring', 'Xch-4d', 'ABC',
                                             'PEOE_VSA13', 'nSpiro'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2023-08-11 12:57:15,344:INFO:Creating final display dataframe.
2023-08-11 12:57:15,394:INFO:Setup _display_container:                     Description             Value
0                    Session id               555
1                        Target               pKi
2                   Target type        Regression
3           Original data shape          (316, 6)
4        Transformed data shape          (316, 6)
5   Transformed train set shape          (221, 6)
6    Transformed test set shape           (95, 6)
7              Numeric features                 5
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              d060
2023-08-11 12:57:15,493:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:57:15,495:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:57:15,585:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:57:15,587:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:57:15,587:INFO:setup() successfully completed in 1.41s...............
2023-08-11 12:57:18,497:INFO:Initializing compare_models()
2023-08-11 12:57:18,498:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 12:57:18,498:INFO:Checking exceptions
2023-08-11 12:57:18,501:INFO:Preparing display monitor
2023-08-11 12:57:18,555:INFO:Initializing Linear Regression
2023-08-11 12:57:18,555:INFO:Total runtime is 2.5033950805664062e-06 minutes
2023-08-11 12:57:18,560:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:18,561:INFO:Initializing create_model()
2023-08-11 12:57:18,561:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=lr, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:18,561:INFO:Checking exceptions
2023-08-11 12:57:18,561:INFO:Importing libraries
2023-08-11 12:57:18,561:INFO:Copying training dataset
2023-08-11 12:57:18,564:INFO:Defining folds
2023-08-11 12:57:18,565:INFO:Declaring metric variables
2023-08-11 12:57:18,568:INFO:Importing untrained model
2023-08-11 12:57:18,571:INFO:Linear Regression Imported successfully
2023-08-11 12:57:18,576:INFO:Starting cross validation
2023-08-11 12:57:18,577:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:22,108:INFO:Calculating mean and std
2023-08-11 12:57:22,110:INFO:Creating metrics dataframe
2023-08-11 12:57:22,160:INFO:Uploading results into container
2023-08-11 12:57:22,160:INFO:Uploading model into container now
2023-08-11 12:57:22,160:INFO:_master_model_container: 1
2023-08-11 12:57:22,160:INFO:_display_container: 2
2023-08-11 12:57:22,161:INFO:LinearRegression(n_jobs=-1)
2023-08-11 12:57:22,161:INFO:create_model() successfully completed......................................
2023-08-11 12:57:22,368:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:22,368:INFO:Creating metrics dataframe
2023-08-11 12:57:22,376:INFO:Initializing Lasso Regression
2023-08-11 12:57:22,376:INFO:Total runtime is 0.06368148724238078 minutes
2023-08-11 12:57:22,378:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:22,378:INFO:Initializing create_model()
2023-08-11 12:57:22,378:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=lasso, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:22,378:INFO:Checking exceptions
2023-08-11 12:57:22,378:INFO:Importing libraries
2023-08-11 12:57:22,378:INFO:Copying training dataset
2023-08-11 12:57:22,381:INFO:Defining folds
2023-08-11 12:57:22,381:INFO:Declaring metric variables
2023-08-11 12:57:22,383:INFO:Importing untrained model
2023-08-11 12:57:22,385:INFO:Lasso Regression Imported successfully
2023-08-11 12:57:22,389:INFO:Starting cross validation
2023-08-11 12:57:22,390:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:22,668:INFO:Calculating mean and std
2023-08-11 12:57:22,669:INFO:Creating metrics dataframe
2023-08-11 12:57:22,716:INFO:Uploading results into container
2023-08-11 12:57:22,716:INFO:Uploading model into container now
2023-08-11 12:57:22,717:INFO:_master_model_container: 2
2023-08-11 12:57:22,717:INFO:_display_container: 2
2023-08-11 12:57:22,717:INFO:Lasso(random_state=555)
2023-08-11 12:57:22,717:INFO:create_model() successfully completed......................................
2023-08-11 12:57:22,852:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:22,852:INFO:Creating metrics dataframe
2023-08-11 12:57:22,860:INFO:Initializing Ridge Regression
2023-08-11 12:57:22,860:INFO:Total runtime is 0.07175091902414958 minutes
2023-08-11 12:57:22,862:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:22,862:INFO:Initializing create_model()
2023-08-11 12:57:22,862:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=ridge, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:22,862:INFO:Checking exceptions
2023-08-11 12:57:22,862:INFO:Importing libraries
2023-08-11 12:57:22,862:INFO:Copying training dataset
2023-08-11 12:57:22,865:INFO:Defining folds
2023-08-11 12:57:22,865:INFO:Declaring metric variables
2023-08-11 12:57:22,867:INFO:Importing untrained model
2023-08-11 12:57:22,869:INFO:Ridge Regression Imported successfully
2023-08-11 12:57:22,874:INFO:Starting cross validation
2023-08-11 12:57:22,874:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:23,159:INFO:Calculating mean and std
2023-08-11 12:57:23,161:INFO:Creating metrics dataframe
2023-08-11 12:57:23,209:INFO:Uploading results into container
2023-08-11 12:57:23,209:INFO:Uploading model into container now
2023-08-11 12:57:23,209:INFO:_master_model_container: 3
2023-08-11 12:57:23,209:INFO:_display_container: 2
2023-08-11 12:57:23,210:INFO:Ridge(random_state=555)
2023-08-11 12:57:23,210:INFO:create_model() successfully completed......................................
2023-08-11 12:57:23,345:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:23,345:INFO:Creating metrics dataframe
2023-08-11 12:57:23,353:INFO:Initializing Elastic Net
2023-08-11 12:57:23,353:INFO:Total runtime is 0.07996718088785808 minutes
2023-08-11 12:57:23,355:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:23,355:INFO:Initializing create_model()
2023-08-11 12:57:23,355:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=en, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:23,355:INFO:Checking exceptions
2023-08-11 12:57:23,355:INFO:Importing libraries
2023-08-11 12:57:23,355:INFO:Copying training dataset
2023-08-11 12:57:23,358:INFO:Defining folds
2023-08-11 12:57:23,358:INFO:Declaring metric variables
2023-08-11 12:57:23,360:INFO:Importing untrained model
2023-08-11 12:57:23,362:INFO:Elastic Net Imported successfully
2023-08-11 12:57:23,366:INFO:Starting cross validation
2023-08-11 12:57:23,367:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:23,659:INFO:Calculating mean and std
2023-08-11 12:57:23,660:INFO:Creating metrics dataframe
2023-08-11 12:57:23,707:INFO:Uploading results into container
2023-08-11 12:57:23,707:INFO:Uploading model into container now
2023-08-11 12:57:23,708:INFO:_master_model_container: 4
2023-08-11 12:57:23,708:INFO:_display_container: 2
2023-08-11 12:57:23,708:INFO:ElasticNet(random_state=555)
2023-08-11 12:57:23,708:INFO:create_model() successfully completed......................................
2023-08-11 12:57:23,843:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:23,843:INFO:Creating metrics dataframe
2023-08-11 12:57:23,851:INFO:Initializing Least Angle Regression
2023-08-11 12:57:23,851:INFO:Total runtime is 0.08827575047810873 minutes
2023-08-11 12:57:23,853:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:23,854:INFO:Initializing create_model()
2023-08-11 12:57:23,854:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=lar, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:23,854:INFO:Checking exceptions
2023-08-11 12:57:23,854:INFO:Importing libraries
2023-08-11 12:57:23,854:INFO:Copying training dataset
2023-08-11 12:57:23,856:INFO:Defining folds
2023-08-11 12:57:23,856:INFO:Declaring metric variables
2023-08-11 12:57:23,858:INFO:Importing untrained model
2023-08-11 12:57:23,860:INFO:Least Angle Regression Imported successfully
2023-08-11 12:57:23,864:INFO:Starting cross validation
2023-08-11 12:57:23,865:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:23,905:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:23,912:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:23,927:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:23,929:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:23,929:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:23,964:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:23,969:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:23,971:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:23,981:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:24,002:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:24,164:INFO:Calculating mean and std
2023-08-11 12:57:24,165:INFO:Creating metrics dataframe
2023-08-11 12:57:24,212:INFO:Uploading results into container
2023-08-11 12:57:24,212:INFO:Uploading model into container now
2023-08-11 12:57:24,213:INFO:_master_model_container: 5
2023-08-11 12:57:24,213:INFO:_display_container: 2
2023-08-11 12:57:24,213:INFO:Lars(random_state=555)
2023-08-11 12:57:24,213:INFO:create_model() successfully completed......................................
2023-08-11 12:57:24,349:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:24,349:INFO:Creating metrics dataframe
2023-08-11 12:57:24,358:INFO:Initializing Lasso Least Angle Regression
2023-08-11 12:57:24,359:INFO:Total runtime is 0.0967289169629415 minutes
2023-08-11 12:57:24,361:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:24,361:INFO:Initializing create_model()
2023-08-11 12:57:24,361:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=llar, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:24,361:INFO:Checking exceptions
2023-08-11 12:57:24,361:INFO:Importing libraries
2023-08-11 12:57:24,361:INFO:Copying training dataset
2023-08-11 12:57:24,364:INFO:Defining folds
2023-08-11 12:57:24,364:INFO:Declaring metric variables
2023-08-11 12:57:24,367:INFO:Importing untrained model
2023-08-11 12:57:24,370:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 12:57:24,375:INFO:Starting cross validation
2023-08-11 12:57:24,375:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:24,415:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:57:24,423:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:57:24,435:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:57:24,443:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:57:24,452:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:57:24,454:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:57:24,463:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:57:24,488:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:57:24,497:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:57:24,514:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:57:24,669:INFO:Calculating mean and std
2023-08-11 12:57:24,670:INFO:Creating metrics dataframe
2023-08-11 12:57:24,717:INFO:Uploading results into container
2023-08-11 12:57:24,717:INFO:Uploading model into container now
2023-08-11 12:57:24,718:INFO:_master_model_container: 6
2023-08-11 12:57:24,718:INFO:_display_container: 2
2023-08-11 12:57:24,718:INFO:LassoLars(random_state=555)
2023-08-11 12:57:24,718:INFO:create_model() successfully completed......................................
2023-08-11 12:57:24,854:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:24,854:INFO:Creating metrics dataframe
2023-08-11 12:57:24,862:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 12:57:24,862:INFO:Total runtime is 0.10512466828028362 minutes
2023-08-11 12:57:24,864:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:24,864:INFO:Initializing create_model()
2023-08-11 12:57:24,865:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=omp, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:24,865:INFO:Checking exceptions
2023-08-11 12:57:24,865:INFO:Importing libraries
2023-08-11 12:57:24,865:INFO:Copying training dataset
2023-08-11 12:57:24,867:INFO:Defining folds
2023-08-11 12:57:24,867:INFO:Declaring metric variables
2023-08-11 12:57:24,869:INFO:Importing untrained model
2023-08-11 12:57:24,871:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 12:57:24,876:INFO:Starting cross validation
2023-08-11 12:57:24,876:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:24,915:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:24,919:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:24,927:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:24,946:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:24,951:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:24,960:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:24,969:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:24,976:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:24,988:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:25,022:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:57:25,177:INFO:Calculating mean and std
2023-08-11 12:57:25,179:INFO:Creating metrics dataframe
2023-08-11 12:57:25,226:INFO:Uploading results into container
2023-08-11 12:57:25,227:INFO:Uploading model into container now
2023-08-11 12:57:25,227:INFO:_master_model_container: 7
2023-08-11 12:57:25,227:INFO:_display_container: 2
2023-08-11 12:57:25,227:INFO:OrthogonalMatchingPursuit()
2023-08-11 12:57:25,227:INFO:create_model() successfully completed......................................
2023-08-11 12:57:25,362:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:25,362:INFO:Creating metrics dataframe
2023-08-11 12:57:25,371:INFO:Initializing Bayesian Ridge
2023-08-11 12:57:25,371:INFO:Total runtime is 0.11360323429107667 minutes
2023-08-11 12:57:25,373:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:25,373:INFO:Initializing create_model()
2023-08-11 12:57:25,373:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=br, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:25,373:INFO:Checking exceptions
2023-08-11 12:57:25,373:INFO:Importing libraries
2023-08-11 12:57:25,373:INFO:Copying training dataset
2023-08-11 12:57:25,376:INFO:Defining folds
2023-08-11 12:57:25,376:INFO:Declaring metric variables
2023-08-11 12:57:25,378:INFO:Importing untrained model
2023-08-11 12:57:25,380:INFO:Bayesian Ridge Imported successfully
2023-08-11 12:57:25,384:INFO:Starting cross validation
2023-08-11 12:57:25,385:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:25,678:INFO:Calculating mean and std
2023-08-11 12:57:25,680:INFO:Creating metrics dataframe
2023-08-11 12:57:25,727:INFO:Uploading results into container
2023-08-11 12:57:25,727:INFO:Uploading model into container now
2023-08-11 12:57:25,727:INFO:_master_model_container: 8
2023-08-11 12:57:25,727:INFO:_display_container: 2
2023-08-11 12:57:25,727:INFO:BayesianRidge()
2023-08-11 12:57:25,727:INFO:create_model() successfully completed......................................
2023-08-11 12:57:25,862:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:25,863:INFO:Creating metrics dataframe
2023-08-11 12:57:25,871:INFO:Initializing Passive Aggressive Regressor
2023-08-11 12:57:25,871:INFO:Total runtime is 0.12194338242212932 minutes
2023-08-11 12:57:25,873:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:25,874:INFO:Initializing create_model()
2023-08-11 12:57:25,874:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=par, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:25,874:INFO:Checking exceptions
2023-08-11 12:57:25,874:INFO:Importing libraries
2023-08-11 12:57:25,874:INFO:Copying training dataset
2023-08-11 12:57:25,876:INFO:Defining folds
2023-08-11 12:57:25,876:INFO:Declaring metric variables
2023-08-11 12:57:25,878:INFO:Importing untrained model
2023-08-11 12:57:25,880:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 12:57:25,884:INFO:Starting cross validation
2023-08-11 12:57:25,885:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:26,171:INFO:Calculating mean and std
2023-08-11 12:57:26,172:INFO:Creating metrics dataframe
2023-08-11 12:57:26,220:INFO:Uploading results into container
2023-08-11 12:57:26,220:INFO:Uploading model into container now
2023-08-11 12:57:26,220:INFO:_master_model_container: 9
2023-08-11 12:57:26,220:INFO:_display_container: 2
2023-08-11 12:57:26,220:INFO:PassiveAggressiveRegressor(random_state=555)
2023-08-11 12:57:26,220:INFO:create_model() successfully completed......................................
2023-08-11 12:57:26,387:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:26,387:INFO:Creating metrics dataframe
2023-08-11 12:57:26,396:INFO:Initializing Huber Regressor
2023-08-11 12:57:26,396:INFO:Total runtime is 0.13069415092468262 minutes
2023-08-11 12:57:26,399:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:26,399:INFO:Initializing create_model()
2023-08-11 12:57:26,399:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=huber, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:26,399:INFO:Checking exceptions
2023-08-11 12:57:26,399:INFO:Importing libraries
2023-08-11 12:57:26,399:INFO:Copying training dataset
2023-08-11 12:57:26,402:INFO:Defining folds
2023-08-11 12:57:26,402:INFO:Declaring metric variables
2023-08-11 12:57:26,404:INFO:Importing untrained model
2023-08-11 12:57:26,406:INFO:Huber Regressor Imported successfully
2023-08-11 12:57:26,411:INFO:Starting cross validation
2023-08-11 12:57:26,412:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:26,720:INFO:Calculating mean and std
2023-08-11 12:57:26,721:INFO:Creating metrics dataframe
2023-08-11 12:57:26,768:INFO:Uploading results into container
2023-08-11 12:57:26,769:INFO:Uploading model into container now
2023-08-11 12:57:26,769:INFO:_master_model_container: 10
2023-08-11 12:57:26,769:INFO:_display_container: 2
2023-08-11 12:57:26,769:INFO:HuberRegressor()
2023-08-11 12:57:26,769:INFO:create_model() successfully completed......................................
2023-08-11 12:57:26,905:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:26,905:INFO:Creating metrics dataframe
2023-08-11 12:57:26,914:INFO:Initializing K Neighbors Regressor
2023-08-11 12:57:26,914:INFO:Total runtime is 0.13931948343912762 minutes
2023-08-11 12:57:26,916:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:26,916:INFO:Initializing create_model()
2023-08-11 12:57:26,916:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=knn, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:26,916:INFO:Checking exceptions
2023-08-11 12:57:26,916:INFO:Importing libraries
2023-08-11 12:57:26,916:INFO:Copying training dataset
2023-08-11 12:57:26,919:INFO:Defining folds
2023-08-11 12:57:26,919:INFO:Declaring metric variables
2023-08-11 12:57:26,921:INFO:Importing untrained model
2023-08-11 12:57:26,923:INFO:K Neighbors Regressor Imported successfully
2023-08-11 12:57:26,927:INFO:Starting cross validation
2023-08-11 12:57:26,928:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:27,302:INFO:Calculating mean and std
2023-08-11 12:57:27,303:INFO:Creating metrics dataframe
2023-08-11 12:57:27,351:INFO:Uploading results into container
2023-08-11 12:57:27,351:INFO:Uploading model into container now
2023-08-11 12:57:27,351:INFO:_master_model_container: 11
2023-08-11 12:57:27,351:INFO:_display_container: 2
2023-08-11 12:57:27,351:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 12:57:27,352:INFO:create_model() successfully completed......................................
2023-08-11 12:57:27,486:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:27,486:INFO:Creating metrics dataframe
2023-08-11 12:57:27,496:INFO:Initializing Decision Tree Regressor
2023-08-11 12:57:27,496:INFO:Total runtime is 0.14901530345280967 minutes
2023-08-11 12:57:27,498:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:27,498:INFO:Initializing create_model()
2023-08-11 12:57:27,498:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=dt, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:27,498:INFO:Checking exceptions
2023-08-11 12:57:27,498:INFO:Importing libraries
2023-08-11 12:57:27,498:INFO:Copying training dataset
2023-08-11 12:57:27,501:INFO:Defining folds
2023-08-11 12:57:27,501:INFO:Declaring metric variables
2023-08-11 12:57:27,503:INFO:Importing untrained model
2023-08-11 12:57:27,505:INFO:Decision Tree Regressor Imported successfully
2023-08-11 12:57:27,509:INFO:Starting cross validation
2023-08-11 12:57:27,510:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:27,800:INFO:Calculating mean and std
2023-08-11 12:57:27,801:INFO:Creating metrics dataframe
2023-08-11 12:57:27,848:INFO:Uploading results into container
2023-08-11 12:57:27,849:INFO:Uploading model into container now
2023-08-11 12:57:27,849:INFO:_master_model_container: 12
2023-08-11 12:57:27,849:INFO:_display_container: 2
2023-08-11 12:57:27,849:INFO:DecisionTreeRegressor(random_state=555)
2023-08-11 12:57:27,849:INFO:create_model() successfully completed......................................
2023-08-11 12:57:27,984:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:27,984:INFO:Creating metrics dataframe
2023-08-11 12:57:27,994:INFO:Initializing Random Forest Regressor
2023-08-11 12:57:27,994:INFO:Total runtime is 0.1573208491007487 minutes
2023-08-11 12:57:27,996:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:27,996:INFO:Initializing create_model()
2023-08-11 12:57:27,996:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=rf, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:27,996:INFO:Checking exceptions
2023-08-11 12:57:27,996:INFO:Importing libraries
2023-08-11 12:57:27,996:INFO:Copying training dataset
2023-08-11 12:57:27,999:INFO:Defining folds
2023-08-11 12:57:27,999:INFO:Declaring metric variables
2023-08-11 12:57:28,001:INFO:Importing untrained model
2023-08-11 12:57:28,003:INFO:Random Forest Regressor Imported successfully
2023-08-11 12:57:28,007:INFO:Starting cross validation
2023-08-11 12:57:28,008:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:28,856:INFO:Calculating mean and std
2023-08-11 12:57:28,858:INFO:Creating metrics dataframe
2023-08-11 12:57:28,908:INFO:Uploading results into container
2023-08-11 12:57:28,908:INFO:Uploading model into container now
2023-08-11 12:57:28,908:INFO:_master_model_container: 13
2023-08-11 12:57:28,908:INFO:_display_container: 2
2023-08-11 12:57:28,908:INFO:RandomForestRegressor(n_jobs=-1, random_state=555)
2023-08-11 12:57:28,908:INFO:create_model() successfully completed......................................
2023-08-11 12:57:29,044:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:29,044:INFO:Creating metrics dataframe
2023-08-11 12:57:29,054:INFO:Initializing Extra Trees Regressor
2023-08-11 12:57:29,054:INFO:Total runtime is 0.17498338222503662 minutes
2023-08-11 12:57:29,056:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:29,056:INFO:Initializing create_model()
2023-08-11 12:57:29,056:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=et, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:29,056:INFO:Checking exceptions
2023-08-11 12:57:29,056:INFO:Importing libraries
2023-08-11 12:57:29,056:INFO:Copying training dataset
2023-08-11 12:57:29,058:INFO:Defining folds
2023-08-11 12:57:29,058:INFO:Declaring metric variables
2023-08-11 12:57:29,060:INFO:Importing untrained model
2023-08-11 12:57:29,063:INFO:Extra Trees Regressor Imported successfully
2023-08-11 12:57:29,067:INFO:Starting cross validation
2023-08-11 12:57:29,067:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:29,942:INFO:Calculating mean and std
2023-08-11 12:57:29,943:INFO:Creating metrics dataframe
2023-08-11 12:57:29,994:INFO:Uploading results into container
2023-08-11 12:57:29,994:INFO:Uploading model into container now
2023-08-11 12:57:29,994:INFO:_master_model_container: 14
2023-08-11 12:57:29,994:INFO:_display_container: 2
2023-08-11 12:57:29,995:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=555)
2023-08-11 12:57:29,995:INFO:create_model() successfully completed......................................
2023-08-11 12:57:30,130:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:30,130:INFO:Creating metrics dataframe
2023-08-11 12:57:30,140:INFO:Initializing AdaBoost Regressor
2023-08-11 12:57:30,140:INFO:Total runtime is 0.19308748642603557 minutes
2023-08-11 12:57:30,142:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:30,142:INFO:Initializing create_model()
2023-08-11 12:57:30,142:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=ada, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:30,143:INFO:Checking exceptions
2023-08-11 12:57:30,143:INFO:Importing libraries
2023-08-11 12:57:30,143:INFO:Copying training dataset
2023-08-11 12:57:30,145:INFO:Defining folds
2023-08-11 12:57:30,145:INFO:Declaring metric variables
2023-08-11 12:57:30,148:INFO:Importing untrained model
2023-08-11 12:57:30,150:INFO:AdaBoost Regressor Imported successfully
2023-08-11 12:57:30,154:INFO:Starting cross validation
2023-08-11 12:57:30,154:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:30,476:INFO:Calculating mean and std
2023-08-11 12:57:30,477:INFO:Creating metrics dataframe
2023-08-11 12:57:30,528:INFO:Uploading results into container
2023-08-11 12:57:30,528:INFO:Uploading model into container now
2023-08-11 12:57:30,528:INFO:_master_model_container: 15
2023-08-11 12:57:30,528:INFO:_display_container: 2
2023-08-11 12:57:30,529:INFO:AdaBoostRegressor(random_state=555)
2023-08-11 12:57:30,529:INFO:create_model() successfully completed......................................
2023-08-11 12:57:30,664:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:30,664:INFO:Creating metrics dataframe
2023-08-11 12:57:30,674:INFO:Initializing Gradient Boosting Regressor
2023-08-11 12:57:30,674:INFO:Total runtime is 0.20198873281478882 minutes
2023-08-11 12:57:30,676:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:30,676:INFO:Initializing create_model()
2023-08-11 12:57:30,676:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=gbr, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:30,676:INFO:Checking exceptions
2023-08-11 12:57:30,676:INFO:Importing libraries
2023-08-11 12:57:30,676:INFO:Copying training dataset
2023-08-11 12:57:30,679:INFO:Defining folds
2023-08-11 12:57:30,679:INFO:Declaring metric variables
2023-08-11 12:57:30,681:INFO:Importing untrained model
2023-08-11 12:57:30,683:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 12:57:30,687:INFO:Starting cross validation
2023-08-11 12:57:30,688:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:31,071:INFO:Calculating mean and std
2023-08-11 12:57:31,072:INFO:Creating metrics dataframe
2023-08-11 12:57:31,124:INFO:Uploading results into container
2023-08-11 12:57:31,124:INFO:Uploading model into container now
2023-08-11 12:57:31,125:INFO:_master_model_container: 16
2023-08-11 12:57:31,125:INFO:_display_container: 2
2023-08-11 12:57:31,125:INFO:GradientBoostingRegressor(random_state=555)
2023-08-11 12:57:31,125:INFO:create_model() successfully completed......................................
2023-08-11 12:57:31,261:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:31,261:INFO:Creating metrics dataframe
2023-08-11 12:57:31,271:INFO:Initializing Extreme Gradient Boosting
2023-08-11 12:57:31,271:INFO:Total runtime is 0.2119396209716797 minutes
2023-08-11 12:57:31,273:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:31,273:INFO:Initializing create_model()
2023-08-11 12:57:31,273:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=xgboost, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:31,273:INFO:Checking exceptions
2023-08-11 12:57:31,273:INFO:Importing libraries
2023-08-11 12:57:31,274:INFO:Copying training dataset
2023-08-11 12:57:31,276:INFO:Defining folds
2023-08-11 12:57:31,276:INFO:Declaring metric variables
2023-08-11 12:57:31,278:INFO:Importing untrained model
2023-08-11 12:57:31,281:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 12:57:31,285:INFO:Starting cross validation
2023-08-11 12:57:31,285:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:31,668:INFO:Calculating mean and std
2023-08-11 12:57:31,669:INFO:Creating metrics dataframe
2023-08-11 12:57:31,720:INFO:Uploading results into container
2023-08-11 12:57:31,720:INFO:Uploading model into container now
2023-08-11 12:57:31,721:INFO:_master_model_container: 17
2023-08-11 12:57:31,721:INFO:_display_container: 2
2023-08-11 12:57:31,721:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=555,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 12:57:31,721:INFO:create_model() successfully completed......................................
2023-08-11 12:57:31,857:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:31,857:INFO:Creating metrics dataframe
2023-08-11 12:57:31,867:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 12:57:31,868:INFO:Total runtime is 0.221878985563914 minutes
2023-08-11 12:57:31,870:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:31,870:INFO:Initializing create_model()
2023-08-11 12:57:31,870:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:31,870:INFO:Checking exceptions
2023-08-11 12:57:31,870:INFO:Importing libraries
2023-08-11 12:57:31,870:INFO:Copying training dataset
2023-08-11 12:57:31,872:INFO:Defining folds
2023-08-11 12:57:31,872:INFO:Declaring metric variables
2023-08-11 12:57:31,875:INFO:Importing untrained model
2023-08-11 12:57:31,877:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 12:57:31,881:INFO:Starting cross validation
2023-08-11 12:57:31,882:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:32,550:INFO:Calculating mean and std
2023-08-11 12:57:32,552:INFO:Creating metrics dataframe
2023-08-11 12:57:32,602:INFO:Uploading results into container
2023-08-11 12:57:32,603:INFO:Uploading model into container now
2023-08-11 12:57:32,603:INFO:_master_model_container: 18
2023-08-11 12:57:32,603:INFO:_display_container: 2
2023-08-11 12:57:32,603:INFO:LGBMRegressor(random_state=555)
2023-08-11 12:57:32,603:INFO:create_model() successfully completed......................................
2023-08-11 12:57:32,738:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:32,739:INFO:Creating metrics dataframe
2023-08-11 12:57:32,749:INFO:Initializing CatBoost Regressor
2023-08-11 12:57:32,749:INFO:Total runtime is 0.2365684986114502 minutes
2023-08-11 12:57:32,751:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:32,751:INFO:Initializing create_model()
2023-08-11 12:57:32,751:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=catboost, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:32,751:INFO:Checking exceptions
2023-08-11 12:57:32,751:INFO:Importing libraries
2023-08-11 12:57:32,751:INFO:Copying training dataset
2023-08-11 12:57:32,754:INFO:Defining folds
2023-08-11 12:57:32,754:INFO:Declaring metric variables
2023-08-11 12:57:32,756:INFO:Importing untrained model
2023-08-11 12:57:32,758:INFO:CatBoost Regressor Imported successfully
2023-08-11 12:57:32,762:INFO:Starting cross validation
2023-08-11 12:57:32,763:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:34,089:INFO:Calculating mean and std
2023-08-11 12:57:34,090:INFO:Creating metrics dataframe
2023-08-11 12:57:34,146:INFO:Uploading results into container
2023-08-11 12:57:34,147:INFO:Uploading model into container now
2023-08-11 12:57:34,147:INFO:_master_model_container: 19
2023-08-11 12:57:34,147:INFO:_display_container: 2
2023-08-11 12:57:34,147:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d21c03790>
2023-08-11 12:57:34,147:INFO:create_model() successfully completed......................................
2023-08-11 12:57:34,284:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:34,284:INFO:Creating metrics dataframe
2023-08-11 12:57:34,295:INFO:Initializing Dummy Regressor
2023-08-11 12:57:34,295:INFO:Total runtime is 0.26234511931737264 minutes
2023-08-11 12:57:34,298:INFO:SubProcess create_model() called ==================================
2023-08-11 12:57:34,298:INFO:Initializing create_model()
2023-08-11 12:57:34,298:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=dummy, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d23068990>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:34,298:INFO:Checking exceptions
2023-08-11 12:57:34,298:INFO:Importing libraries
2023-08-11 12:57:34,298:INFO:Copying training dataset
2023-08-11 12:57:34,300:INFO:Defining folds
2023-08-11 12:57:34,300:INFO:Declaring metric variables
2023-08-11 12:57:34,303:INFO:Importing untrained model
2023-08-11 12:57:34,305:INFO:Dummy Regressor Imported successfully
2023-08-11 12:57:34,309:INFO:Starting cross validation
2023-08-11 12:57:34,310:INFO:Cross validating with KFold(n_splits=10, random_state=555, shuffle=True), n_jobs=-1
2023-08-11 12:57:34,693:INFO:Calculating mean and std
2023-08-11 12:57:34,695:INFO:Creating metrics dataframe
2023-08-11 12:57:34,748:INFO:Uploading results into container
2023-08-11 12:57:34,748:INFO:Uploading model into container now
2023-08-11 12:57:34,748:INFO:_master_model_container: 20
2023-08-11 12:57:34,748:INFO:_display_container: 2
2023-08-11 12:57:34,748:INFO:DummyRegressor()
2023-08-11 12:57:34,749:INFO:create_model() successfully completed......................................
2023-08-11 12:57:34,885:INFO:SubProcess create_model() end ==================================
2023-08-11 12:57:34,885:INFO:Creating metrics dataframe
2023-08-11 12:57:34,901:INFO:Initializing create_model()
2023-08-11 12:57:34,901:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22d31e50>, estimator=<catboost.core.CatBoostRegressor object at 0x7f9d21c03790>, fold=KFold(n_splits=10, random_state=555, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:57:34,901:INFO:Checking exceptions
2023-08-11 12:57:34,903:INFO:Importing libraries
2023-08-11 12:57:34,903:INFO:Copying training dataset
2023-08-11 12:57:34,904:INFO:Defining folds
2023-08-11 12:57:34,904:INFO:Declaring metric variables
2023-08-11 12:57:34,904:INFO:Importing untrained model
2023-08-11 12:57:34,904:INFO:Declaring custom model
2023-08-11 12:57:34,905:INFO:CatBoost Regressor Imported successfully
2023-08-11 12:57:34,905:INFO:Cross validation set to False
2023-08-11 12:57:34,905:INFO:Fitting Model
2023-08-11 12:57:35,248:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d22ed3cd0>
2023-08-11 12:57:35,248:INFO:create_model() successfully completed......................................
2023-08-11 12:57:35,414:INFO:_master_model_container: 20
2023-08-11 12:57:35,414:INFO:_display_container: 2
2023-08-11 12:57:35,414:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d22ed3cd0>
2023-08-11 12:57:35,414:INFO:compare_models() successfully completed......................................
2023-08-11 12:58:08,791:INFO:PyCaret RegressionExperiment
2023-08-11 12:58:08,791:INFO:Logging name: reg-default-name
2023-08-11 12:58:08,791:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 12:58:08,791:INFO:version 3.0.2
2023-08-11 12:58:08,791:INFO:Initializing setup()
2023-08-11 12:58:08,791:INFO:self.USI: 93e7
2023-08-11 12:58:08,791:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 12:58:08,791:INFO:Checking environment
2023-08-11 12:58:08,791:INFO:python_version: 3.7.13
2023-08-11 12:58:08,791:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 12:58:08,791:INFO:machine: x86_64
2023-08-11 12:58:08,791:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 12:58:08,792:INFO:Memory: svmem(total=17179869184, available=1311322112, percent=92.4, used=1760313344, free=4812800, active=1311297536, inactive=1305919488, wired=449015808)
2023-08-11 12:58:08,792:INFO:Physical Core: 8
2023-08-11 12:58:08,792:INFO:Logical Core: 8
2023-08-11 12:58:08,792:INFO:Checking libraries
2023-08-11 12:58:08,792:INFO:System:
2023-08-11 12:58:08,792:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 12:58:08,792:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 12:58:08,792:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 12:58:08,792:INFO:PyCaret required dependencies:
2023-08-11 12:58:08,792:INFO:                 pip: 22.3.1
2023-08-11 12:58:08,792:INFO:          setuptools: 63.4.1
2023-08-11 12:58:08,792:INFO:             pycaret: 3.0.2
2023-08-11 12:58:08,792:INFO:             IPython: 7.33.0
2023-08-11 12:58:08,792:INFO:          ipywidgets: 8.0.2
2023-08-11 12:58:08,792:INFO:                tqdm: 4.64.1
2023-08-11 12:58:08,792:INFO:               numpy: 1.21.5
2023-08-11 12:58:08,792:INFO:              pandas: 1.3.5
2023-08-11 12:58:08,792:INFO:              jinja2: 3.1.2
2023-08-11 12:58:08,792:INFO:               scipy: 1.7.3
2023-08-11 12:58:08,792:INFO:              joblib: 1.2.0
2023-08-11 12:58:08,792:INFO:             sklearn: 1.0.2
2023-08-11 12:58:08,792:INFO:                pyod: 1.0.9
2023-08-11 12:58:08,792:INFO:            imblearn: 0.10.1
2023-08-11 12:58:08,792:INFO:   category_encoders: 2.6.1
2023-08-11 12:58:08,792:INFO:            lightgbm: 3.3.2
2023-08-11 12:58:08,792:INFO:               numba: 0.56.2
2023-08-11 12:58:08,792:INFO:            requests: 2.28.1
2023-08-11 12:58:08,792:INFO:          matplotlib: 3.5.3
2023-08-11 12:58:08,792:INFO:          scikitplot: 0.3.7
2023-08-11 12:58:08,792:INFO:         yellowbrick: 1.5
2023-08-11 12:58:08,792:INFO:              plotly: 5.13.0
2023-08-11 12:58:08,792:INFO:             kaleido: 0.2.1
2023-08-11 12:58:08,792:INFO:         statsmodels: 0.13.2
2023-08-11 12:58:08,792:INFO:              sktime: 0.17.0
2023-08-11 12:58:08,792:INFO:               tbats: 1.1.3
2023-08-11 12:58:08,792:INFO:            pmdarima: 2.0.3
2023-08-11 12:58:08,792:INFO:              psutil: 5.9.2
2023-08-11 12:58:08,792:INFO:PyCaret optional dependencies:
2023-08-11 12:58:08,793:INFO:                shap: Not installed
2023-08-11 12:58:08,793:INFO:           interpret: Not installed
2023-08-11 12:58:08,793:INFO:                umap: 0.5.3
2023-08-11 12:58:08,793:INFO:    pandas_profiling: 3.0.0
2023-08-11 12:58:08,793:INFO:  explainerdashboard: Not installed
2023-08-11 12:58:08,793:INFO:             autoviz: Not installed
2023-08-11 12:58:08,793:INFO:           fairlearn: Not installed
2023-08-11 12:58:08,793:INFO:             xgboost: 1.6.2
2023-08-11 12:58:08,793:INFO:            catboost: 1.0.4
2023-08-11 12:58:08,793:INFO:              kmodes: 0.12.2
2023-08-11 12:58:08,793:INFO:             mlxtend: 0.19.0
2023-08-11 12:58:08,793:INFO:       statsforecast: Not installed
2023-08-11 12:58:08,793:INFO:        tune_sklearn: Not installed
2023-08-11 12:58:08,793:INFO:                 ray: Not installed
2023-08-11 12:58:08,793:INFO:            hyperopt: Not installed
2023-08-11 12:58:08,793:INFO:              optuna: Not installed
2023-08-11 12:58:08,793:INFO:               skopt: Not installed
2023-08-11 12:58:08,793:INFO:              mlflow: 1.29.0
2023-08-11 12:58:08,793:INFO:              gradio: Not installed
2023-08-11 12:58:08,793:INFO:             fastapi: Not installed
2023-08-11 12:58:08,793:INFO:             uvicorn: Not installed
2023-08-11 12:58:08,793:INFO:              m2cgen: Not installed
2023-08-11 12:58:08,793:INFO:           evidently: Not installed
2023-08-11 12:58:08,793:INFO:               fugue: Not installed
2023-08-11 12:58:08,793:INFO:           streamlit: 1.13.0
2023-08-11 12:58:08,793:INFO:             prophet: Not installed
2023-08-11 12:58:08,793:INFO:None
2023-08-11 12:58:08,793:INFO:Set up data.
2023-08-11 12:58:08,799:INFO:Set up train/test split.
2023-08-11 12:58:08,802:INFO:Set up index.
2023-08-11 12:58:08,802:INFO:Set up folding strategy.
2023-08-11 12:58:08,802:INFO:Assigning column types.
2023-08-11 12:58:08,805:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 12:58:08,805:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 12:58:08,809:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 12:58:08,813:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 12:58:08,860:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:58:08,897:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 12:58:08,897:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:58:08,899:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:58:08,900:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 12:58:08,904:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 12:58:08,907:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 12:58:08,953:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:58:08,990:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 12:58:08,990:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:58:08,992:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:58:08,992:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 12:58:08,996:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,000:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,045:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,081:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,082:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:58:09,084:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:58:09,088:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,091:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,136:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,172:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,173:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:58:09,175:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:58:09,175:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 12:58:09,182:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,227:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,263:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,264:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:58:09,266:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:58:09,273:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,318:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,354:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,354:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:58:09,356:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:58:09,357:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 12:58:09,409:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,445:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,445:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:58:09,447:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:58:09,500:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,536:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,536:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:58:09,538:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:58:09,539:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 12:58:09,591:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,627:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:58:09,629:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:58:09,682:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 12:58:09,718:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:58:09,720:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:58:09,720:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 12:58:09,808:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:58:09,810:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:58:09,901:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:58:09,903:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:58:09,904:INFO:Preparing preprocessing pipeline...
2023-08-11 12:58:09,904:INFO:Set up simple imputation.
2023-08-11 12:58:09,905:INFO:Set up column name cleaning.
2023-08-11 12:58:09,919:INFO:Finished creating preprocessing pipeline.
2023-08-11 12:58:09,922:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['n8Ring', 'Xch-4d', 'ABC',
                                             'PEOE_VSA13', 'nSpiro'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2023-08-11 12:58:09,922:INFO:Creating final display dataframe.
2023-08-11 12:58:09,972:INFO:Setup _display_container:                     Description             Value
0                    Session id                55
1                        Target               pKi
2                   Target type        Regression
3           Original data shape          (316, 6)
4        Transformed data shape          (316, 6)
5   Transformed train set shape          (221, 6)
6    Transformed test set shape           (95, 6)
7              Numeric features                 5
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              93e7
2023-08-11 12:58:10,066:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:58:10,069:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:58:10,157:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 12:58:10,159:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 12:58:10,159:INFO:setup() successfully completed in 1.42s...............
2023-08-11 12:58:12,664:INFO:Initializing compare_models()
2023-08-11 12:58:12,664:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 12:58:12,665:INFO:Checking exceptions
2023-08-11 12:58:12,668:INFO:Preparing display monitor
2023-08-11 12:58:12,721:INFO:Initializing Linear Regression
2023-08-11 12:58:12,722:INFO:Total runtime is 3.314018249511719e-06 minutes
2023-08-11 12:58:12,725:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:12,725:INFO:Initializing create_model()
2023-08-11 12:58:12,725:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=lr, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:12,725:INFO:Checking exceptions
2023-08-11 12:58:12,725:INFO:Importing libraries
2023-08-11 12:58:12,725:INFO:Copying training dataset
2023-08-11 12:58:12,728:INFO:Defining folds
2023-08-11 12:58:12,728:INFO:Declaring metric variables
2023-08-11 12:58:12,732:INFO:Importing untrained model
2023-08-11 12:58:12,735:INFO:Linear Regression Imported successfully
2023-08-11 12:58:12,741:INFO:Starting cross validation
2023-08-11 12:58:12,741:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:13,054:INFO:Calculating mean and std
2023-08-11 12:58:13,054:INFO:Creating metrics dataframe
2023-08-11 12:58:13,105:INFO:Uploading results into container
2023-08-11 12:58:13,105:INFO:Uploading model into container now
2023-08-11 12:58:13,106:INFO:_master_model_container: 1
2023-08-11 12:58:13,106:INFO:_display_container: 2
2023-08-11 12:58:13,106:INFO:LinearRegression(n_jobs=-1)
2023-08-11 12:58:13,106:INFO:create_model() successfully completed......................................
2023-08-11 12:58:13,244:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:13,244:INFO:Creating metrics dataframe
2023-08-11 12:58:13,252:INFO:Initializing Lasso Regression
2023-08-11 12:58:13,252:INFO:Total runtime is 0.008839964866638184 minutes
2023-08-11 12:58:13,254:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:13,254:INFO:Initializing create_model()
2023-08-11 12:58:13,254:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=lasso, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:13,255:INFO:Checking exceptions
2023-08-11 12:58:13,255:INFO:Importing libraries
2023-08-11 12:58:13,255:INFO:Copying training dataset
2023-08-11 12:58:13,256:INFO:Defining folds
2023-08-11 12:58:13,256:INFO:Declaring metric variables
2023-08-11 12:58:13,258:INFO:Importing untrained model
2023-08-11 12:58:13,260:INFO:Lasso Regression Imported successfully
2023-08-11 12:58:13,264:INFO:Starting cross validation
2023-08-11 12:58:13,265:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:13,581:INFO:Calculating mean and std
2023-08-11 12:58:13,581:INFO:Creating metrics dataframe
2023-08-11 12:58:13,631:INFO:Uploading results into container
2023-08-11 12:58:13,632:INFO:Uploading model into container now
2023-08-11 12:58:13,632:INFO:_master_model_container: 2
2023-08-11 12:58:13,632:INFO:_display_container: 2
2023-08-11 12:58:13,632:INFO:Lasso(random_state=55)
2023-08-11 12:58:13,632:INFO:create_model() successfully completed......................................
2023-08-11 12:58:13,767:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:13,767:INFO:Creating metrics dataframe
2023-08-11 12:58:13,775:INFO:Initializing Ridge Regression
2023-08-11 12:58:13,775:INFO:Total runtime is 0.017563331127166747 minutes
2023-08-11 12:58:13,777:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:13,777:INFO:Initializing create_model()
2023-08-11 12:58:13,777:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=ridge, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:13,777:INFO:Checking exceptions
2023-08-11 12:58:13,777:INFO:Importing libraries
2023-08-11 12:58:13,777:INFO:Copying training dataset
2023-08-11 12:58:13,780:INFO:Defining folds
2023-08-11 12:58:13,780:INFO:Declaring metric variables
2023-08-11 12:58:13,782:INFO:Importing untrained model
2023-08-11 12:58:13,784:INFO:Ridge Regression Imported successfully
2023-08-11 12:58:13,788:INFO:Starting cross validation
2023-08-11 12:58:13,789:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:14,093:INFO:Calculating mean and std
2023-08-11 12:58:14,094:INFO:Creating metrics dataframe
2023-08-11 12:58:14,146:INFO:Uploading results into container
2023-08-11 12:58:14,146:INFO:Uploading model into container now
2023-08-11 12:58:14,146:INFO:_master_model_container: 3
2023-08-11 12:58:14,146:INFO:_display_container: 2
2023-08-11 12:58:14,146:INFO:Ridge(random_state=55)
2023-08-11 12:58:14,147:INFO:create_model() successfully completed......................................
2023-08-11 12:58:14,282:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:14,282:INFO:Creating metrics dataframe
2023-08-11 12:58:14,290:INFO:Initializing Elastic Net
2023-08-11 12:58:14,290:INFO:Total runtime is 0.02615132729212443 minutes
2023-08-11 12:58:14,292:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:14,293:INFO:Initializing create_model()
2023-08-11 12:58:14,293:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=en, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:14,293:INFO:Checking exceptions
2023-08-11 12:58:14,293:INFO:Importing libraries
2023-08-11 12:58:14,293:INFO:Copying training dataset
2023-08-11 12:58:14,295:INFO:Defining folds
2023-08-11 12:58:14,295:INFO:Declaring metric variables
2023-08-11 12:58:14,297:INFO:Importing untrained model
2023-08-11 12:58:14,300:INFO:Elastic Net Imported successfully
2023-08-11 12:58:14,304:INFO:Starting cross validation
2023-08-11 12:58:14,305:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:14,627:INFO:Calculating mean and std
2023-08-11 12:58:14,628:INFO:Creating metrics dataframe
2023-08-11 12:58:14,723:INFO:Uploading results into container
2023-08-11 12:58:14,724:INFO:Uploading model into container now
2023-08-11 12:58:14,724:INFO:_master_model_container: 4
2023-08-11 12:58:14,724:INFO:_display_container: 2
2023-08-11 12:58:14,724:INFO:ElasticNet(random_state=55)
2023-08-11 12:58:14,724:INFO:create_model() successfully completed......................................
2023-08-11 12:58:14,879:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:14,879:INFO:Creating metrics dataframe
2023-08-11 12:58:14,888:INFO:Initializing Least Angle Regression
2023-08-11 12:58:14,888:INFO:Total runtime is 0.03610652685165405 minutes
2023-08-11 12:58:14,890:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:14,890:INFO:Initializing create_model()
2023-08-11 12:58:14,890:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=lar, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:14,890:INFO:Checking exceptions
2023-08-11 12:58:14,890:INFO:Importing libraries
2023-08-11 12:58:14,890:INFO:Copying training dataset
2023-08-11 12:58:14,893:INFO:Defining folds
2023-08-11 12:58:14,893:INFO:Declaring metric variables
2023-08-11 12:58:14,895:INFO:Importing untrained model
2023-08-11 12:58:14,898:INFO:Least Angle Regression Imported successfully
2023-08-11 12:58:14,903:INFO:Starting cross validation
2023-08-11 12:58:14,904:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:14,941:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:14,949:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:14,960:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:14,967:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:14,986:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:14,997:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:15,024:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:15,031:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:15,031:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:15,038:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:15,221:INFO:Calculating mean and std
2023-08-11 12:58:15,222:INFO:Creating metrics dataframe
2023-08-11 12:58:15,275:INFO:Uploading results into container
2023-08-11 12:58:15,275:INFO:Uploading model into container now
2023-08-11 12:58:15,276:INFO:_master_model_container: 5
2023-08-11 12:58:15,276:INFO:_display_container: 2
2023-08-11 12:58:15,276:INFO:Lars(random_state=55)
2023-08-11 12:58:15,276:INFO:create_model() successfully completed......................................
2023-08-11 12:58:15,413:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:15,413:INFO:Creating metrics dataframe
2023-08-11 12:58:15,421:INFO:Initializing Lasso Least Angle Regression
2023-08-11 12:58:15,421:INFO:Total runtime is 0.044999380906422935 minutes
2023-08-11 12:58:15,423:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:15,423:INFO:Initializing create_model()
2023-08-11 12:58:15,423:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=llar, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:15,424:INFO:Checking exceptions
2023-08-11 12:58:15,424:INFO:Importing libraries
2023-08-11 12:58:15,424:INFO:Copying training dataset
2023-08-11 12:58:15,426:INFO:Defining folds
2023-08-11 12:58:15,426:INFO:Declaring metric variables
2023-08-11 12:58:15,428:INFO:Importing untrained model
2023-08-11 12:58:15,430:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 12:58:15,434:INFO:Starting cross validation
2023-08-11 12:58:15,435:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:15,474:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:58:15,478:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:58:15,489:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:58:15,493:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:58:15,507:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:58:15,520:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:58:15,535:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:58:15,546:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:58:15,571:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:58:15,572:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 12:58:15,745:INFO:Calculating mean and std
2023-08-11 12:58:15,746:INFO:Creating metrics dataframe
2023-08-11 12:58:15,799:INFO:Uploading results into container
2023-08-11 12:58:15,799:INFO:Uploading model into container now
2023-08-11 12:58:15,799:INFO:_master_model_container: 6
2023-08-11 12:58:15,799:INFO:_display_container: 2
2023-08-11 12:58:15,799:INFO:LassoLars(random_state=55)
2023-08-11 12:58:15,800:INFO:create_model() successfully completed......................................
2023-08-11 12:58:15,937:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:15,938:INFO:Creating metrics dataframe
2023-08-11 12:58:15,946:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 12:58:15,946:INFO:Total runtime is 0.05374702612559001 minutes
2023-08-11 12:58:15,948:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:15,948:INFO:Initializing create_model()
2023-08-11 12:58:15,948:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=omp, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:15,948:INFO:Checking exceptions
2023-08-11 12:58:15,948:INFO:Importing libraries
2023-08-11 12:58:15,948:INFO:Copying training dataset
2023-08-11 12:58:15,951:INFO:Defining folds
2023-08-11 12:58:15,951:INFO:Declaring metric variables
2023-08-11 12:58:15,953:INFO:Importing untrained model
2023-08-11 12:58:15,955:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 12:58:15,959:INFO:Starting cross validation
2023-08-11 12:58:15,960:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:15,997:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:16,001:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:16,014:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:16,026:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:16,038:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:16,048:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:16,071:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:16,077:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:16,085:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:16,104:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 12:58:16,282:INFO:Calculating mean and std
2023-08-11 12:58:16,283:INFO:Creating metrics dataframe
2023-08-11 12:58:16,336:INFO:Uploading results into container
2023-08-11 12:58:16,336:INFO:Uploading model into container now
2023-08-11 12:58:16,336:INFO:_master_model_container: 7
2023-08-11 12:58:16,336:INFO:_display_container: 2
2023-08-11 12:58:16,337:INFO:OrthogonalMatchingPursuit()
2023-08-11 12:58:16,337:INFO:create_model() successfully completed......................................
2023-08-11 12:58:16,475:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:16,475:INFO:Creating metrics dataframe
2023-08-11 12:58:16,483:INFO:Initializing Bayesian Ridge
2023-08-11 12:58:16,483:INFO:Total runtime is 0.06270204385121664 minutes
2023-08-11 12:58:16,486:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:16,486:INFO:Initializing create_model()
2023-08-11 12:58:16,486:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=br, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:16,486:INFO:Checking exceptions
2023-08-11 12:58:16,486:INFO:Importing libraries
2023-08-11 12:58:16,486:INFO:Copying training dataset
2023-08-11 12:58:16,488:INFO:Defining folds
2023-08-11 12:58:16,488:INFO:Declaring metric variables
2023-08-11 12:58:16,490:INFO:Importing untrained model
2023-08-11 12:58:16,493:INFO:Bayesian Ridge Imported successfully
2023-08-11 12:58:16,497:INFO:Starting cross validation
2023-08-11 12:58:16,497:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:16,815:INFO:Calculating mean and std
2023-08-11 12:58:16,817:INFO:Creating metrics dataframe
2023-08-11 12:58:16,870:INFO:Uploading results into container
2023-08-11 12:58:16,870:INFO:Uploading model into container now
2023-08-11 12:58:16,870:INFO:_master_model_container: 8
2023-08-11 12:58:16,870:INFO:_display_container: 2
2023-08-11 12:58:16,870:INFO:BayesianRidge()
2023-08-11 12:58:16,870:INFO:create_model() successfully completed......................................
2023-08-11 12:58:17,007:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:17,007:INFO:Creating metrics dataframe
2023-08-11 12:58:17,016:INFO:Initializing Passive Aggressive Regressor
2023-08-11 12:58:17,016:INFO:Total runtime is 0.07157641251881917 minutes
2023-08-11 12:58:17,018:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:17,018:INFO:Initializing create_model()
2023-08-11 12:58:17,018:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=par, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:17,018:INFO:Checking exceptions
2023-08-11 12:58:17,018:INFO:Importing libraries
2023-08-11 12:58:17,018:INFO:Copying training dataset
2023-08-11 12:58:17,021:INFO:Defining folds
2023-08-11 12:58:17,021:INFO:Declaring metric variables
2023-08-11 12:58:17,023:INFO:Importing untrained model
2023-08-11 12:58:17,025:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 12:58:17,029:INFO:Starting cross validation
2023-08-11 12:58:17,030:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:17,355:INFO:Calculating mean and std
2023-08-11 12:58:17,357:INFO:Creating metrics dataframe
2023-08-11 12:58:17,409:INFO:Uploading results into container
2023-08-11 12:58:17,409:INFO:Uploading model into container now
2023-08-11 12:58:17,410:INFO:_master_model_container: 9
2023-08-11 12:58:17,410:INFO:_display_container: 2
2023-08-11 12:58:17,410:INFO:PassiveAggressiveRegressor(random_state=55)
2023-08-11 12:58:17,410:INFO:create_model() successfully completed......................................
2023-08-11 12:58:17,546:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:17,546:INFO:Creating metrics dataframe
2023-08-11 12:58:17,555:INFO:Initializing Huber Regressor
2023-08-11 12:58:17,556:INFO:Total runtime is 0.08057021299997966 minutes
2023-08-11 12:58:17,558:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:17,558:INFO:Initializing create_model()
2023-08-11 12:58:17,558:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=huber, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:17,558:INFO:Checking exceptions
2023-08-11 12:58:17,558:INFO:Importing libraries
2023-08-11 12:58:17,558:INFO:Copying training dataset
2023-08-11 12:58:17,560:INFO:Defining folds
2023-08-11 12:58:17,560:INFO:Declaring metric variables
2023-08-11 12:58:17,563:INFO:Importing untrained model
2023-08-11 12:58:17,565:INFO:Huber Regressor Imported successfully
2023-08-11 12:58:17,569:INFO:Starting cross validation
2023-08-11 12:58:17,569:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:17,883:INFO:Calculating mean and std
2023-08-11 12:58:17,884:INFO:Creating metrics dataframe
2023-08-11 12:58:17,936:INFO:Uploading results into container
2023-08-11 12:58:17,937:INFO:Uploading model into container now
2023-08-11 12:58:17,937:INFO:_master_model_container: 10
2023-08-11 12:58:17,937:INFO:_display_container: 2
2023-08-11 12:58:17,937:INFO:HuberRegressor()
2023-08-11 12:58:17,937:INFO:create_model() successfully completed......................................
2023-08-11 12:58:18,073:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:18,073:INFO:Creating metrics dataframe
2023-08-11 12:58:18,082:INFO:Initializing K Neighbors Regressor
2023-08-11 12:58:18,082:INFO:Total runtime is 0.08934251467386882 minutes
2023-08-11 12:58:18,084:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:18,084:INFO:Initializing create_model()
2023-08-11 12:58:18,084:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=knn, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:18,084:INFO:Checking exceptions
2023-08-11 12:58:18,084:INFO:Importing libraries
2023-08-11 12:58:18,084:INFO:Copying training dataset
2023-08-11 12:58:18,087:INFO:Defining folds
2023-08-11 12:58:18,087:INFO:Declaring metric variables
2023-08-11 12:58:18,089:INFO:Importing untrained model
2023-08-11 12:58:18,091:INFO:K Neighbors Regressor Imported successfully
2023-08-11 12:58:18,095:INFO:Starting cross validation
2023-08-11 12:58:18,096:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:18,514:INFO:Calculating mean and std
2023-08-11 12:58:18,515:INFO:Creating metrics dataframe
2023-08-11 12:58:18,568:INFO:Uploading results into container
2023-08-11 12:58:18,569:INFO:Uploading model into container now
2023-08-11 12:58:18,569:INFO:_master_model_container: 11
2023-08-11 12:58:18,569:INFO:_display_container: 2
2023-08-11 12:58:18,569:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 12:58:18,569:INFO:create_model() successfully completed......................................
2023-08-11 12:58:18,705:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:18,705:INFO:Creating metrics dataframe
2023-08-11 12:58:18,714:INFO:Initializing Decision Tree Regressor
2023-08-11 12:58:18,714:INFO:Total runtime is 0.09988086620966594 minutes
2023-08-11 12:58:18,716:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:18,716:INFO:Initializing create_model()
2023-08-11 12:58:18,716:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=dt, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:18,716:INFO:Checking exceptions
2023-08-11 12:58:18,716:INFO:Importing libraries
2023-08-11 12:58:18,717:INFO:Copying training dataset
2023-08-11 12:58:18,719:INFO:Defining folds
2023-08-11 12:58:18,719:INFO:Declaring metric variables
2023-08-11 12:58:18,721:INFO:Importing untrained model
2023-08-11 12:58:18,723:INFO:Decision Tree Regressor Imported successfully
2023-08-11 12:58:18,727:INFO:Starting cross validation
2023-08-11 12:58:18,728:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:19,038:INFO:Calculating mean and std
2023-08-11 12:58:19,039:INFO:Creating metrics dataframe
2023-08-11 12:58:19,091:INFO:Uploading results into container
2023-08-11 12:58:19,091:INFO:Uploading model into container now
2023-08-11 12:58:19,092:INFO:_master_model_container: 12
2023-08-11 12:58:19,092:INFO:_display_container: 2
2023-08-11 12:58:19,092:INFO:DecisionTreeRegressor(random_state=55)
2023-08-11 12:58:19,092:INFO:create_model() successfully completed......................................
2023-08-11 12:58:19,228:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:19,228:INFO:Creating metrics dataframe
2023-08-11 12:58:19,238:INFO:Initializing Random Forest Regressor
2023-08-11 12:58:19,238:INFO:Total runtime is 0.10860528151194254 minutes
2023-08-11 12:58:19,240:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:19,240:INFO:Initializing create_model()
2023-08-11 12:58:19,240:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=rf, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:19,240:INFO:Checking exceptions
2023-08-11 12:58:19,240:INFO:Importing libraries
2023-08-11 12:58:19,240:INFO:Copying training dataset
2023-08-11 12:58:19,242:INFO:Defining folds
2023-08-11 12:58:19,242:INFO:Declaring metric variables
2023-08-11 12:58:19,245:INFO:Importing untrained model
2023-08-11 12:58:19,247:INFO:Random Forest Regressor Imported successfully
2023-08-11 12:58:19,251:INFO:Starting cross validation
2023-08-11 12:58:19,251:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:20,108:INFO:Calculating mean and std
2023-08-11 12:58:20,110:INFO:Creating metrics dataframe
2023-08-11 12:58:20,168:INFO:Uploading results into container
2023-08-11 12:58:20,169:INFO:Uploading model into container now
2023-08-11 12:58:20,169:INFO:_master_model_container: 13
2023-08-11 12:58:20,169:INFO:_display_container: 2
2023-08-11 12:58:20,169:INFO:RandomForestRegressor(n_jobs=-1, random_state=55)
2023-08-11 12:58:20,169:INFO:create_model() successfully completed......................................
2023-08-11 12:58:20,305:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:20,305:INFO:Creating metrics dataframe
2023-08-11 12:58:20,315:INFO:Initializing Extra Trees Regressor
2023-08-11 12:58:20,315:INFO:Total runtime is 0.1265605330467224 minutes
2023-08-11 12:58:20,317:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:20,317:INFO:Initializing create_model()
2023-08-11 12:58:20,317:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=et, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:20,317:INFO:Checking exceptions
2023-08-11 12:58:20,317:INFO:Importing libraries
2023-08-11 12:58:20,317:INFO:Copying training dataset
2023-08-11 12:58:20,320:INFO:Defining folds
2023-08-11 12:58:20,320:INFO:Declaring metric variables
2023-08-11 12:58:20,322:INFO:Importing untrained model
2023-08-11 12:58:20,324:INFO:Extra Trees Regressor Imported successfully
2023-08-11 12:58:20,328:INFO:Starting cross validation
2023-08-11 12:58:20,329:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:21,193:INFO:Calculating mean and std
2023-08-11 12:58:21,195:INFO:Creating metrics dataframe
2023-08-11 12:58:21,251:INFO:Uploading results into container
2023-08-11 12:58:21,251:INFO:Uploading model into container now
2023-08-11 12:58:21,251:INFO:_master_model_container: 14
2023-08-11 12:58:21,252:INFO:_display_container: 2
2023-08-11 12:58:21,252:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=55)
2023-08-11 12:58:21,252:INFO:create_model() successfully completed......................................
2023-08-11 12:58:21,388:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:21,388:INFO:Creating metrics dataframe
2023-08-11 12:58:21,398:INFO:Initializing AdaBoost Regressor
2023-08-11 12:58:21,398:INFO:Total runtime is 0.14461429516474406 minutes
2023-08-11 12:58:21,400:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:21,400:INFO:Initializing create_model()
2023-08-11 12:58:21,400:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=ada, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:21,400:INFO:Checking exceptions
2023-08-11 12:58:21,401:INFO:Importing libraries
2023-08-11 12:58:21,401:INFO:Copying training dataset
2023-08-11 12:58:21,403:INFO:Defining folds
2023-08-11 12:58:21,403:INFO:Declaring metric variables
2023-08-11 12:58:21,405:INFO:Importing untrained model
2023-08-11 12:58:21,407:INFO:AdaBoost Regressor Imported successfully
2023-08-11 12:58:21,412:INFO:Starting cross validation
2023-08-11 12:58:21,412:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:21,770:INFO:Calculating mean and std
2023-08-11 12:58:21,771:INFO:Creating metrics dataframe
2023-08-11 12:58:21,828:INFO:Uploading results into container
2023-08-11 12:58:21,828:INFO:Uploading model into container now
2023-08-11 12:58:21,828:INFO:_master_model_container: 15
2023-08-11 12:58:21,828:INFO:_display_container: 2
2023-08-11 12:58:21,828:INFO:AdaBoostRegressor(random_state=55)
2023-08-11 12:58:21,828:INFO:create_model() successfully completed......................................
2023-08-11 12:58:21,964:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:21,964:INFO:Creating metrics dataframe
2023-08-11 12:58:21,974:INFO:Initializing Gradient Boosting Regressor
2023-08-11 12:58:21,974:INFO:Total runtime is 0.1542134960492452 minutes
2023-08-11 12:58:21,976:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:21,976:INFO:Initializing create_model()
2023-08-11 12:58:21,976:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=gbr, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:21,976:INFO:Checking exceptions
2023-08-11 12:58:21,977:INFO:Importing libraries
2023-08-11 12:58:21,977:INFO:Copying training dataset
2023-08-11 12:58:21,979:INFO:Defining folds
2023-08-11 12:58:21,979:INFO:Declaring metric variables
2023-08-11 12:58:21,981:INFO:Importing untrained model
2023-08-11 12:58:21,983:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 12:58:21,987:INFO:Starting cross validation
2023-08-11 12:58:21,988:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:22,375:INFO:Calculating mean and std
2023-08-11 12:58:22,376:INFO:Creating metrics dataframe
2023-08-11 12:58:22,432:INFO:Uploading results into container
2023-08-11 12:58:22,433:INFO:Uploading model into container now
2023-08-11 12:58:22,433:INFO:_master_model_container: 16
2023-08-11 12:58:22,433:INFO:_display_container: 2
2023-08-11 12:58:22,433:INFO:GradientBoostingRegressor(random_state=55)
2023-08-11 12:58:22,433:INFO:create_model() successfully completed......................................
2023-08-11 12:58:22,568:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:22,568:INFO:Creating metrics dataframe
2023-08-11 12:58:22,578:INFO:Initializing Extreme Gradient Boosting
2023-08-11 12:58:22,579:INFO:Total runtime is 0.16428754727045694 minutes
2023-08-11 12:58:22,581:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:22,581:INFO:Initializing create_model()
2023-08-11 12:58:22,581:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=xgboost, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:22,581:INFO:Checking exceptions
2023-08-11 12:58:22,581:INFO:Importing libraries
2023-08-11 12:58:22,581:INFO:Copying training dataset
2023-08-11 12:58:22,583:INFO:Defining folds
2023-08-11 12:58:22,583:INFO:Declaring metric variables
2023-08-11 12:58:22,586:INFO:Importing untrained model
2023-08-11 12:58:22,588:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 12:58:22,592:INFO:Starting cross validation
2023-08-11 12:58:22,592:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:22,953:INFO:Calculating mean and std
2023-08-11 12:58:22,955:INFO:Creating metrics dataframe
2023-08-11 12:58:23,010:INFO:Uploading results into container
2023-08-11 12:58:23,011:INFO:Uploading model into container now
2023-08-11 12:58:23,011:INFO:_master_model_container: 17
2023-08-11 12:58:23,011:INFO:_display_container: 2
2023-08-11 12:58:23,011:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=55,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 12:58:23,011:INFO:create_model() successfully completed......................................
2023-08-11 12:58:23,147:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:23,147:INFO:Creating metrics dataframe
2023-08-11 12:58:23,158:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 12:58:23,158:INFO:Total runtime is 0.17393929560979207 minutes
2023-08-11 12:58:23,160:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:23,160:INFO:Initializing create_model()
2023-08-11 12:58:23,160:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:23,160:INFO:Checking exceptions
2023-08-11 12:58:23,160:INFO:Importing libraries
2023-08-11 12:58:23,160:INFO:Copying training dataset
2023-08-11 12:58:23,162:INFO:Defining folds
2023-08-11 12:58:23,162:INFO:Declaring metric variables
2023-08-11 12:58:23,165:INFO:Importing untrained model
2023-08-11 12:58:23,167:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 12:58:23,171:INFO:Starting cross validation
2023-08-11 12:58:23,171:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:23,512:INFO:Calculating mean and std
2023-08-11 12:58:23,513:INFO:Creating metrics dataframe
2023-08-11 12:58:23,569:INFO:Uploading results into container
2023-08-11 12:58:23,569:INFO:Uploading model into container now
2023-08-11 12:58:23,569:INFO:_master_model_container: 18
2023-08-11 12:58:23,569:INFO:_display_container: 2
2023-08-11 12:58:23,569:INFO:LGBMRegressor(random_state=55)
2023-08-11 12:58:23,570:INFO:create_model() successfully completed......................................
2023-08-11 12:58:23,705:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:23,705:INFO:Creating metrics dataframe
2023-08-11 12:58:23,715:INFO:Initializing CatBoost Regressor
2023-08-11 12:58:23,715:INFO:Total runtime is 0.1832356651624044 minutes
2023-08-11 12:58:23,717:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:23,718:INFO:Initializing create_model()
2023-08-11 12:58:23,718:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=catboost, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:23,718:INFO:Checking exceptions
2023-08-11 12:58:23,718:INFO:Importing libraries
2023-08-11 12:58:23,718:INFO:Copying training dataset
2023-08-11 12:58:23,720:INFO:Defining folds
2023-08-11 12:58:23,720:INFO:Declaring metric variables
2023-08-11 12:58:23,722:INFO:Importing untrained model
2023-08-11 12:58:23,725:INFO:CatBoost Regressor Imported successfully
2023-08-11 12:58:23,729:INFO:Starting cross validation
2023-08-11 12:58:23,729:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:24,542:INFO:Calculating mean and std
2023-08-11 12:58:24,543:INFO:Creating metrics dataframe
2023-08-11 12:58:24,603:INFO:Uploading results into container
2023-08-11 12:58:24,603:INFO:Uploading model into container now
2023-08-11 12:58:24,604:INFO:_master_model_container: 19
2023-08-11 12:58:24,604:INFO:_display_container: 2
2023-08-11 12:58:24,604:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d4440f650>
2023-08-11 12:58:24,604:INFO:create_model() successfully completed......................................
2023-08-11 12:58:24,740:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:24,740:INFO:Creating metrics dataframe
2023-08-11 12:58:24,750:INFO:Initializing Dummy Regressor
2023-08-11 12:58:24,750:INFO:Total runtime is 0.2004836122194926 minutes
2023-08-11 12:58:24,752:INFO:SubProcess create_model() called ==================================
2023-08-11 12:58:24,752:INFO:Initializing create_model()
2023-08-11 12:58:24,752:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=dummy, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d22ca8fd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:24,753:INFO:Checking exceptions
2023-08-11 12:58:24,753:INFO:Importing libraries
2023-08-11 12:58:24,753:INFO:Copying training dataset
2023-08-11 12:58:24,755:INFO:Defining folds
2023-08-11 12:58:24,755:INFO:Declaring metric variables
2023-08-11 12:58:24,757:INFO:Importing untrained model
2023-08-11 12:58:24,759:INFO:Dummy Regressor Imported successfully
2023-08-11 12:58:24,763:INFO:Starting cross validation
2023-08-11 12:58:24,764:INFO:Cross validating with KFold(n_splits=10, random_state=55, shuffle=True), n_jobs=-1
2023-08-11 12:58:25,103:INFO:Calculating mean and std
2023-08-11 12:58:25,104:INFO:Creating metrics dataframe
2023-08-11 12:58:25,163:INFO:Uploading results into container
2023-08-11 12:58:25,164:INFO:Uploading model into container now
2023-08-11 12:58:25,164:INFO:_master_model_container: 20
2023-08-11 12:58:25,164:INFO:_display_container: 2
2023-08-11 12:58:25,164:INFO:DummyRegressor()
2023-08-11 12:58:25,164:INFO:create_model() successfully completed......................................
2023-08-11 12:58:25,300:INFO:SubProcess create_model() end ==================================
2023-08-11 12:58:25,300:INFO:Creating metrics dataframe
2023-08-11 12:58:25,317:INFO:Initializing create_model()
2023-08-11 12:58:25,317:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8ba50>, estimator=<catboost.core.CatBoostRegressor object at 0x7f9d4440f650>, fold=KFold(n_splits=10, random_state=55, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 12:58:25,317:INFO:Checking exceptions
2023-08-11 12:58:25,318:INFO:Importing libraries
2023-08-11 12:58:25,318:INFO:Copying training dataset
2023-08-11 12:58:25,320:INFO:Defining folds
2023-08-11 12:58:25,320:INFO:Declaring metric variables
2023-08-11 12:58:25,320:INFO:Importing untrained model
2023-08-11 12:58:25,320:INFO:Declaring custom model
2023-08-11 12:58:25,320:INFO:CatBoost Regressor Imported successfully
2023-08-11 12:58:25,321:INFO:Cross validation set to False
2023-08-11 12:58:25,321:INFO:Fitting Model
2023-08-11 12:58:25,588:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d22d2ccd0>
2023-08-11 12:58:25,588:INFO:create_model() successfully completed......................................
2023-08-11 12:58:25,753:INFO:_master_model_container: 20
2023-08-11 12:58:25,753:INFO:_display_container: 2
2023-08-11 12:58:25,753:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d22d2ccd0>
2023-08-11 12:58:25,753:INFO:compare_models() successfully completed......................................
2023-08-11 13:00:05,129:INFO:PyCaret RegressionExperiment
2023-08-11 13:00:05,130:INFO:Logging name: reg-default-name
2023-08-11 13:00:05,130:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 13:00:05,130:INFO:version 3.0.2
2023-08-11 13:00:05,130:INFO:Initializing setup()
2023-08-11 13:00:05,130:INFO:self.USI: df75
2023-08-11 13:00:05,130:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 13:00:05,130:INFO:Checking environment
2023-08-11 13:00:05,130:INFO:python_version: 3.7.13
2023-08-11 13:00:05,131:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 13:00:05,131:INFO:machine: x86_64
2023-08-11 13:00:05,131:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 13:00:05,131:INFO:Memory: svmem(total=17179869184, available=1281998848, percent=92.5, used=1688219648, free=45432832, active=1241903104, inactive=1234563072, wired=446316544)
2023-08-11 13:00:05,131:INFO:Physical Core: 8
2023-08-11 13:00:05,131:INFO:Logical Core: 8
2023-08-11 13:00:05,131:INFO:Checking libraries
2023-08-11 13:00:05,131:INFO:System:
2023-08-11 13:00:05,131:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 13:00:05,131:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 13:00:05,131:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 13:00:05,131:INFO:PyCaret required dependencies:
2023-08-11 13:00:05,131:INFO:                 pip: 22.3.1
2023-08-11 13:00:05,131:INFO:          setuptools: 63.4.1
2023-08-11 13:00:05,131:INFO:             pycaret: 3.0.2
2023-08-11 13:00:05,131:INFO:             IPython: 7.33.0
2023-08-11 13:00:05,131:INFO:          ipywidgets: 8.0.2
2023-08-11 13:00:05,131:INFO:                tqdm: 4.64.1
2023-08-11 13:00:05,131:INFO:               numpy: 1.21.5
2023-08-11 13:00:05,131:INFO:              pandas: 1.3.5
2023-08-11 13:00:05,131:INFO:              jinja2: 3.1.2
2023-08-11 13:00:05,131:INFO:               scipy: 1.7.3
2023-08-11 13:00:05,131:INFO:              joblib: 1.2.0
2023-08-11 13:00:05,131:INFO:             sklearn: 1.0.2
2023-08-11 13:00:05,131:INFO:                pyod: 1.0.9
2023-08-11 13:00:05,131:INFO:            imblearn: 0.10.1
2023-08-11 13:00:05,131:INFO:   category_encoders: 2.6.1
2023-08-11 13:00:05,131:INFO:            lightgbm: 3.3.2
2023-08-11 13:00:05,131:INFO:               numba: 0.56.2
2023-08-11 13:00:05,131:INFO:            requests: 2.28.1
2023-08-11 13:00:05,131:INFO:          matplotlib: 3.5.3
2023-08-11 13:00:05,132:INFO:          scikitplot: 0.3.7
2023-08-11 13:00:05,132:INFO:         yellowbrick: 1.5
2023-08-11 13:00:05,132:INFO:              plotly: 5.13.0
2023-08-11 13:00:05,132:INFO:             kaleido: 0.2.1
2023-08-11 13:00:05,132:INFO:         statsmodels: 0.13.2
2023-08-11 13:00:05,132:INFO:              sktime: 0.17.0
2023-08-11 13:00:05,132:INFO:               tbats: 1.1.3
2023-08-11 13:00:05,132:INFO:            pmdarima: 2.0.3
2023-08-11 13:00:05,132:INFO:              psutil: 5.9.2
2023-08-11 13:00:05,132:INFO:PyCaret optional dependencies:
2023-08-11 13:00:05,132:INFO:                shap: Not installed
2023-08-11 13:00:05,132:INFO:           interpret: Not installed
2023-08-11 13:00:05,132:INFO:                umap: 0.5.3
2023-08-11 13:00:05,132:INFO:    pandas_profiling: 3.0.0
2023-08-11 13:00:05,132:INFO:  explainerdashboard: Not installed
2023-08-11 13:00:05,132:INFO:             autoviz: Not installed
2023-08-11 13:00:05,132:INFO:           fairlearn: Not installed
2023-08-11 13:00:05,132:INFO:             xgboost: 1.6.2
2023-08-11 13:00:05,132:INFO:            catboost: 1.0.4
2023-08-11 13:00:05,132:INFO:              kmodes: 0.12.2
2023-08-11 13:00:05,132:INFO:             mlxtend: 0.19.0
2023-08-11 13:00:05,132:INFO:       statsforecast: Not installed
2023-08-11 13:00:05,132:INFO:        tune_sklearn: Not installed
2023-08-11 13:00:05,132:INFO:                 ray: Not installed
2023-08-11 13:00:05,132:INFO:            hyperopt: Not installed
2023-08-11 13:00:05,132:INFO:              optuna: Not installed
2023-08-11 13:00:05,132:INFO:               skopt: Not installed
2023-08-11 13:00:05,132:INFO:              mlflow: 1.29.0
2023-08-11 13:00:05,132:INFO:              gradio: Not installed
2023-08-11 13:00:05,132:INFO:             fastapi: Not installed
2023-08-11 13:00:05,132:INFO:             uvicorn: Not installed
2023-08-11 13:00:05,132:INFO:              m2cgen: Not installed
2023-08-11 13:00:05,132:INFO:           evidently: Not installed
2023-08-11 13:00:05,132:INFO:               fugue: Not installed
2023-08-11 13:00:05,132:INFO:           streamlit: 1.13.0
2023-08-11 13:00:05,132:INFO:             prophet: Not installed
2023-08-11 13:00:05,132:INFO:None
2023-08-11 13:00:05,132:INFO:Set up data.
2023-08-11 13:00:05,137:INFO:Set up train/test split.
2023-08-11 13:00:05,139:INFO:Set up index.
2023-08-11 13:00:05,139:INFO:Set up folding strategy.
2023-08-11 13:00:05,139:INFO:Assigning column types.
2023-08-11 13:00:05,143:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 13:00:05,143:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,147:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,151:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,197:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,233:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,233:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:05,236:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:05,236:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,240:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,243:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,288:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,324:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,324:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:05,326:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:05,327:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 13:00:05,330:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,334:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,380:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,416:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,416:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:05,418:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:05,422:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,426:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,471:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,507:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,507:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:05,509:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:05,510:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 13:00:05,517:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,562:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,598:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,598:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:05,600:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:05,608:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,653:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,689:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,689:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:05,691:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:05,692:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 13:00:05,744:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,779:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,780:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:05,782:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:05,834:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,870:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,870:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:05,872:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:05,873:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 13:00:05,925:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:05,961:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:05,963:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:06,016:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:06,052:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:06,054:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:06,054:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 13:00:06,143:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:06,145:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:06,237:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:06,240:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:06,240:INFO:Preparing preprocessing pipeline...
2023-08-11 13:00:06,240:INFO:Set up simple imputation.
2023-08-11 13:00:06,241:INFO:Set up column name cleaning.
2023-08-11 13:00:06,257:INFO:Finished creating preprocessing pipeline.
2023-08-11 13:00:06,260:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['n8Ring', 'Xch-4d', 'ABC',
                                             'PEOE_VSA13', 'nSpiro'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2023-08-11 13:00:06,260:INFO:Creating final display dataframe.
2023-08-11 13:00:06,312:INFO:Setup _display_container:                     Description             Value
0                    Session id                55
1                        Target               pKi
2                   Target type        Regression
3           Original data shape          (316, 6)
4        Transformed data shape          (316, 6)
5   Transformed train set shape          (221, 6)
6    Transformed test set shape           (95, 6)
7              Numeric features                 5
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              df75
2023-08-11 13:00:06,408:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:06,410:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:06,499:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:06,501:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:06,502:INFO:setup() successfully completed in 1.44s...............
2023-08-11 13:00:06,530:INFO:Initializing compare_models()
2023-08-11 13:00:06,531:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 13:00:06,531:INFO:Checking exceptions
2023-08-11 13:00:06,532:INFO:Preparing display monitor
2023-08-11 13:00:06,557:INFO:Initializing Linear Regression
2023-08-11 13:00:06,557:INFO:Total runtime is 3.8027763366699217e-06 minutes
2023-08-11 13:00:06,560:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:06,560:INFO:Initializing create_model()
2023-08-11 13:00:06,560:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:06,560:INFO:Checking exceptions
2023-08-11 13:00:06,560:INFO:Importing libraries
2023-08-11 13:00:06,560:INFO:Copying training dataset
2023-08-11 13:00:06,562:INFO:Defining folds
2023-08-11 13:00:06,562:INFO:Declaring metric variables
2023-08-11 13:00:06,565:INFO:Importing untrained model
2023-08-11 13:00:06,567:INFO:Linear Regression Imported successfully
2023-08-11 13:00:06,571:INFO:Starting cross validation
2023-08-11 13:00:06,572:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:06,914:INFO:Calculating mean and std
2023-08-11 13:00:06,914:INFO:Creating metrics dataframe
2023-08-11 13:00:06,971:INFO:Uploading results into container
2023-08-11 13:00:06,971:INFO:Uploading model into container now
2023-08-11 13:00:06,972:INFO:_master_model_container: 1
2023-08-11 13:00:06,972:INFO:_display_container: 2
2023-08-11 13:00:06,972:INFO:LinearRegression(n_jobs=-1)
2023-08-11 13:00:06,972:INFO:create_model() successfully completed......................................
2023-08-11 13:00:07,134:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:07,134:INFO:Creating metrics dataframe
2023-08-11 13:00:07,142:INFO:Initializing Lasso Regression
2023-08-11 13:00:07,142:INFO:Total runtime is 0.009749098618825275 minutes
2023-08-11 13:00:07,144:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:07,144:INFO:Initializing create_model()
2023-08-11 13:00:07,144:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:07,144:INFO:Checking exceptions
2023-08-11 13:00:07,144:INFO:Importing libraries
2023-08-11 13:00:07,144:INFO:Copying training dataset
2023-08-11 13:00:07,146:INFO:Defining folds
2023-08-11 13:00:07,146:INFO:Declaring metric variables
2023-08-11 13:00:07,148:INFO:Importing untrained model
2023-08-11 13:00:07,150:INFO:Lasso Regression Imported successfully
2023-08-11 13:00:07,154:INFO:Starting cross validation
2023-08-11 13:00:07,154:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:07,491:INFO:Calculating mean and std
2023-08-11 13:00:07,491:INFO:Creating metrics dataframe
2023-08-11 13:00:07,549:INFO:Uploading results into container
2023-08-11 13:00:07,549:INFO:Uploading model into container now
2023-08-11 13:00:07,549:INFO:_master_model_container: 2
2023-08-11 13:00:07,549:INFO:_display_container: 2
2023-08-11 13:00:07,550:INFO:Lasso(random_state=55)
2023-08-11 13:00:07,550:INFO:create_model() successfully completed......................................
2023-08-11 13:00:07,689:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:07,689:INFO:Creating metrics dataframe
2023-08-11 13:00:07,697:INFO:Initializing Ridge Regression
2023-08-11 13:00:07,697:INFO:Total runtime is 0.019003665447235106 minutes
2023-08-11 13:00:07,699:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:07,699:INFO:Initializing create_model()
2023-08-11 13:00:07,699:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:07,699:INFO:Checking exceptions
2023-08-11 13:00:07,699:INFO:Importing libraries
2023-08-11 13:00:07,700:INFO:Copying training dataset
2023-08-11 13:00:07,702:INFO:Defining folds
2023-08-11 13:00:07,702:INFO:Declaring metric variables
2023-08-11 13:00:07,704:INFO:Importing untrained model
2023-08-11 13:00:07,706:INFO:Ridge Regression Imported successfully
2023-08-11 13:00:07,710:INFO:Starting cross validation
2023-08-11 13:00:07,711:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:08,046:INFO:Calculating mean and std
2023-08-11 13:00:08,047:INFO:Creating metrics dataframe
2023-08-11 13:00:08,106:INFO:Uploading results into container
2023-08-11 13:00:08,107:INFO:Uploading model into container now
2023-08-11 13:00:08,107:INFO:_master_model_container: 3
2023-08-11 13:00:08,107:INFO:_display_container: 2
2023-08-11 13:00:08,107:INFO:Ridge(random_state=55)
2023-08-11 13:00:08,107:INFO:create_model() successfully completed......................................
2023-08-11 13:00:08,246:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:08,246:INFO:Creating metrics dataframe
2023-08-11 13:00:08,254:INFO:Initializing Elastic Net
2023-08-11 13:00:08,254:INFO:Total runtime is 0.028281784057617186 minutes
2023-08-11 13:00:08,256:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:08,256:INFO:Initializing create_model()
2023-08-11 13:00:08,256:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:08,256:INFO:Checking exceptions
2023-08-11 13:00:08,256:INFO:Importing libraries
2023-08-11 13:00:08,256:INFO:Copying training dataset
2023-08-11 13:00:08,259:INFO:Defining folds
2023-08-11 13:00:08,259:INFO:Declaring metric variables
2023-08-11 13:00:08,261:INFO:Importing untrained model
2023-08-11 13:00:08,263:INFO:Elastic Net Imported successfully
2023-08-11 13:00:08,268:INFO:Starting cross validation
2023-08-11 13:00:08,268:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:08,663:INFO:Calculating mean and std
2023-08-11 13:00:08,664:INFO:Creating metrics dataframe
2023-08-11 13:00:08,723:INFO:Uploading results into container
2023-08-11 13:00:08,723:INFO:Uploading model into container now
2023-08-11 13:00:08,723:INFO:_master_model_container: 4
2023-08-11 13:00:08,723:INFO:_display_container: 2
2023-08-11 13:00:08,724:INFO:ElasticNet(random_state=55)
2023-08-11 13:00:08,724:INFO:create_model() successfully completed......................................
2023-08-11 13:00:08,859:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:08,859:INFO:Creating metrics dataframe
2023-08-11 13:00:08,867:INFO:Initializing Least Angle Regression
2023-08-11 13:00:08,868:INFO:Total runtime is 0.03850871721903483 minutes
2023-08-11 13:00:08,870:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:08,870:INFO:Initializing create_model()
2023-08-11 13:00:08,870:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:08,870:INFO:Checking exceptions
2023-08-11 13:00:08,870:INFO:Importing libraries
2023-08-11 13:00:08,870:INFO:Copying training dataset
2023-08-11 13:00:08,872:INFO:Defining folds
2023-08-11 13:00:08,872:INFO:Declaring metric variables
2023-08-11 13:00:08,874:INFO:Importing untrained model
2023-08-11 13:00:08,877:INFO:Least Angle Regression Imported successfully
2023-08-11 13:00:08,881:INFO:Starting cross validation
2023-08-11 13:00:08,881:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:08,921:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:08,929:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:08,930:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:08,949:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:08,967:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:08,969:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:08,981:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:08,983:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:09,034:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:09,040:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:09,220:INFO:Calculating mean and std
2023-08-11 13:00:09,222:INFO:Creating metrics dataframe
2023-08-11 13:00:09,280:INFO:Uploading results into container
2023-08-11 13:00:09,280:INFO:Uploading model into container now
2023-08-11 13:00:09,280:INFO:_master_model_container: 5
2023-08-11 13:00:09,280:INFO:_display_container: 2
2023-08-11 13:00:09,281:INFO:Lars(random_state=55)
2023-08-11 13:00:09,281:INFO:create_model() successfully completed......................................
2023-08-11 13:00:09,419:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:09,419:INFO:Creating metrics dataframe
2023-08-11 13:00:09,427:INFO:Initializing Lasso Least Angle Regression
2023-08-11 13:00:09,427:INFO:Total runtime is 0.047840829690297446 minutes
2023-08-11 13:00:09,430:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:09,430:INFO:Initializing create_model()
2023-08-11 13:00:09,430:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:09,430:INFO:Checking exceptions
2023-08-11 13:00:09,430:INFO:Importing libraries
2023-08-11 13:00:09,430:INFO:Copying training dataset
2023-08-11 13:00:09,432:INFO:Defining folds
2023-08-11 13:00:09,432:INFO:Declaring metric variables
2023-08-11 13:00:09,435:INFO:Importing untrained model
2023-08-11 13:00:09,437:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 13:00:09,441:INFO:Starting cross validation
2023-08-11 13:00:09,442:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:09,481:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:09,498:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:09,501:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:09,508:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:09,528:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:09,541:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:09,551:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:09,555:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:09,585:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:09,589:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:09,797:INFO:Calculating mean and std
2023-08-11 13:00:09,798:INFO:Creating metrics dataframe
2023-08-11 13:00:09,856:INFO:Uploading results into container
2023-08-11 13:00:09,857:INFO:Uploading model into container now
2023-08-11 13:00:09,857:INFO:_master_model_container: 6
2023-08-11 13:00:09,857:INFO:_display_container: 2
2023-08-11 13:00:09,857:INFO:LassoLars(random_state=55)
2023-08-11 13:00:09,857:INFO:create_model() successfully completed......................................
2023-08-11 13:00:09,993:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:09,993:INFO:Creating metrics dataframe
2023-08-11 13:00:10,002:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 13:00:10,002:INFO:Total runtime is 0.057412866751352945 minutes
2023-08-11 13:00:10,004:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:10,004:INFO:Initializing create_model()
2023-08-11 13:00:10,004:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:10,004:INFO:Checking exceptions
2023-08-11 13:00:10,004:INFO:Importing libraries
2023-08-11 13:00:10,004:INFO:Copying training dataset
2023-08-11 13:00:10,006:INFO:Defining folds
2023-08-11 13:00:10,007:INFO:Declaring metric variables
2023-08-11 13:00:10,009:INFO:Importing untrained model
2023-08-11 13:00:10,011:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 13:00:10,015:INFO:Starting cross validation
2023-08-11 13:00:10,015:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:10,056:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:10,064:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:10,066:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:10,080:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:10,087:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:10,105:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:10,108:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:10,110:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:10,158:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:10,162:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:10,367:INFO:Calculating mean and std
2023-08-11 13:00:10,368:INFO:Creating metrics dataframe
2023-08-11 13:00:10,426:INFO:Uploading results into container
2023-08-11 13:00:10,426:INFO:Uploading model into container now
2023-08-11 13:00:10,426:INFO:_master_model_container: 7
2023-08-11 13:00:10,426:INFO:_display_container: 2
2023-08-11 13:00:10,426:INFO:OrthogonalMatchingPursuit()
2023-08-11 13:00:10,426:INFO:create_model() successfully completed......................................
2023-08-11 13:00:10,563:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:10,563:INFO:Creating metrics dataframe
2023-08-11 13:00:10,572:INFO:Initializing Bayesian Ridge
2023-08-11 13:00:10,572:INFO:Total runtime is 0.06691035032272338 minutes
2023-08-11 13:00:10,574:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:10,574:INFO:Initializing create_model()
2023-08-11 13:00:10,574:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:10,574:INFO:Checking exceptions
2023-08-11 13:00:10,574:INFO:Importing libraries
2023-08-11 13:00:10,574:INFO:Copying training dataset
2023-08-11 13:00:10,576:INFO:Defining folds
2023-08-11 13:00:10,576:INFO:Declaring metric variables
2023-08-11 13:00:10,578:INFO:Importing untrained model
2023-08-11 13:00:10,581:INFO:Bayesian Ridge Imported successfully
2023-08-11 13:00:10,585:INFO:Starting cross validation
2023-08-11 13:00:10,585:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:10,928:INFO:Calculating mean and std
2023-08-11 13:00:10,929:INFO:Creating metrics dataframe
2023-08-11 13:00:10,988:INFO:Uploading results into container
2023-08-11 13:00:10,988:INFO:Uploading model into container now
2023-08-11 13:00:10,988:INFO:_master_model_container: 8
2023-08-11 13:00:10,988:INFO:_display_container: 2
2023-08-11 13:00:10,988:INFO:BayesianRidge()
2023-08-11 13:00:10,988:INFO:create_model() successfully completed......................................
2023-08-11 13:00:11,123:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:11,123:INFO:Creating metrics dataframe
2023-08-11 13:00:11,132:INFO:Initializing Passive Aggressive Regressor
2023-08-11 13:00:11,132:INFO:Total runtime is 0.07625504732131957 minutes
2023-08-11 13:00:11,134:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:11,135:INFO:Initializing create_model()
2023-08-11 13:00:11,135:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:11,135:INFO:Checking exceptions
2023-08-11 13:00:11,135:INFO:Importing libraries
2023-08-11 13:00:11,135:INFO:Copying training dataset
2023-08-11 13:00:11,137:INFO:Defining folds
2023-08-11 13:00:11,137:INFO:Declaring metric variables
2023-08-11 13:00:11,139:INFO:Importing untrained model
2023-08-11 13:00:11,141:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 13:00:11,146:INFO:Starting cross validation
2023-08-11 13:00:11,146:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:11,480:INFO:Calculating mean and std
2023-08-11 13:00:11,481:INFO:Creating metrics dataframe
2023-08-11 13:00:11,539:INFO:Uploading results into container
2023-08-11 13:00:11,539:INFO:Uploading model into container now
2023-08-11 13:00:11,539:INFO:_master_model_container: 9
2023-08-11 13:00:11,539:INFO:_display_container: 2
2023-08-11 13:00:11,539:INFO:PassiveAggressiveRegressor(random_state=55)
2023-08-11 13:00:11,539:INFO:create_model() successfully completed......................................
2023-08-11 13:00:11,676:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:11,676:INFO:Creating metrics dataframe
2023-08-11 13:00:11,685:INFO:Initializing Huber Regressor
2023-08-11 13:00:11,685:INFO:Total runtime is 0.08546663125356038 minutes
2023-08-11 13:00:11,687:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:11,687:INFO:Initializing create_model()
2023-08-11 13:00:11,687:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:11,687:INFO:Checking exceptions
2023-08-11 13:00:11,687:INFO:Importing libraries
2023-08-11 13:00:11,687:INFO:Copying training dataset
2023-08-11 13:00:11,690:INFO:Defining folds
2023-08-11 13:00:11,690:INFO:Declaring metric variables
2023-08-11 13:00:11,692:INFO:Importing untrained model
2023-08-11 13:00:11,694:INFO:Huber Regressor Imported successfully
2023-08-11 13:00:11,698:INFO:Starting cross validation
2023-08-11 13:00:11,699:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:12,046:INFO:Calculating mean and std
2023-08-11 13:00:12,047:INFO:Creating metrics dataframe
2023-08-11 13:00:12,106:INFO:Uploading results into container
2023-08-11 13:00:12,106:INFO:Uploading model into container now
2023-08-11 13:00:12,106:INFO:_master_model_container: 10
2023-08-11 13:00:12,106:INFO:_display_container: 2
2023-08-11 13:00:12,106:INFO:HuberRegressor()
2023-08-11 13:00:12,106:INFO:create_model() successfully completed......................................
2023-08-11 13:00:12,243:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:12,244:INFO:Creating metrics dataframe
2023-08-11 13:00:12,253:INFO:Initializing K Neighbors Regressor
2023-08-11 13:00:12,253:INFO:Total runtime is 0.09492946863174438 minutes
2023-08-11 13:00:12,255:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:12,255:INFO:Initializing create_model()
2023-08-11 13:00:12,255:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:12,255:INFO:Checking exceptions
2023-08-11 13:00:12,255:INFO:Importing libraries
2023-08-11 13:00:12,255:INFO:Copying training dataset
2023-08-11 13:00:12,258:INFO:Defining folds
2023-08-11 13:00:12,258:INFO:Declaring metric variables
2023-08-11 13:00:12,260:INFO:Importing untrained model
2023-08-11 13:00:12,262:INFO:K Neighbors Regressor Imported successfully
2023-08-11 13:00:12,266:INFO:Starting cross validation
2023-08-11 13:00:12,267:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:12,687:INFO:Calculating mean and std
2023-08-11 13:00:12,689:INFO:Creating metrics dataframe
2023-08-11 13:00:12,747:INFO:Uploading results into container
2023-08-11 13:00:12,747:INFO:Uploading model into container now
2023-08-11 13:00:12,748:INFO:_master_model_container: 11
2023-08-11 13:00:12,748:INFO:_display_container: 2
2023-08-11 13:00:12,748:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 13:00:12,748:INFO:create_model() successfully completed......................................
2023-08-11 13:00:12,885:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:12,885:INFO:Creating metrics dataframe
2023-08-11 13:00:12,894:INFO:Initializing Decision Tree Regressor
2023-08-11 13:00:12,894:INFO:Total runtime is 0.10562263329823812 minutes
2023-08-11 13:00:12,896:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:12,896:INFO:Initializing create_model()
2023-08-11 13:00:12,897:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:12,897:INFO:Checking exceptions
2023-08-11 13:00:12,897:INFO:Importing libraries
2023-08-11 13:00:12,897:INFO:Copying training dataset
2023-08-11 13:00:12,899:INFO:Defining folds
2023-08-11 13:00:12,899:INFO:Declaring metric variables
2023-08-11 13:00:12,901:INFO:Importing untrained model
2023-08-11 13:00:12,903:INFO:Decision Tree Regressor Imported successfully
2023-08-11 13:00:12,907:INFO:Starting cross validation
2023-08-11 13:00:12,908:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:13,251:INFO:Calculating mean and std
2023-08-11 13:00:13,252:INFO:Creating metrics dataframe
2023-08-11 13:00:13,310:INFO:Uploading results into container
2023-08-11 13:00:13,311:INFO:Uploading model into container now
2023-08-11 13:00:13,311:INFO:_master_model_container: 12
2023-08-11 13:00:13,311:INFO:_display_container: 2
2023-08-11 13:00:13,311:INFO:DecisionTreeRegressor(random_state=55)
2023-08-11 13:00:13,311:INFO:create_model() successfully completed......................................
2023-08-11 13:00:13,450:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:13,451:INFO:Creating metrics dataframe
2023-08-11 13:00:13,460:INFO:Initializing Random Forest Regressor
2023-08-11 13:00:13,460:INFO:Total runtime is 0.1150527318318685 minutes
2023-08-11 13:00:13,462:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:13,462:INFO:Initializing create_model()
2023-08-11 13:00:13,462:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:13,462:INFO:Checking exceptions
2023-08-11 13:00:13,463:INFO:Importing libraries
2023-08-11 13:00:13,463:INFO:Copying training dataset
2023-08-11 13:00:13,465:INFO:Defining folds
2023-08-11 13:00:13,465:INFO:Declaring metric variables
2023-08-11 13:00:13,467:INFO:Importing untrained model
2023-08-11 13:00:13,470:INFO:Random Forest Regressor Imported successfully
2023-08-11 13:00:13,474:INFO:Starting cross validation
2023-08-11 13:00:13,475:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:14,295:INFO:Calculating mean and std
2023-08-11 13:00:14,296:INFO:Creating metrics dataframe
2023-08-11 13:00:14,356:INFO:Uploading results into container
2023-08-11 13:00:14,356:INFO:Uploading model into container now
2023-08-11 13:00:14,356:INFO:_master_model_container: 13
2023-08-11 13:00:14,356:INFO:_display_container: 2
2023-08-11 13:00:14,357:INFO:RandomForestRegressor(n_jobs=-1, random_state=55)
2023-08-11 13:00:14,357:INFO:create_model() successfully completed......................................
2023-08-11 13:00:14,493:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:14,493:INFO:Creating metrics dataframe
2023-08-11 13:00:14,503:INFO:Initializing Extra Trees Regressor
2023-08-11 13:00:14,503:INFO:Total runtime is 0.13243841727574668 minutes
2023-08-11 13:00:14,505:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:14,505:INFO:Initializing create_model()
2023-08-11 13:00:14,505:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:14,506:INFO:Checking exceptions
2023-08-11 13:00:14,506:INFO:Importing libraries
2023-08-11 13:00:14,506:INFO:Copying training dataset
2023-08-11 13:00:14,508:INFO:Defining folds
2023-08-11 13:00:14,508:INFO:Declaring metric variables
2023-08-11 13:00:14,510:INFO:Importing untrained model
2023-08-11 13:00:14,512:INFO:Extra Trees Regressor Imported successfully
2023-08-11 13:00:14,517:INFO:Starting cross validation
2023-08-11 13:00:14,518:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:15,338:INFO:Calculating mean and std
2023-08-11 13:00:15,339:INFO:Creating metrics dataframe
2023-08-11 13:00:15,402:INFO:Uploading results into container
2023-08-11 13:00:15,403:INFO:Uploading model into container now
2023-08-11 13:00:15,403:INFO:_master_model_container: 14
2023-08-11 13:00:15,403:INFO:_display_container: 2
2023-08-11 13:00:15,403:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=55)
2023-08-11 13:00:15,403:INFO:create_model() successfully completed......................................
2023-08-11 13:00:15,541:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:15,541:INFO:Creating metrics dataframe
2023-08-11 13:00:15,551:INFO:Initializing AdaBoost Regressor
2023-08-11 13:00:15,551:INFO:Total runtime is 0.1498962163925171 minutes
2023-08-11 13:00:15,553:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:15,553:INFO:Initializing create_model()
2023-08-11 13:00:15,553:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:15,553:INFO:Checking exceptions
2023-08-11 13:00:15,553:INFO:Importing libraries
2023-08-11 13:00:15,553:INFO:Copying training dataset
2023-08-11 13:00:15,556:INFO:Defining folds
2023-08-11 13:00:15,556:INFO:Declaring metric variables
2023-08-11 13:00:15,558:INFO:Importing untrained model
2023-08-11 13:00:15,560:INFO:AdaBoost Regressor Imported successfully
2023-08-11 13:00:15,564:INFO:Starting cross validation
2023-08-11 13:00:15,565:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:15,964:INFO:Calculating mean and std
2023-08-11 13:00:15,966:INFO:Creating metrics dataframe
2023-08-11 13:00:16,029:INFO:Uploading results into container
2023-08-11 13:00:16,029:INFO:Uploading model into container now
2023-08-11 13:00:16,029:INFO:_master_model_container: 15
2023-08-11 13:00:16,029:INFO:_display_container: 2
2023-08-11 13:00:16,030:INFO:AdaBoostRegressor(random_state=55)
2023-08-11 13:00:16,030:INFO:create_model() successfully completed......................................
2023-08-11 13:00:16,166:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:16,166:INFO:Creating metrics dataframe
2023-08-11 13:00:16,176:INFO:Initializing Gradient Boosting Regressor
2023-08-11 13:00:16,176:INFO:Total runtime is 0.16032463312149048 minutes
2023-08-11 13:00:16,179:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:16,179:INFO:Initializing create_model()
2023-08-11 13:00:16,179:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:16,179:INFO:Checking exceptions
2023-08-11 13:00:16,179:INFO:Importing libraries
2023-08-11 13:00:16,179:INFO:Copying training dataset
2023-08-11 13:00:16,181:INFO:Defining folds
2023-08-11 13:00:16,181:INFO:Declaring metric variables
2023-08-11 13:00:16,183:INFO:Importing untrained model
2023-08-11 13:00:16,186:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 13:00:16,190:INFO:Starting cross validation
2023-08-11 13:00:16,191:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:16,609:INFO:Calculating mean and std
2023-08-11 13:00:16,610:INFO:Creating metrics dataframe
2023-08-11 13:00:16,672:INFO:Uploading results into container
2023-08-11 13:00:16,673:INFO:Uploading model into container now
2023-08-11 13:00:16,673:INFO:_master_model_container: 16
2023-08-11 13:00:16,673:INFO:_display_container: 2
2023-08-11 13:00:16,673:INFO:GradientBoostingRegressor(random_state=55)
2023-08-11 13:00:16,673:INFO:create_model() successfully completed......................................
2023-08-11 13:00:16,809:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:16,809:INFO:Creating metrics dataframe
2023-08-11 13:00:16,819:INFO:Initializing Extreme Gradient Boosting
2023-08-11 13:00:16,819:INFO:Total runtime is 0.17103496392567952 minutes
2023-08-11 13:00:16,821:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:16,821:INFO:Initializing create_model()
2023-08-11 13:00:16,821:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:16,821:INFO:Checking exceptions
2023-08-11 13:00:16,821:INFO:Importing libraries
2023-08-11 13:00:16,821:INFO:Copying training dataset
2023-08-11 13:00:16,824:INFO:Defining folds
2023-08-11 13:00:16,824:INFO:Declaring metric variables
2023-08-11 13:00:16,826:INFO:Importing untrained model
2023-08-11 13:00:16,829:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 13:00:16,833:INFO:Starting cross validation
2023-08-11 13:00:16,834:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:17,217:INFO:Calculating mean and std
2023-08-11 13:00:17,219:INFO:Creating metrics dataframe
2023-08-11 13:00:17,279:INFO:Uploading results into container
2023-08-11 13:00:17,280:INFO:Uploading model into container now
2023-08-11 13:00:17,280:INFO:_master_model_container: 17
2023-08-11 13:00:17,280:INFO:_display_container: 2
2023-08-11 13:00:17,280:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=55,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 13:00:17,280:INFO:create_model() successfully completed......................................
2023-08-11 13:00:17,417:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:17,417:INFO:Creating metrics dataframe
2023-08-11 13:00:17,427:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 13:00:17,427:INFO:Total runtime is 0.18116439978281657 minutes
2023-08-11 13:00:17,429:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:17,429:INFO:Initializing create_model()
2023-08-11 13:00:17,429:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:17,429:INFO:Checking exceptions
2023-08-11 13:00:17,429:INFO:Importing libraries
2023-08-11 13:00:17,429:INFO:Copying training dataset
2023-08-11 13:00:17,432:INFO:Defining folds
2023-08-11 13:00:17,432:INFO:Declaring metric variables
2023-08-11 13:00:17,434:INFO:Importing untrained model
2023-08-11 13:00:17,436:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 13:00:17,440:INFO:Starting cross validation
2023-08-11 13:00:17,441:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:17,816:INFO:Calculating mean and std
2023-08-11 13:00:17,817:INFO:Creating metrics dataframe
2023-08-11 13:00:17,879:INFO:Uploading results into container
2023-08-11 13:00:17,880:INFO:Uploading model into container now
2023-08-11 13:00:17,880:INFO:_master_model_container: 18
2023-08-11 13:00:17,880:INFO:_display_container: 2
2023-08-11 13:00:17,880:INFO:LGBMRegressor(random_state=55)
2023-08-11 13:00:17,880:INFO:create_model() successfully completed......................................
2023-08-11 13:00:18,016:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:18,016:INFO:Creating metrics dataframe
2023-08-11 13:00:18,026:INFO:Initializing CatBoost Regressor
2023-08-11 13:00:18,026:INFO:Total runtime is 0.1911550005276998 minutes
2023-08-11 13:00:18,028:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:18,028:INFO:Initializing create_model()
2023-08-11 13:00:18,029:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=catboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:18,029:INFO:Checking exceptions
2023-08-11 13:00:18,029:INFO:Importing libraries
2023-08-11 13:00:18,029:INFO:Copying training dataset
2023-08-11 13:00:18,031:INFO:Defining folds
2023-08-11 13:00:18,031:INFO:Declaring metric variables
2023-08-11 13:00:18,033:INFO:Importing untrained model
2023-08-11 13:00:18,035:INFO:CatBoost Regressor Imported successfully
2023-08-11 13:00:18,039:INFO:Starting cross validation
2023-08-11 13:00:18,040:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:18,818:INFO:Calculating mean and std
2023-08-11 13:00:18,819:INFO:Creating metrics dataframe
2023-08-11 13:00:18,884:INFO:Uploading results into container
2023-08-11 13:00:18,885:INFO:Uploading model into container now
2023-08-11 13:00:18,885:INFO:_master_model_container: 19
2023-08-11 13:00:18,885:INFO:_display_container: 2
2023-08-11 13:00:18,885:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d11e51890>
2023-08-11 13:00:18,885:INFO:create_model() successfully completed......................................
2023-08-11 13:00:19,025:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:19,025:INFO:Creating metrics dataframe
2023-08-11 13:00:19,035:INFO:Initializing Dummy Regressor
2023-08-11 13:00:19,035:INFO:Total runtime is 0.20797101656595868 minutes
2023-08-11 13:00:19,037:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:19,038:INFO:Initializing create_model()
2023-08-11 13:00:19,038:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21623890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:19,038:INFO:Checking exceptions
2023-08-11 13:00:19,038:INFO:Importing libraries
2023-08-11 13:00:19,038:INFO:Copying training dataset
2023-08-11 13:00:19,040:INFO:Defining folds
2023-08-11 13:00:19,040:INFO:Declaring metric variables
2023-08-11 13:00:19,042:INFO:Importing untrained model
2023-08-11 13:00:19,045:INFO:Dummy Regressor Imported successfully
2023-08-11 13:00:19,051:INFO:Starting cross validation
2023-08-11 13:00:19,052:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-11 13:00:19,419:INFO:Calculating mean and std
2023-08-11 13:00:19,420:INFO:Creating metrics dataframe
2023-08-11 13:00:19,485:INFO:Uploading results into container
2023-08-11 13:00:19,486:INFO:Uploading model into container now
2023-08-11 13:00:19,486:INFO:_master_model_container: 20
2023-08-11 13:00:19,486:INFO:_display_container: 2
2023-08-11 13:00:19,486:INFO:DummyRegressor()
2023-08-11 13:00:19,486:INFO:create_model() successfully completed......................................
2023-08-11 13:00:19,626:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:19,626:INFO:Creating metrics dataframe
2023-08-11 13:00:19,643:INFO:Initializing create_model()
2023-08-11 13:00:19,643:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d21706c10>, estimator=RandomForestRegressor(n_jobs=-1, random_state=55), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:19,643:INFO:Checking exceptions
2023-08-11 13:00:19,644:INFO:Importing libraries
2023-08-11 13:00:19,644:INFO:Copying training dataset
2023-08-11 13:00:19,646:INFO:Defining folds
2023-08-11 13:00:19,646:INFO:Declaring metric variables
2023-08-11 13:00:19,646:INFO:Importing untrained model
2023-08-11 13:00:19,646:INFO:Declaring custom model
2023-08-11 13:00:19,647:INFO:Random Forest Regressor Imported successfully
2023-08-11 13:00:19,647:INFO:Cross validation set to False
2023-08-11 13:00:19,647:INFO:Fitting Model
2023-08-11 13:00:19,878:INFO:RandomForestRegressor(n_jobs=-1, random_state=55)
2023-08-11 13:00:19,878:INFO:create_model() successfully completed......................................
2023-08-11 13:00:20,042:INFO:_master_model_container: 20
2023-08-11 13:00:20,042:INFO:_display_container: 2
2023-08-11 13:00:20,042:INFO:RandomForestRegressor(n_jobs=-1, random_state=55)
2023-08-11 13:00:20,042:INFO:compare_models() successfully completed......................................
2023-08-11 13:00:36,212:INFO:PyCaret RegressionExperiment
2023-08-11 13:00:36,212:INFO:Logging name: reg-default-name
2023-08-11 13:00:36,212:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 13:00:36,212:INFO:version 3.0.2
2023-08-11 13:00:36,212:INFO:Initializing setup()
2023-08-11 13:00:36,212:INFO:self.USI: 3470
2023-08-11 13:00:36,212:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 13:00:36,212:INFO:Checking environment
2023-08-11 13:00:36,212:INFO:python_version: 3.7.13
2023-08-11 13:00:36,213:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 13:00:36,213:INFO:machine: x86_64
2023-08-11 13:00:36,213:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 13:00:36,213:INFO:Memory: svmem(total=17179869184, available=1275514880, percent=92.6, used=1704939520, free=19922944, active=1258975232, inactive=1249685504, wired=445964288)
2023-08-11 13:00:36,213:INFO:Physical Core: 8
2023-08-11 13:00:36,213:INFO:Logical Core: 8
2023-08-11 13:00:36,213:INFO:Checking libraries
2023-08-11 13:00:36,213:INFO:System:
2023-08-11 13:00:36,213:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 13:00:36,213:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 13:00:36,213:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 13:00:36,213:INFO:PyCaret required dependencies:
2023-08-11 13:00:36,213:INFO:                 pip: 22.3.1
2023-08-11 13:00:36,213:INFO:          setuptools: 63.4.1
2023-08-11 13:00:36,213:INFO:             pycaret: 3.0.2
2023-08-11 13:00:36,213:INFO:             IPython: 7.33.0
2023-08-11 13:00:36,213:INFO:          ipywidgets: 8.0.2
2023-08-11 13:00:36,213:INFO:                tqdm: 4.64.1
2023-08-11 13:00:36,213:INFO:               numpy: 1.21.5
2023-08-11 13:00:36,213:INFO:              pandas: 1.3.5
2023-08-11 13:00:36,213:INFO:              jinja2: 3.1.2
2023-08-11 13:00:36,213:INFO:               scipy: 1.7.3
2023-08-11 13:00:36,213:INFO:              joblib: 1.2.0
2023-08-11 13:00:36,213:INFO:             sklearn: 1.0.2
2023-08-11 13:00:36,213:INFO:                pyod: 1.0.9
2023-08-11 13:00:36,213:INFO:            imblearn: 0.10.1
2023-08-11 13:00:36,213:INFO:   category_encoders: 2.6.1
2023-08-11 13:00:36,213:INFO:            lightgbm: 3.3.2
2023-08-11 13:00:36,213:INFO:               numba: 0.56.2
2023-08-11 13:00:36,213:INFO:            requests: 2.28.1
2023-08-11 13:00:36,213:INFO:          matplotlib: 3.5.3
2023-08-11 13:00:36,214:INFO:          scikitplot: 0.3.7
2023-08-11 13:00:36,214:INFO:         yellowbrick: 1.5
2023-08-11 13:00:36,214:INFO:              plotly: 5.13.0
2023-08-11 13:00:36,214:INFO:             kaleido: 0.2.1
2023-08-11 13:00:36,214:INFO:         statsmodels: 0.13.2
2023-08-11 13:00:36,214:INFO:              sktime: 0.17.0
2023-08-11 13:00:36,214:INFO:               tbats: 1.1.3
2023-08-11 13:00:36,214:INFO:            pmdarima: 2.0.3
2023-08-11 13:00:36,214:INFO:              psutil: 5.9.2
2023-08-11 13:00:36,214:INFO:PyCaret optional dependencies:
2023-08-11 13:00:36,214:INFO:                shap: Not installed
2023-08-11 13:00:36,214:INFO:           interpret: Not installed
2023-08-11 13:00:36,214:INFO:                umap: 0.5.3
2023-08-11 13:00:36,214:INFO:    pandas_profiling: 3.0.0
2023-08-11 13:00:36,214:INFO:  explainerdashboard: Not installed
2023-08-11 13:00:36,214:INFO:             autoviz: Not installed
2023-08-11 13:00:36,214:INFO:           fairlearn: Not installed
2023-08-11 13:00:36,214:INFO:             xgboost: 1.6.2
2023-08-11 13:00:36,214:INFO:            catboost: 1.0.4
2023-08-11 13:00:36,214:INFO:              kmodes: 0.12.2
2023-08-11 13:00:36,214:INFO:             mlxtend: 0.19.0
2023-08-11 13:00:36,214:INFO:       statsforecast: Not installed
2023-08-11 13:00:36,214:INFO:        tune_sklearn: Not installed
2023-08-11 13:00:36,214:INFO:                 ray: Not installed
2023-08-11 13:00:36,214:INFO:            hyperopt: Not installed
2023-08-11 13:00:36,214:INFO:              optuna: Not installed
2023-08-11 13:00:36,214:INFO:               skopt: Not installed
2023-08-11 13:00:36,214:INFO:              mlflow: 1.29.0
2023-08-11 13:00:36,214:INFO:              gradio: Not installed
2023-08-11 13:00:36,214:INFO:             fastapi: Not installed
2023-08-11 13:00:36,214:INFO:             uvicorn: Not installed
2023-08-11 13:00:36,214:INFO:              m2cgen: Not installed
2023-08-11 13:00:36,214:INFO:           evidently: Not installed
2023-08-11 13:00:36,214:INFO:               fugue: Not installed
2023-08-11 13:00:36,214:INFO:           streamlit: 1.13.0
2023-08-11 13:00:36,214:INFO:             prophet: Not installed
2023-08-11 13:00:36,214:INFO:None
2023-08-11 13:00:36,215:INFO:Set up data.
2023-08-11 13:00:36,217:INFO:Set up train/test split.
2023-08-11 13:00:36,219:INFO:Set up index.
2023-08-11 13:00:36,219:INFO:Set up folding strategy.
2023-08-11 13:00:36,219:INFO:Assigning column types.
2023-08-11 13:00:36,222:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 13:00:36,222:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,227:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,231:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,277:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,313:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,313:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:36,315:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:36,316:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,319:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,323:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,368:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,404:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,404:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:36,406:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:36,407:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 13:00:36,411:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,414:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,459:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,495:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,496:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:36,498:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:36,502:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,506:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,550:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,586:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,586:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:36,588:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:36,589:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 13:00:36,596:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,641:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,677:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,677:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:36,679:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:36,687:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,732:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,768:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,768:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:36,770:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:36,770:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 13:00:36,822:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,859:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,859:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:36,861:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:36,914:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,951:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:00:36,951:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:36,953:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:36,953:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 13:00:37,006:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:37,042:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:37,044:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:37,097:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:00:37,133:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:37,135:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:37,136:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 13:00:37,228:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:37,230:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:37,320:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:37,322:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:37,322:INFO:Preparing preprocessing pipeline...
2023-08-11 13:00:37,322:INFO:Set up simple imputation.
2023-08-11 13:00:37,323:INFO:Set up column name cleaning.
2023-08-11 13:00:37,338:INFO:Finished creating preprocessing pipeline.
2023-08-11 13:00:37,340:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['n8Ring', 'Xch-4d', 'ABC',
                                             'PEOE_VSA13', 'nSpiro'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2023-08-11 13:00:37,340:INFO:Creating final display dataframe.
2023-08-11 13:00:37,390:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target               pKi
2                   Target type        Regression
3           Original data shape          (316, 6)
4        Transformed data shape          (316, 6)
5   Transformed train set shape          (221, 6)
6    Transformed test set shape           (95, 6)
7              Numeric features                 5
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              3470
2023-08-11 13:00:37,484:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:37,486:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:37,575:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:00:37,577:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:00:37,577:INFO:setup() successfully completed in 1.44s...............
2023-08-11 13:00:37,610:INFO:Initializing compare_models()
2023-08-11 13:00:37,610:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 13:00:37,610:INFO:Checking exceptions
2023-08-11 13:00:37,611:INFO:Preparing display monitor
2023-08-11 13:00:37,636:INFO:Initializing Linear Regression
2023-08-11 13:00:37,636:INFO:Total runtime is 3.1153361002604166e-06 minutes
2023-08-11 13:00:37,638:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:37,639:INFO:Initializing create_model()
2023-08-11 13:00:37,639:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=lr, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:37,639:INFO:Checking exceptions
2023-08-11 13:00:37,639:INFO:Importing libraries
2023-08-11 13:00:37,639:INFO:Copying training dataset
2023-08-11 13:00:37,641:INFO:Defining folds
2023-08-11 13:00:37,641:INFO:Declaring metric variables
2023-08-11 13:00:37,644:INFO:Importing untrained model
2023-08-11 13:00:37,647:INFO:Linear Regression Imported successfully
2023-08-11 13:00:37,652:INFO:Starting cross validation
2023-08-11 13:00:37,653:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:38,017:INFO:Calculating mean and std
2023-08-11 13:00:38,018:INFO:Creating metrics dataframe
2023-08-11 13:00:38,080:INFO:Uploading results into container
2023-08-11 13:00:38,080:INFO:Uploading model into container now
2023-08-11 13:00:38,081:INFO:_master_model_container: 1
2023-08-11 13:00:38,081:INFO:_display_container: 2
2023-08-11 13:00:38,081:INFO:LinearRegression(n_jobs=-1)
2023-08-11 13:00:38,081:INFO:create_model() successfully completed......................................
2023-08-11 13:00:38,219:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:38,219:INFO:Creating metrics dataframe
2023-08-11 13:00:38,227:INFO:Initializing Lasso Regression
2023-08-11 13:00:38,227:INFO:Total runtime is 0.009850434462229411 minutes
2023-08-11 13:00:38,229:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:38,229:INFO:Initializing create_model()
2023-08-11 13:00:38,229:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=lasso, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:38,229:INFO:Checking exceptions
2023-08-11 13:00:38,229:INFO:Importing libraries
2023-08-11 13:00:38,229:INFO:Copying training dataset
2023-08-11 13:00:38,231:INFO:Defining folds
2023-08-11 13:00:38,231:INFO:Declaring metric variables
2023-08-11 13:00:38,233:INFO:Importing untrained model
2023-08-11 13:00:38,235:INFO:Lasso Regression Imported successfully
2023-08-11 13:00:38,239:INFO:Starting cross validation
2023-08-11 13:00:38,239:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:38,614:INFO:Calculating mean and std
2023-08-11 13:00:38,614:INFO:Creating metrics dataframe
2023-08-11 13:00:38,677:INFO:Uploading results into container
2023-08-11 13:00:38,678:INFO:Uploading model into container now
2023-08-11 13:00:38,678:INFO:_master_model_container: 2
2023-08-11 13:00:38,678:INFO:_display_container: 2
2023-08-11 13:00:38,678:INFO:Lasso(random_state=42)
2023-08-11 13:00:38,678:INFO:create_model() successfully completed......................................
2023-08-11 13:00:38,817:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:38,817:INFO:Creating metrics dataframe
2023-08-11 13:00:38,825:INFO:Initializing Ridge Regression
2023-08-11 13:00:38,826:INFO:Total runtime is 0.01983081897099813 minutes
2023-08-11 13:00:38,828:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:38,828:INFO:Initializing create_model()
2023-08-11 13:00:38,828:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=ridge, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:38,828:INFO:Checking exceptions
2023-08-11 13:00:38,828:INFO:Importing libraries
2023-08-11 13:00:38,828:INFO:Copying training dataset
2023-08-11 13:00:38,831:INFO:Defining folds
2023-08-11 13:00:38,831:INFO:Declaring metric variables
2023-08-11 13:00:38,833:INFO:Importing untrained model
2023-08-11 13:00:38,836:INFO:Ridge Regression Imported successfully
2023-08-11 13:00:38,840:INFO:Starting cross validation
2023-08-11 13:00:38,841:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:39,218:INFO:Calculating mean and std
2023-08-11 13:00:39,219:INFO:Creating metrics dataframe
2023-08-11 13:00:39,283:INFO:Uploading results into container
2023-08-11 13:00:39,283:INFO:Uploading model into container now
2023-08-11 13:00:39,283:INFO:_master_model_container: 3
2023-08-11 13:00:39,283:INFO:_display_container: 2
2023-08-11 13:00:39,283:INFO:Ridge(random_state=42)
2023-08-11 13:00:39,283:INFO:create_model() successfully completed......................................
2023-08-11 13:00:39,422:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:39,422:INFO:Creating metrics dataframe
2023-08-11 13:00:39,430:INFO:Initializing Elastic Net
2023-08-11 13:00:39,430:INFO:Total runtime is 0.029907349745432535 minutes
2023-08-11 13:00:39,432:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:39,432:INFO:Initializing create_model()
2023-08-11 13:00:39,432:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=en, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:39,432:INFO:Checking exceptions
2023-08-11 13:00:39,432:INFO:Importing libraries
2023-08-11 13:00:39,432:INFO:Copying training dataset
2023-08-11 13:00:39,435:INFO:Defining folds
2023-08-11 13:00:39,435:INFO:Declaring metric variables
2023-08-11 13:00:39,437:INFO:Importing untrained model
2023-08-11 13:00:39,439:INFO:Elastic Net Imported successfully
2023-08-11 13:00:39,443:INFO:Starting cross validation
2023-08-11 13:00:39,444:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:39,819:INFO:Calculating mean and std
2023-08-11 13:00:39,821:INFO:Creating metrics dataframe
2023-08-11 13:00:39,884:INFO:Uploading results into container
2023-08-11 13:00:39,884:INFO:Uploading model into container now
2023-08-11 13:00:39,884:INFO:_master_model_container: 4
2023-08-11 13:00:39,884:INFO:_display_container: 2
2023-08-11 13:00:39,885:INFO:ElasticNet(random_state=42)
2023-08-11 13:00:39,885:INFO:create_model() successfully completed......................................
2023-08-11 13:00:40,020:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:40,020:INFO:Creating metrics dataframe
2023-08-11 13:00:40,028:INFO:Initializing Least Angle Regression
2023-08-11 13:00:40,028:INFO:Total runtime is 0.03987953662872314 minutes
2023-08-11 13:00:40,030:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:40,031:INFO:Initializing create_model()
2023-08-11 13:00:40,031:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=lar, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:40,031:INFO:Checking exceptions
2023-08-11 13:00:40,031:INFO:Importing libraries
2023-08-11 13:00:40,031:INFO:Copying training dataset
2023-08-11 13:00:40,033:INFO:Defining folds
2023-08-11 13:00:40,033:INFO:Declaring metric variables
2023-08-11 13:00:40,035:INFO:Importing untrained model
2023-08-11 13:00:40,038:INFO:Least Angle Regression Imported successfully
2023-08-11 13:00:40,042:INFO:Starting cross validation
2023-08-11 13:00:40,043:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:40,080:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:40,084:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:40,089:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:40,107:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:40,119:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:40,122:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:40,127:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:40,145:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:40,189:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:40,203:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:40,410:INFO:Calculating mean and std
2023-08-11 13:00:40,411:INFO:Creating metrics dataframe
2023-08-11 13:00:40,475:INFO:Uploading results into container
2023-08-11 13:00:40,476:INFO:Uploading model into container now
2023-08-11 13:00:40,476:INFO:_master_model_container: 5
2023-08-11 13:00:40,476:INFO:_display_container: 2
2023-08-11 13:00:40,476:INFO:Lars(random_state=42)
2023-08-11 13:00:40,476:INFO:create_model() successfully completed......................................
2023-08-11 13:00:40,612:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:40,612:INFO:Creating metrics dataframe
2023-08-11 13:00:40,621:INFO:Initializing Lasso Least Angle Regression
2023-08-11 13:00:40,621:INFO:Total runtime is 0.049753201007843015 minutes
2023-08-11 13:00:40,623:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:40,623:INFO:Initializing create_model()
2023-08-11 13:00:40,623:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=llar, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:40,623:INFO:Checking exceptions
2023-08-11 13:00:40,623:INFO:Importing libraries
2023-08-11 13:00:40,623:INFO:Copying training dataset
2023-08-11 13:00:40,626:INFO:Defining folds
2023-08-11 13:00:40,626:INFO:Declaring metric variables
2023-08-11 13:00:40,628:INFO:Importing untrained model
2023-08-11 13:00:40,630:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 13:00:40,634:INFO:Starting cross validation
2023-08-11 13:00:40,635:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:40,674:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:40,691:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:40,696:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:40,704:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:40,706:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:40,711:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:40,712:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:40,757:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:40,783:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:40,797:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:00:41,003:INFO:Calculating mean and std
2023-08-11 13:00:41,005:INFO:Creating metrics dataframe
2023-08-11 13:00:41,068:INFO:Uploading results into container
2023-08-11 13:00:41,069:INFO:Uploading model into container now
2023-08-11 13:00:41,069:INFO:_master_model_container: 6
2023-08-11 13:00:41,069:INFO:_display_container: 2
2023-08-11 13:00:41,069:INFO:LassoLars(random_state=42)
2023-08-11 13:00:41,069:INFO:create_model() successfully completed......................................
2023-08-11 13:00:41,207:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:41,207:INFO:Creating metrics dataframe
2023-08-11 13:00:41,215:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 13:00:41,215:INFO:Total runtime is 0.059663450717926024 minutes
2023-08-11 13:00:41,218:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:41,218:INFO:Initializing create_model()
2023-08-11 13:00:41,218:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=omp, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:41,218:INFO:Checking exceptions
2023-08-11 13:00:41,218:INFO:Importing libraries
2023-08-11 13:00:41,218:INFO:Copying training dataset
2023-08-11 13:00:41,220:INFO:Defining folds
2023-08-11 13:00:41,220:INFO:Declaring metric variables
2023-08-11 13:00:41,222:INFO:Importing untrained model
2023-08-11 13:00:41,224:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 13:00:41,229:INFO:Starting cross validation
2023-08-11 13:00:41,230:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:41,277:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:41,278:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:41,284:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:41,295:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:41,296:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:41,299:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:41,320:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:41,338:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:41,394:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:41,398:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:00:41,582:INFO:Calculating mean and std
2023-08-11 13:00:41,583:INFO:Creating metrics dataframe
2023-08-11 13:00:41,647:INFO:Uploading results into container
2023-08-11 13:00:41,647:INFO:Uploading model into container now
2023-08-11 13:00:41,647:INFO:_master_model_container: 7
2023-08-11 13:00:41,647:INFO:_display_container: 2
2023-08-11 13:00:41,648:INFO:OrthogonalMatchingPursuit()
2023-08-11 13:00:41,648:INFO:create_model() successfully completed......................................
2023-08-11 13:00:41,783:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:41,783:INFO:Creating metrics dataframe
2023-08-11 13:00:41,792:INFO:Initializing Bayesian Ridge
2023-08-11 13:00:41,792:INFO:Total runtime is 0.0692732850710551 minutes
2023-08-11 13:00:41,794:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:41,794:INFO:Initializing create_model()
2023-08-11 13:00:41,794:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=br, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:41,794:INFO:Checking exceptions
2023-08-11 13:00:41,794:INFO:Importing libraries
2023-08-11 13:00:41,794:INFO:Copying training dataset
2023-08-11 13:00:41,797:INFO:Defining folds
2023-08-11 13:00:41,797:INFO:Declaring metric variables
2023-08-11 13:00:41,799:INFO:Importing untrained model
2023-08-11 13:00:41,801:INFO:Bayesian Ridge Imported successfully
2023-08-11 13:00:41,806:INFO:Starting cross validation
2023-08-11 13:00:41,808:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:42,166:INFO:Calculating mean and std
2023-08-11 13:00:42,167:INFO:Creating metrics dataframe
2023-08-11 13:00:42,230:INFO:Uploading results into container
2023-08-11 13:00:42,231:INFO:Uploading model into container now
2023-08-11 13:00:42,231:INFO:_master_model_container: 8
2023-08-11 13:00:42,231:INFO:_display_container: 2
2023-08-11 13:00:42,231:INFO:BayesianRidge()
2023-08-11 13:00:42,231:INFO:create_model() successfully completed......................................
2023-08-11 13:00:42,367:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:42,367:INFO:Creating metrics dataframe
2023-08-11 13:00:42,376:INFO:Initializing Passive Aggressive Regressor
2023-08-11 13:00:42,376:INFO:Total runtime is 0.07900526523590087 minutes
2023-08-11 13:00:42,378:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:42,378:INFO:Initializing create_model()
2023-08-11 13:00:42,378:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=par, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:42,378:INFO:Checking exceptions
2023-08-11 13:00:42,378:INFO:Importing libraries
2023-08-11 13:00:42,378:INFO:Copying training dataset
2023-08-11 13:00:42,381:INFO:Defining folds
2023-08-11 13:00:42,381:INFO:Declaring metric variables
2023-08-11 13:00:42,383:INFO:Importing untrained model
2023-08-11 13:00:42,385:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 13:00:42,389:INFO:Starting cross validation
2023-08-11 13:00:42,390:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:42,749:INFO:Calculating mean and std
2023-08-11 13:00:42,751:INFO:Creating metrics dataframe
2023-08-11 13:00:42,815:INFO:Uploading results into container
2023-08-11 13:00:42,815:INFO:Uploading model into container now
2023-08-11 13:00:42,815:INFO:_master_model_container: 9
2023-08-11 13:00:42,815:INFO:_display_container: 2
2023-08-11 13:00:42,815:INFO:PassiveAggressiveRegressor(random_state=42)
2023-08-11 13:00:42,815:INFO:create_model() successfully completed......................................
2023-08-11 13:00:42,951:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:42,952:INFO:Creating metrics dataframe
2023-08-11 13:00:42,960:INFO:Initializing Huber Regressor
2023-08-11 13:00:42,961:INFO:Total runtime is 0.08874762058258057 minutes
2023-08-11 13:00:42,963:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:42,963:INFO:Initializing create_model()
2023-08-11 13:00:42,963:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=huber, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:42,963:INFO:Checking exceptions
2023-08-11 13:00:42,963:INFO:Importing libraries
2023-08-11 13:00:42,963:INFO:Copying training dataset
2023-08-11 13:00:42,965:INFO:Defining folds
2023-08-11 13:00:42,965:INFO:Declaring metric variables
2023-08-11 13:00:42,967:INFO:Importing untrained model
2023-08-11 13:00:42,970:INFO:Huber Regressor Imported successfully
2023-08-11 13:00:42,974:INFO:Starting cross validation
2023-08-11 13:00:42,974:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:43,345:INFO:Calculating mean and std
2023-08-11 13:00:43,347:INFO:Creating metrics dataframe
2023-08-11 13:00:43,410:INFO:Uploading results into container
2023-08-11 13:00:43,410:INFO:Uploading model into container now
2023-08-11 13:00:43,410:INFO:_master_model_container: 10
2023-08-11 13:00:43,410:INFO:_display_container: 2
2023-08-11 13:00:43,410:INFO:HuberRegressor()
2023-08-11 13:00:43,410:INFO:create_model() successfully completed......................................
2023-08-11 13:00:43,546:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:43,546:INFO:Creating metrics dataframe
2023-08-11 13:00:43,555:INFO:Initializing K Neighbors Regressor
2023-08-11 13:00:43,555:INFO:Total runtime is 0.09866233269373575 minutes
2023-08-11 13:00:43,557:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:43,558:INFO:Initializing create_model()
2023-08-11 13:00:43,558:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=knn, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:43,558:INFO:Checking exceptions
2023-08-11 13:00:43,558:INFO:Importing libraries
2023-08-11 13:00:43,558:INFO:Copying training dataset
2023-08-11 13:00:43,560:INFO:Defining folds
2023-08-11 13:00:43,560:INFO:Declaring metric variables
2023-08-11 13:00:43,562:INFO:Importing untrained model
2023-08-11 13:00:43,564:INFO:K Neighbors Regressor Imported successfully
2023-08-11 13:00:43,569:INFO:Starting cross validation
2023-08-11 13:00:43,570:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:44,004:INFO:Calculating mean and std
2023-08-11 13:00:44,005:INFO:Creating metrics dataframe
2023-08-11 13:00:44,069:INFO:Uploading results into container
2023-08-11 13:00:44,069:INFO:Uploading model into container now
2023-08-11 13:00:44,069:INFO:_master_model_container: 11
2023-08-11 13:00:44,069:INFO:_display_container: 2
2023-08-11 13:00:44,070:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 13:00:44,070:INFO:create_model() successfully completed......................................
2023-08-11 13:00:44,205:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:44,205:INFO:Creating metrics dataframe
2023-08-11 13:00:44,215:INFO:Initializing Decision Tree Regressor
2023-08-11 13:00:44,215:INFO:Total runtime is 0.10964829921722412 minutes
2023-08-11 13:00:44,217:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:44,217:INFO:Initializing create_model()
2023-08-11 13:00:44,217:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=dt, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:44,217:INFO:Checking exceptions
2023-08-11 13:00:44,217:INFO:Importing libraries
2023-08-11 13:00:44,217:INFO:Copying training dataset
2023-08-11 13:00:44,220:INFO:Defining folds
2023-08-11 13:00:44,220:INFO:Declaring metric variables
2023-08-11 13:00:44,222:INFO:Importing untrained model
2023-08-11 13:00:44,224:INFO:Decision Tree Regressor Imported successfully
2023-08-11 13:00:44,228:INFO:Starting cross validation
2023-08-11 13:00:44,229:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:44,593:INFO:Calculating mean and std
2023-08-11 13:00:44,594:INFO:Creating metrics dataframe
2023-08-11 13:00:44,659:INFO:Uploading results into container
2023-08-11 13:00:44,659:INFO:Uploading model into container now
2023-08-11 13:00:44,659:INFO:_master_model_container: 12
2023-08-11 13:00:44,659:INFO:_display_container: 2
2023-08-11 13:00:44,659:INFO:DecisionTreeRegressor(random_state=42)
2023-08-11 13:00:44,659:INFO:create_model() successfully completed......................................
2023-08-11 13:00:44,797:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:44,797:INFO:Creating metrics dataframe
2023-08-11 13:00:44,807:INFO:Initializing Random Forest Regressor
2023-08-11 13:00:44,807:INFO:Total runtime is 0.11952088673909506 minutes
2023-08-11 13:00:44,809:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:44,809:INFO:Initializing create_model()
2023-08-11 13:00:44,809:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=rf, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:44,809:INFO:Checking exceptions
2023-08-11 13:00:44,809:INFO:Importing libraries
2023-08-11 13:00:44,809:INFO:Copying training dataset
2023-08-11 13:00:44,812:INFO:Defining folds
2023-08-11 13:00:44,812:INFO:Declaring metric variables
2023-08-11 13:00:44,814:INFO:Importing untrained model
2023-08-11 13:00:44,816:INFO:Random Forest Regressor Imported successfully
2023-08-11 13:00:44,821:INFO:Starting cross validation
2023-08-11 13:00:44,822:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:45,739:INFO:Calculating mean and std
2023-08-11 13:00:45,741:INFO:Creating metrics dataframe
2023-08-11 13:00:45,812:INFO:Uploading results into container
2023-08-11 13:00:45,813:INFO:Uploading model into container now
2023-08-11 13:00:45,813:INFO:_master_model_container: 13
2023-08-11 13:00:45,813:INFO:_display_container: 2
2023-08-11 13:00:45,813:INFO:RandomForestRegressor(n_jobs=-1, random_state=42)
2023-08-11 13:00:45,813:INFO:create_model() successfully completed......................................
2023-08-11 13:00:45,951:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:45,951:INFO:Creating metrics dataframe
2023-08-11 13:00:45,961:INFO:Initializing Extra Trees Regressor
2023-08-11 13:00:45,961:INFO:Total runtime is 0.13875821828842164 minutes
2023-08-11 13:00:45,963:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:45,964:INFO:Initializing create_model()
2023-08-11 13:00:45,964:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=et, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:45,964:INFO:Checking exceptions
2023-08-11 13:00:45,964:INFO:Importing libraries
2023-08-11 13:00:45,964:INFO:Copying training dataset
2023-08-11 13:00:45,966:INFO:Defining folds
2023-08-11 13:00:45,966:INFO:Declaring metric variables
2023-08-11 13:00:45,968:INFO:Importing untrained model
2023-08-11 13:00:45,971:INFO:Extra Trees Regressor Imported successfully
2023-08-11 13:00:45,975:INFO:Starting cross validation
2023-08-11 13:00:45,976:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:46,829:INFO:Calculating mean and std
2023-08-11 13:00:46,831:INFO:Creating metrics dataframe
2023-08-11 13:00:46,902:INFO:Uploading results into container
2023-08-11 13:00:46,902:INFO:Uploading model into container now
2023-08-11 13:00:46,902:INFO:_master_model_container: 14
2023-08-11 13:00:46,902:INFO:_display_container: 2
2023-08-11 13:00:46,902:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=42)
2023-08-11 13:00:46,902:INFO:create_model() successfully completed......................................
2023-08-11 13:00:47,038:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:47,038:INFO:Creating metrics dataframe
2023-08-11 13:00:47,048:INFO:Initializing AdaBoost Regressor
2023-08-11 13:00:47,048:INFO:Total runtime is 0.15687830448150636 minutes
2023-08-11 13:00:47,050:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:47,051:INFO:Initializing create_model()
2023-08-11 13:00:47,051:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=ada, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:47,051:INFO:Checking exceptions
2023-08-11 13:00:47,051:INFO:Importing libraries
2023-08-11 13:00:47,051:INFO:Copying training dataset
2023-08-11 13:00:47,053:INFO:Defining folds
2023-08-11 13:00:47,053:INFO:Declaring metric variables
2023-08-11 13:00:47,055:INFO:Importing untrained model
2023-08-11 13:00:47,058:INFO:AdaBoost Regressor Imported successfully
2023-08-11 13:00:47,062:INFO:Starting cross validation
2023-08-11 13:00:47,062:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:47,486:INFO:Calculating mean and std
2023-08-11 13:00:47,487:INFO:Creating metrics dataframe
2023-08-11 13:00:47,556:INFO:Uploading results into container
2023-08-11 13:00:47,556:INFO:Uploading model into container now
2023-08-11 13:00:47,556:INFO:_master_model_container: 15
2023-08-11 13:00:47,556:INFO:_display_container: 2
2023-08-11 13:00:47,556:INFO:AdaBoostRegressor(random_state=42)
2023-08-11 13:00:47,556:INFO:create_model() successfully completed......................................
2023-08-11 13:00:47,692:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:47,693:INFO:Creating metrics dataframe
2023-08-11 13:00:47,703:INFO:Initializing Gradient Boosting Regressor
2023-08-11 13:00:47,703:INFO:Total runtime is 0.16778383652369183 minutes
2023-08-11 13:00:47,705:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:47,705:INFO:Initializing create_model()
2023-08-11 13:00:47,705:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=gbr, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:47,705:INFO:Checking exceptions
2023-08-11 13:00:47,705:INFO:Importing libraries
2023-08-11 13:00:47,705:INFO:Copying training dataset
2023-08-11 13:00:47,708:INFO:Defining folds
2023-08-11 13:00:47,708:INFO:Declaring metric variables
2023-08-11 13:00:47,710:INFO:Importing untrained model
2023-08-11 13:00:47,712:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 13:00:47,716:INFO:Starting cross validation
2023-08-11 13:00:47,717:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:48,146:INFO:Calculating mean and std
2023-08-11 13:00:48,147:INFO:Creating metrics dataframe
2023-08-11 13:00:48,216:INFO:Uploading results into container
2023-08-11 13:00:48,217:INFO:Uploading model into container now
2023-08-11 13:00:48,217:INFO:_master_model_container: 16
2023-08-11 13:00:48,217:INFO:_display_container: 2
2023-08-11 13:00:48,217:INFO:GradientBoostingRegressor(random_state=42)
2023-08-11 13:00:48,217:INFO:create_model() successfully completed......................................
2023-08-11 13:00:48,354:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:48,354:INFO:Creating metrics dataframe
2023-08-11 13:00:48,364:INFO:Initializing Extreme Gradient Boosting
2023-08-11 13:00:48,364:INFO:Total runtime is 0.178807536760966 minutes
2023-08-11 13:00:48,366:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:48,366:INFO:Initializing create_model()
2023-08-11 13:00:48,366:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=xgboost, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:48,366:INFO:Checking exceptions
2023-08-11 13:00:48,367:INFO:Importing libraries
2023-08-11 13:00:48,367:INFO:Copying training dataset
2023-08-11 13:00:48,369:INFO:Defining folds
2023-08-11 13:00:48,369:INFO:Declaring metric variables
2023-08-11 13:00:48,371:INFO:Importing untrained model
2023-08-11 13:00:48,374:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 13:00:48,378:INFO:Starting cross validation
2023-08-11 13:00:48,396:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:48,842:INFO:Calculating mean and std
2023-08-11 13:00:48,843:INFO:Creating metrics dataframe
2023-08-11 13:00:48,912:INFO:Uploading results into container
2023-08-11 13:00:48,913:INFO:Uploading model into container now
2023-08-11 13:00:48,913:INFO:_master_model_container: 17
2023-08-11 13:00:48,913:INFO:_display_container: 2
2023-08-11 13:00:48,914:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=42,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 13:00:48,914:INFO:create_model() successfully completed......................................
2023-08-11 13:00:49,050:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:49,050:INFO:Creating metrics dataframe
2023-08-11 13:00:49,060:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 13:00:49,060:INFO:Total runtime is 0.19041256507237755 minutes
2023-08-11 13:00:49,063:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:49,063:INFO:Initializing create_model()
2023-08-11 13:00:49,063:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:49,063:INFO:Checking exceptions
2023-08-11 13:00:49,063:INFO:Importing libraries
2023-08-11 13:00:49,063:INFO:Copying training dataset
2023-08-11 13:00:49,065:INFO:Defining folds
2023-08-11 13:00:49,065:INFO:Declaring metric variables
2023-08-11 13:00:49,067:INFO:Importing untrained model
2023-08-11 13:00:49,070:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 13:00:49,074:INFO:Starting cross validation
2023-08-11 13:00:49,075:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:49,473:INFO:Calculating mean and std
2023-08-11 13:00:49,474:INFO:Creating metrics dataframe
2023-08-11 13:00:49,544:INFO:Uploading results into container
2023-08-11 13:00:49,544:INFO:Uploading model into container now
2023-08-11 13:00:49,545:INFO:_master_model_container: 18
2023-08-11 13:00:49,545:INFO:_display_container: 2
2023-08-11 13:00:49,545:INFO:LGBMRegressor(random_state=42)
2023-08-11 13:00:49,545:INFO:create_model() successfully completed......................................
2023-08-11 13:00:49,683:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:49,683:INFO:Creating metrics dataframe
2023-08-11 13:00:49,693:INFO:Initializing CatBoost Regressor
2023-08-11 13:00:49,693:INFO:Total runtime is 0.2009624004364014 minutes
2023-08-11 13:00:49,695:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:49,696:INFO:Initializing create_model()
2023-08-11 13:00:49,696:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=catboost, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:49,696:INFO:Checking exceptions
2023-08-11 13:00:49,696:INFO:Importing libraries
2023-08-11 13:00:49,696:INFO:Copying training dataset
2023-08-11 13:00:49,698:INFO:Defining folds
2023-08-11 13:00:49,698:INFO:Declaring metric variables
2023-08-11 13:00:49,700:INFO:Importing untrained model
2023-08-11 13:00:49,702:INFO:CatBoost Regressor Imported successfully
2023-08-11 13:00:49,706:INFO:Starting cross validation
2023-08-11 13:00:49,707:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:50,471:INFO:Calculating mean and std
2023-08-11 13:00:50,472:INFO:Creating metrics dataframe
2023-08-11 13:00:50,544:INFO:Uploading results into container
2023-08-11 13:00:50,544:INFO:Uploading model into container now
2023-08-11 13:00:50,544:INFO:_master_model_container: 19
2023-08-11 13:00:50,544:INFO:_display_container: 2
2023-08-11 13:00:50,544:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d2196d450>
2023-08-11 13:00:50,545:INFO:create_model() successfully completed......................................
2023-08-11 13:00:50,681:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:50,681:INFO:Creating metrics dataframe
2023-08-11 13:00:50,692:INFO:Initializing Dummy Regressor
2023-08-11 13:00:50,692:INFO:Total runtime is 0.21760715246200565 minutes
2023-08-11 13:00:50,694:INFO:SubProcess create_model() called ==================================
2023-08-11 13:00:50,694:INFO:Initializing create_model()
2023-08-11 13:00:50,694:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=dummy, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d43646ad0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:50,694:INFO:Checking exceptions
2023-08-11 13:00:50,694:INFO:Importing libraries
2023-08-11 13:00:50,694:INFO:Copying training dataset
2023-08-11 13:00:50,697:INFO:Defining folds
2023-08-11 13:00:50,697:INFO:Declaring metric variables
2023-08-11 13:00:50,699:INFO:Importing untrained model
2023-08-11 13:00:50,701:INFO:Dummy Regressor Imported successfully
2023-08-11 13:00:50,705:INFO:Starting cross validation
2023-08-11 13:00:50,706:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:00:51,088:INFO:Calculating mean and std
2023-08-11 13:00:51,089:INFO:Creating metrics dataframe
2023-08-11 13:00:51,159:INFO:Uploading results into container
2023-08-11 13:00:51,160:INFO:Uploading model into container now
2023-08-11 13:00:51,160:INFO:_master_model_container: 20
2023-08-11 13:00:51,160:INFO:_display_container: 2
2023-08-11 13:00:51,160:INFO:DummyRegressor()
2023-08-11 13:00:51,160:INFO:create_model() successfully completed......................................
2023-08-11 13:00:51,297:INFO:SubProcess create_model() end ==================================
2023-08-11 13:00:51,297:INFO:Creating metrics dataframe
2023-08-11 13:00:51,314:INFO:Initializing create_model()
2023-08-11 13:00:51,314:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22f8b950>, estimator=<catboost.core.CatBoostRegressor object at 0x7f9d2196d450>, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:00:51,314:INFO:Checking exceptions
2023-08-11 13:00:51,315:INFO:Importing libraries
2023-08-11 13:00:51,315:INFO:Copying training dataset
2023-08-11 13:00:51,316:INFO:Defining folds
2023-08-11 13:00:51,316:INFO:Declaring metric variables
2023-08-11 13:00:51,317:INFO:Importing untrained model
2023-08-11 13:00:51,317:INFO:Declaring custom model
2023-08-11 13:00:51,317:INFO:CatBoost Regressor Imported successfully
2023-08-11 13:00:51,317:INFO:Cross validation set to False
2023-08-11 13:00:51,317:INFO:Fitting Model
2023-08-11 13:00:51,592:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d22cc1f50>
2023-08-11 13:00:51,592:INFO:create_model() successfully completed......................................
2023-08-11 13:00:51,756:INFO:_master_model_container: 20
2023-08-11 13:00:51,757:INFO:_display_container: 2
2023-08-11 13:00:51,757:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d22cc1f50>
2023-08-11 13:00:51,757:INFO:compare_models() successfully completed......................................
2023-08-11 13:16:48,475:INFO:PyCaret RegressionExperiment
2023-08-11 13:16:48,475:INFO:Logging name: reg-default-name
2023-08-11 13:16:48,475:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 13:16:48,475:INFO:version 3.0.2
2023-08-11 13:16:48,475:INFO:Initializing setup()
2023-08-11 13:16:48,475:INFO:self.USI: b82a
2023-08-11 13:16:48,475:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 13:16:48,475:INFO:Checking environment
2023-08-11 13:16:48,475:INFO:python_version: 3.7.13
2023-08-11 13:16:48,475:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 13:16:48,475:INFO:machine: x86_64
2023-08-11 13:16:48,476:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 13:16:48,476:INFO:Memory: svmem(total=17179869184, available=1336881152, percent=92.2, used=1731977216, free=45367296, active=1295273984, inactive=1277366272, wired=436703232)
2023-08-11 13:16:48,476:INFO:Physical Core: 8
2023-08-11 13:16:48,476:INFO:Logical Core: 8
2023-08-11 13:16:48,476:INFO:Checking libraries
2023-08-11 13:16:48,476:INFO:System:
2023-08-11 13:16:48,476:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 13:16:48,476:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 13:16:48,476:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 13:16:48,476:INFO:PyCaret required dependencies:
2023-08-11 13:16:48,476:INFO:                 pip: 22.3.1
2023-08-11 13:16:48,476:INFO:          setuptools: 63.4.1
2023-08-11 13:16:48,476:INFO:             pycaret: 3.0.2
2023-08-11 13:16:48,476:INFO:             IPython: 7.33.0
2023-08-11 13:16:48,476:INFO:          ipywidgets: 8.0.2
2023-08-11 13:16:48,476:INFO:                tqdm: 4.64.1
2023-08-11 13:16:48,476:INFO:               numpy: 1.21.5
2023-08-11 13:16:48,476:INFO:              pandas: 1.3.5
2023-08-11 13:16:48,476:INFO:              jinja2: 3.1.2
2023-08-11 13:16:48,476:INFO:               scipy: 1.7.3
2023-08-11 13:16:48,476:INFO:              joblib: 1.2.0
2023-08-11 13:16:48,476:INFO:             sklearn: 1.0.2
2023-08-11 13:16:48,476:INFO:                pyod: 1.0.9
2023-08-11 13:16:48,476:INFO:            imblearn: 0.10.1
2023-08-11 13:16:48,476:INFO:   category_encoders: 2.6.1
2023-08-11 13:16:48,476:INFO:            lightgbm: 3.3.2
2023-08-11 13:16:48,476:INFO:               numba: 0.56.2
2023-08-11 13:16:48,476:INFO:            requests: 2.28.1
2023-08-11 13:16:48,476:INFO:          matplotlib: 3.5.3
2023-08-11 13:16:48,477:INFO:          scikitplot: 0.3.7
2023-08-11 13:16:48,477:INFO:         yellowbrick: 1.5
2023-08-11 13:16:48,477:INFO:              plotly: 5.13.0
2023-08-11 13:16:48,477:INFO:             kaleido: 0.2.1
2023-08-11 13:16:48,477:INFO:         statsmodels: 0.13.2
2023-08-11 13:16:48,477:INFO:              sktime: 0.17.0
2023-08-11 13:16:48,477:INFO:               tbats: 1.1.3
2023-08-11 13:16:48,477:INFO:            pmdarima: 2.0.3
2023-08-11 13:16:48,477:INFO:              psutil: 5.9.2
2023-08-11 13:16:48,477:INFO:PyCaret optional dependencies:
2023-08-11 13:16:48,477:INFO:                shap: Not installed
2023-08-11 13:16:48,477:INFO:           interpret: Not installed
2023-08-11 13:16:48,477:INFO:                umap: 0.5.3
2023-08-11 13:16:48,477:INFO:    pandas_profiling: 3.0.0
2023-08-11 13:16:48,477:INFO:  explainerdashboard: Not installed
2023-08-11 13:16:48,477:INFO:             autoviz: Not installed
2023-08-11 13:16:48,477:INFO:           fairlearn: Not installed
2023-08-11 13:16:48,477:INFO:             xgboost: 1.6.2
2023-08-11 13:16:48,477:INFO:            catboost: 1.0.4
2023-08-11 13:16:48,477:INFO:              kmodes: 0.12.2
2023-08-11 13:16:48,477:INFO:             mlxtend: 0.19.0
2023-08-11 13:16:48,477:INFO:       statsforecast: Not installed
2023-08-11 13:16:48,477:INFO:        tune_sklearn: Not installed
2023-08-11 13:16:48,477:INFO:                 ray: Not installed
2023-08-11 13:16:48,477:INFO:            hyperopt: Not installed
2023-08-11 13:16:48,477:INFO:              optuna: Not installed
2023-08-11 13:16:48,477:INFO:               skopt: Not installed
2023-08-11 13:16:48,477:INFO:              mlflow: 1.29.0
2023-08-11 13:16:48,477:INFO:              gradio: Not installed
2023-08-11 13:16:48,477:INFO:             fastapi: Not installed
2023-08-11 13:16:48,477:INFO:             uvicorn: Not installed
2023-08-11 13:16:48,477:INFO:              m2cgen: Not installed
2023-08-11 13:16:48,477:INFO:           evidently: Not installed
2023-08-11 13:16:48,477:INFO:               fugue: Not installed
2023-08-11 13:16:48,477:INFO:           streamlit: 1.13.0
2023-08-11 13:16:48,477:INFO:             prophet: Not installed
2023-08-11 13:16:48,477:INFO:None
2023-08-11 13:16:48,478:INFO:Set up data.
2023-08-11 13:16:48,481:INFO:Set up train/test split.
2023-08-11 13:16:48,482:INFO:Set up index.
2023-08-11 13:16:48,482:INFO:Set up folding strategy.
2023-08-11 13:16:48,482:INFO:Assigning column types.
2023-08-11 13:16:48,485:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 13:16:48,486:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,490:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,494:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,540:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,576:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,576:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:16:48,578:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:16:48,579:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,583:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,586:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,632:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,668:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,668:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:16:48,670:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:16:48,671:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 13:16:48,675:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,678:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,723:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,759:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,760:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:16:48,762:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:16:48,766:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,769:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,814:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,850:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,850:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:16:48,852:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:16:48,853:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 13:16:48,860:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,905:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,941:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,941:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:16:48,943:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:16:48,951:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:16:48,996:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:16:49,031:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:16:49,032:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:16:49,034:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:16:49,034:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 13:16:49,086:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:16:49,122:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:16:49,122:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:16:49,124:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:16:49,177:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:16:49,213:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:16:49,213:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:16:49,215:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:16:49,215:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 13:16:49,267:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:16:49,303:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:16:49,305:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:16:49,358:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:16:49,394:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:16:49,396:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:16:49,396:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 13:16:49,485:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:16:49,487:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:16:49,576:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:16:49,578:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:16:49,579:INFO:Preparing preprocessing pipeline...
2023-08-11 13:16:49,579:INFO:Set up simple imputation.
2023-08-11 13:16:49,589:INFO:Finished creating preprocessing pipeline.
2023-08-11 13:16:49,591:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ABC', 'nAcid', 'AATS0i', 'ATSC4c',
                                             'PEOE_VSA13', 'EState_VSA6'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-11 13:16:49,592:INFO:Creating final display dataframe.
2023-08-11 13:16:49,632:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target               pKi
2                   Target type        Regression
3           Original data shape          (316, 7)
4        Transformed data shape          (316, 7)
5   Transformed train set shape          (221, 7)
6    Transformed test set shape           (95, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              b82a
2023-08-11 13:16:49,732:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:16:49,735:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:16:49,823:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:16:49,825:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:16:49,826:INFO:setup() successfully completed in 1.42s...............
2023-08-11 13:16:52,273:INFO:Initializing compare_models()
2023-08-11 13:16:52,274:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 13:16:52,276:INFO:Checking exceptions
2023-08-11 13:16:52,279:INFO:Preparing display monitor
2023-08-11 13:16:52,333:INFO:Initializing Linear Regression
2023-08-11 13:16:52,334:INFO:Total runtime is 3.699461619059245e-06 minutes
2023-08-11 13:16:52,337:INFO:SubProcess create_model() called ==================================
2023-08-11 13:16:52,338:INFO:Initializing create_model()
2023-08-11 13:16:52,338:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=lr, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:16:52,338:INFO:Checking exceptions
2023-08-11 13:16:52,338:INFO:Importing libraries
2023-08-11 13:16:52,338:INFO:Copying training dataset
2023-08-11 13:16:52,341:INFO:Defining folds
2023-08-11 13:16:52,341:INFO:Declaring metric variables
2023-08-11 13:16:52,344:INFO:Importing untrained model
2023-08-11 13:16:52,347:INFO:Linear Regression Imported successfully
2023-08-11 13:16:52,353:INFO:Starting cross validation
2023-08-11 13:16:52,354:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:16:56,110:INFO:Calculating mean and std
2023-08-11 13:16:56,113:INFO:Creating metrics dataframe
2023-08-11 13:16:56,186:INFO:Uploading results into container
2023-08-11 13:16:56,187:INFO:Uploading model into container now
2023-08-11 13:16:56,187:INFO:_master_model_container: 1
2023-08-11 13:16:56,187:INFO:_display_container: 2
2023-08-11 13:16:56,187:INFO:LinearRegression(n_jobs=-1)
2023-08-11 13:16:56,187:INFO:create_model() successfully completed......................................
2023-08-11 13:16:56,463:INFO:SubProcess create_model() end ==================================
2023-08-11 13:16:56,463:INFO:Creating metrics dataframe
2023-08-11 13:16:56,471:INFO:Initializing Lasso Regression
2023-08-11 13:16:56,471:INFO:Total runtime is 0.06895971298217773 minutes
2023-08-11 13:16:56,473:INFO:SubProcess create_model() called ==================================
2023-08-11 13:16:56,473:INFO:Initializing create_model()
2023-08-11 13:16:56,473:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=lasso, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:16:56,473:INFO:Checking exceptions
2023-08-11 13:16:56,473:INFO:Importing libraries
2023-08-11 13:16:56,474:INFO:Copying training dataset
2023-08-11 13:16:56,476:INFO:Defining folds
2023-08-11 13:16:56,476:INFO:Declaring metric variables
2023-08-11 13:16:56,478:INFO:Importing untrained model
2023-08-11 13:16:56,481:INFO:Lasso Regression Imported successfully
2023-08-11 13:16:56,485:INFO:Starting cross validation
2023-08-11 13:16:56,486:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:16:56,864:INFO:Calculating mean and std
2023-08-11 13:16:56,866:INFO:Creating metrics dataframe
2023-08-11 13:16:56,937:INFO:Uploading results into container
2023-08-11 13:16:56,938:INFO:Uploading model into container now
2023-08-11 13:16:56,938:INFO:_master_model_container: 2
2023-08-11 13:16:56,938:INFO:_display_container: 2
2023-08-11 13:16:56,938:INFO:Lasso(random_state=42)
2023-08-11 13:16:56,938:INFO:create_model() successfully completed......................................
2023-08-11 13:16:57,094:INFO:SubProcess create_model() end ==================================
2023-08-11 13:16:57,094:INFO:Creating metrics dataframe
2023-08-11 13:16:57,102:INFO:Initializing Ridge Regression
2023-08-11 13:16:57,102:INFO:Total runtime is 0.07947146495183309 minutes
2023-08-11 13:16:57,104:INFO:SubProcess create_model() called ==================================
2023-08-11 13:16:57,104:INFO:Initializing create_model()
2023-08-11 13:16:57,104:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=ridge, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:16:57,104:INFO:Checking exceptions
2023-08-11 13:16:57,104:INFO:Importing libraries
2023-08-11 13:16:57,104:INFO:Copying training dataset
2023-08-11 13:16:57,106:INFO:Defining folds
2023-08-11 13:16:57,107:INFO:Declaring metric variables
2023-08-11 13:16:57,109:INFO:Importing untrained model
2023-08-11 13:16:57,111:INFO:Ridge Regression Imported successfully
2023-08-11 13:16:57,115:INFO:Starting cross validation
2023-08-11 13:16:57,116:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:16:57,489:INFO:Calculating mean and std
2023-08-11 13:16:57,490:INFO:Creating metrics dataframe
2023-08-11 13:16:57,559:INFO:Uploading results into container
2023-08-11 13:16:57,560:INFO:Uploading model into container now
2023-08-11 13:16:57,560:INFO:_master_model_container: 3
2023-08-11 13:16:57,560:INFO:_display_container: 2
2023-08-11 13:16:57,560:INFO:Ridge(random_state=42)
2023-08-11 13:16:57,560:INFO:create_model() successfully completed......................................
2023-08-11 13:16:57,716:INFO:SubProcess create_model() end ==================================
2023-08-11 13:16:57,716:INFO:Creating metrics dataframe
2023-08-11 13:16:57,725:INFO:Initializing Elastic Net
2023-08-11 13:16:57,725:INFO:Total runtime is 0.08985429604848226 minutes
2023-08-11 13:16:57,727:INFO:SubProcess create_model() called ==================================
2023-08-11 13:16:57,727:INFO:Initializing create_model()
2023-08-11 13:16:57,727:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=en, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:16:57,727:INFO:Checking exceptions
2023-08-11 13:16:57,727:INFO:Importing libraries
2023-08-11 13:16:57,727:INFO:Copying training dataset
2023-08-11 13:16:57,729:INFO:Defining folds
2023-08-11 13:16:57,730:INFO:Declaring metric variables
2023-08-11 13:16:57,732:INFO:Importing untrained model
2023-08-11 13:16:57,734:INFO:Elastic Net Imported successfully
2023-08-11 13:16:57,738:INFO:Starting cross validation
2023-08-11 13:16:57,738:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:16:58,120:INFO:Calculating mean and std
2023-08-11 13:16:58,121:INFO:Creating metrics dataframe
2023-08-11 13:16:58,190:INFO:Uploading results into container
2023-08-11 13:16:58,190:INFO:Uploading model into container now
2023-08-11 13:16:58,190:INFO:_master_model_container: 4
2023-08-11 13:16:58,190:INFO:_display_container: 2
2023-08-11 13:16:58,190:INFO:ElasticNet(random_state=42)
2023-08-11 13:16:58,190:INFO:create_model() successfully completed......................................
2023-08-11 13:16:58,345:INFO:SubProcess create_model() end ==================================
2023-08-11 13:16:58,345:INFO:Creating metrics dataframe
2023-08-11 13:16:58,354:INFO:Initializing Least Angle Regression
2023-08-11 13:16:58,354:INFO:Total runtime is 0.10033830006917317 minutes
2023-08-11 13:16:58,356:INFO:SubProcess create_model() called ==================================
2023-08-11 13:16:58,356:INFO:Initializing create_model()
2023-08-11 13:16:58,356:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=lar, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:16:58,356:INFO:Checking exceptions
2023-08-11 13:16:58,356:INFO:Importing libraries
2023-08-11 13:16:58,356:INFO:Copying training dataset
2023-08-11 13:16:58,359:INFO:Defining folds
2023-08-11 13:16:58,359:INFO:Declaring metric variables
2023-08-11 13:16:58,361:INFO:Importing untrained model
2023-08-11 13:16:58,363:INFO:Least Angle Regression Imported successfully
2023-08-11 13:16:58,367:INFO:Starting cross validation
2023-08-11 13:16:58,368:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:16:58,403:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:58,408:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:58,411:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:58,425:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:58,439:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:58,441:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:58,445:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:58,478:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:58,506:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:58,515:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:58,741:INFO:Calculating mean and std
2023-08-11 13:16:58,743:INFO:Creating metrics dataframe
2023-08-11 13:16:58,814:INFO:Uploading results into container
2023-08-11 13:16:58,815:INFO:Uploading model into container now
2023-08-11 13:16:58,815:INFO:_master_model_container: 5
2023-08-11 13:16:58,815:INFO:_display_container: 2
2023-08-11 13:16:58,815:INFO:Lars(random_state=42)
2023-08-11 13:16:58,815:INFO:create_model() successfully completed......................................
2023-08-11 13:16:58,973:INFO:SubProcess create_model() end ==================================
2023-08-11 13:16:58,973:INFO:Creating metrics dataframe
2023-08-11 13:16:58,981:INFO:Initializing Lasso Least Angle Regression
2023-08-11 13:16:58,981:INFO:Total runtime is 0.11079566478729247 minutes
2023-08-11 13:16:58,983:INFO:SubProcess create_model() called ==================================
2023-08-11 13:16:58,983:INFO:Initializing create_model()
2023-08-11 13:16:58,983:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=llar, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:16:58,983:INFO:Checking exceptions
2023-08-11 13:16:58,983:INFO:Importing libraries
2023-08-11 13:16:58,984:INFO:Copying training dataset
2023-08-11 13:16:58,986:INFO:Defining folds
2023-08-11 13:16:58,986:INFO:Declaring metric variables
2023-08-11 13:16:58,988:INFO:Importing untrained model
2023-08-11 13:16:58,990:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 13:16:58,995:INFO:Starting cross validation
2023-08-11 13:16:58,995:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:16:59,029:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:16:59,033:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:16:59,042:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:16:59,056:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:16:59,060:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:16:59,060:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:16:59,073:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:16:59,080:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:16:59,127:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:16:59,136:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:16:59,384:INFO:Calculating mean and std
2023-08-11 13:16:59,385:INFO:Creating metrics dataframe
2023-08-11 13:16:59,454:INFO:Uploading results into container
2023-08-11 13:16:59,454:INFO:Uploading model into container now
2023-08-11 13:16:59,455:INFO:_master_model_container: 6
2023-08-11 13:16:59,455:INFO:_display_container: 2
2023-08-11 13:16:59,455:INFO:LassoLars(random_state=42)
2023-08-11 13:16:59,455:INFO:create_model() successfully completed......................................
2023-08-11 13:16:59,610:INFO:SubProcess create_model() end ==================================
2023-08-11 13:16:59,610:INFO:Creating metrics dataframe
2023-08-11 13:16:59,619:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 13:16:59,619:INFO:Total runtime is 0.12142672936121622 minutes
2023-08-11 13:16:59,621:INFO:SubProcess create_model() called ==================================
2023-08-11 13:16:59,621:INFO:Initializing create_model()
2023-08-11 13:16:59,621:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=omp, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:16:59,621:INFO:Checking exceptions
2023-08-11 13:16:59,621:INFO:Importing libraries
2023-08-11 13:16:59,621:INFO:Copying training dataset
2023-08-11 13:16:59,624:INFO:Defining folds
2023-08-11 13:16:59,624:INFO:Declaring metric variables
2023-08-11 13:16:59,626:INFO:Importing untrained model
2023-08-11 13:16:59,628:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 13:16:59,632:INFO:Starting cross validation
2023-08-11 13:16:59,633:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:16:59,665:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:59,669:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:59,675:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:59,689:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:59,695:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:59,704:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:59,714:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:59,732:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:59,759:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:16:59,775:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:17:00,022:INFO:Calculating mean and std
2023-08-11 13:17:00,023:INFO:Creating metrics dataframe
2023-08-11 13:17:00,093:INFO:Uploading results into container
2023-08-11 13:17:00,093:INFO:Uploading model into container now
2023-08-11 13:17:00,094:INFO:_master_model_container: 7
2023-08-11 13:17:00,094:INFO:_display_container: 2
2023-08-11 13:17:00,094:INFO:OrthogonalMatchingPursuit()
2023-08-11 13:17:00,094:INFO:create_model() successfully completed......................................
2023-08-11 13:17:00,250:INFO:SubProcess create_model() end ==================================
2023-08-11 13:17:00,250:INFO:Creating metrics dataframe
2023-08-11 13:17:00,258:INFO:Initializing Bayesian Ridge
2023-08-11 13:17:00,259:INFO:Total runtime is 0.13208553393681843 minutes
2023-08-11 13:17:00,261:INFO:SubProcess create_model() called ==================================
2023-08-11 13:17:00,261:INFO:Initializing create_model()
2023-08-11 13:17:00,261:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=br, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:17:00,261:INFO:Checking exceptions
2023-08-11 13:17:00,261:INFO:Importing libraries
2023-08-11 13:17:00,261:INFO:Copying training dataset
2023-08-11 13:17:00,263:INFO:Defining folds
2023-08-11 13:17:00,263:INFO:Declaring metric variables
2023-08-11 13:17:00,265:INFO:Importing untrained model
2023-08-11 13:17:00,267:INFO:Bayesian Ridge Imported successfully
2023-08-11 13:17:00,272:INFO:Starting cross validation
2023-08-11 13:17:00,272:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:17:00,660:INFO:Calculating mean and std
2023-08-11 13:17:00,661:INFO:Creating metrics dataframe
2023-08-11 13:17:00,731:INFO:Uploading results into container
2023-08-11 13:17:00,731:INFO:Uploading model into container now
2023-08-11 13:17:00,731:INFO:_master_model_container: 8
2023-08-11 13:17:00,732:INFO:_display_container: 2
2023-08-11 13:17:00,732:INFO:BayesianRidge()
2023-08-11 13:17:00,732:INFO:create_model() successfully completed......................................
2023-08-11 13:17:00,887:INFO:SubProcess create_model() end ==================================
2023-08-11 13:17:00,887:INFO:Creating metrics dataframe
2023-08-11 13:17:00,896:INFO:Initializing Passive Aggressive Regressor
2023-08-11 13:17:00,896:INFO:Total runtime is 0.14271076520284015 minutes
2023-08-11 13:17:00,898:INFO:SubProcess create_model() called ==================================
2023-08-11 13:17:00,898:INFO:Initializing create_model()
2023-08-11 13:17:00,898:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=par, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:17:00,898:INFO:Checking exceptions
2023-08-11 13:17:00,898:INFO:Importing libraries
2023-08-11 13:17:00,898:INFO:Copying training dataset
2023-08-11 13:17:00,901:INFO:Defining folds
2023-08-11 13:17:00,901:INFO:Declaring metric variables
2023-08-11 13:17:00,903:INFO:Importing untrained model
2023-08-11 13:17:00,905:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 13:17:00,910:INFO:Starting cross validation
2023-08-11 13:17:00,910:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:17:01,296:INFO:Calculating mean and std
2023-08-11 13:17:01,298:INFO:Creating metrics dataframe
2023-08-11 13:17:01,367:INFO:Uploading results into container
2023-08-11 13:17:01,368:INFO:Uploading model into container now
2023-08-11 13:17:01,368:INFO:_master_model_container: 9
2023-08-11 13:17:01,368:INFO:_display_container: 2
2023-08-11 13:17:01,368:INFO:PassiveAggressiveRegressor(random_state=42)
2023-08-11 13:17:01,368:INFO:create_model() successfully completed......................................
2023-08-11 13:17:01,528:INFO:SubProcess create_model() end ==================================
2023-08-11 13:17:01,528:INFO:Creating metrics dataframe
2023-08-11 13:17:01,537:INFO:Initializing Huber Regressor
2023-08-11 13:17:01,537:INFO:Total runtime is 0.15339799722035724 minutes
2023-08-11 13:17:01,539:INFO:SubProcess create_model() called ==================================
2023-08-11 13:17:01,539:INFO:Initializing create_model()
2023-08-11 13:17:01,539:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=huber, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:17:01,539:INFO:Checking exceptions
2023-08-11 13:17:01,539:INFO:Importing libraries
2023-08-11 13:17:01,540:INFO:Copying training dataset
2023-08-11 13:17:01,542:INFO:Defining folds
2023-08-11 13:17:01,542:INFO:Declaring metric variables
2023-08-11 13:17:01,544:INFO:Importing untrained model
2023-08-11 13:17:01,546:INFO:Huber Regressor Imported successfully
2023-08-11 13:17:01,551:INFO:Starting cross validation
2023-08-11 13:17:01,552:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:17:01,945:INFO:Calculating mean and std
2023-08-11 13:17:01,946:INFO:Creating metrics dataframe
2023-08-11 13:17:02,015:INFO:Uploading results into container
2023-08-11 13:17:02,016:INFO:Uploading model into container now
2023-08-11 13:17:02,016:INFO:_master_model_container: 10
2023-08-11 13:17:02,016:INFO:_display_container: 2
2023-08-11 13:17:02,016:INFO:HuberRegressor()
2023-08-11 13:17:02,016:INFO:create_model() successfully completed......................................
2023-08-11 13:17:02,171:INFO:SubProcess create_model() end ==================================
2023-08-11 13:17:02,171:INFO:Creating metrics dataframe
2023-08-11 13:17:02,180:INFO:Initializing K Neighbors Regressor
2023-08-11 13:17:02,180:INFO:Total runtime is 0.16411743164062498 minutes
2023-08-11 13:17:02,183:INFO:SubProcess create_model() called ==================================
2023-08-11 13:17:02,183:INFO:Initializing create_model()
2023-08-11 13:17:02,183:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=knn, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:17:02,183:INFO:Checking exceptions
2023-08-11 13:17:02,183:INFO:Importing libraries
2023-08-11 13:17:02,183:INFO:Copying training dataset
2023-08-11 13:17:02,185:INFO:Defining folds
2023-08-11 13:17:02,186:INFO:Declaring metric variables
2023-08-11 13:17:02,188:INFO:Importing untrained model
2023-08-11 13:17:02,190:INFO:K Neighbors Regressor Imported successfully
2023-08-11 13:17:02,194:INFO:Starting cross validation
2023-08-11 13:17:02,194:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:17:02,652:INFO:Calculating mean and std
2023-08-11 13:17:02,653:INFO:Creating metrics dataframe
2023-08-11 13:17:02,723:INFO:Uploading results into container
2023-08-11 13:17:02,723:INFO:Uploading model into container now
2023-08-11 13:17:02,723:INFO:_master_model_container: 11
2023-08-11 13:17:02,723:INFO:_display_container: 2
2023-08-11 13:17:02,724:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 13:17:02,724:INFO:create_model() successfully completed......................................
2023-08-11 13:17:02,879:INFO:SubProcess create_model() end ==================================
2023-08-11 13:17:02,879:INFO:Creating metrics dataframe
2023-08-11 13:17:02,889:INFO:Initializing Decision Tree Regressor
2023-08-11 13:17:02,889:INFO:Total runtime is 0.1759207487106323 minutes
2023-08-11 13:17:02,891:INFO:SubProcess create_model() called ==================================
2023-08-11 13:17:02,891:INFO:Initializing create_model()
2023-08-11 13:17:02,891:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=dt, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:17:02,891:INFO:Checking exceptions
2023-08-11 13:17:02,891:INFO:Importing libraries
2023-08-11 13:17:02,891:INFO:Copying training dataset
2023-08-11 13:17:02,894:INFO:Defining folds
2023-08-11 13:17:02,894:INFO:Declaring metric variables
2023-08-11 13:17:02,896:INFO:Importing untrained model
2023-08-11 13:17:02,898:INFO:Decision Tree Regressor Imported successfully
2023-08-11 13:17:02,902:INFO:Starting cross validation
2023-08-11 13:17:02,902:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:17:03,278:INFO:Calculating mean and std
2023-08-11 13:17:03,279:INFO:Creating metrics dataframe
2023-08-11 13:17:03,349:INFO:Uploading results into container
2023-08-11 13:17:03,349:INFO:Uploading model into container now
2023-08-11 13:17:03,349:INFO:_master_model_container: 12
2023-08-11 13:17:03,349:INFO:_display_container: 2
2023-08-11 13:17:03,350:INFO:DecisionTreeRegressor(random_state=42)
2023-08-11 13:17:03,350:INFO:create_model() successfully completed......................................
2023-08-11 13:17:03,506:INFO:SubProcess create_model() end ==================================
2023-08-11 13:17:03,506:INFO:Creating metrics dataframe
2023-08-11 13:17:03,515:INFO:Initializing Random Forest Regressor
2023-08-11 13:17:03,516:INFO:Total runtime is 0.186369514465332 minutes
2023-08-11 13:17:03,518:INFO:SubProcess create_model() called ==================================
2023-08-11 13:17:03,518:INFO:Initializing create_model()
2023-08-11 13:17:03,518:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=rf, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:17:03,518:INFO:Checking exceptions
2023-08-11 13:17:03,518:INFO:Importing libraries
2023-08-11 13:17:03,518:INFO:Copying training dataset
2023-08-11 13:17:03,520:INFO:Defining folds
2023-08-11 13:17:03,520:INFO:Declaring metric variables
2023-08-11 13:17:03,523:INFO:Importing untrained model
2023-08-11 13:17:03,525:INFO:Random Forest Regressor Imported successfully
2023-08-11 13:17:03,529:INFO:Starting cross validation
2023-08-11 13:17:03,529:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:17:04,469:INFO:Calculating mean and std
2023-08-11 13:17:04,470:INFO:Creating metrics dataframe
2023-08-11 13:17:04,542:INFO:Uploading results into container
2023-08-11 13:17:04,543:INFO:Uploading model into container now
2023-08-11 13:17:04,543:INFO:_master_model_container: 13
2023-08-11 13:17:04,543:INFO:_display_container: 2
2023-08-11 13:17:04,543:INFO:RandomForestRegressor(n_jobs=-1, random_state=42)
2023-08-11 13:17:04,543:INFO:create_model() successfully completed......................................
2023-08-11 13:17:04,699:INFO:SubProcess create_model() end ==================================
2023-08-11 13:17:04,699:INFO:Creating metrics dataframe
2023-08-11 13:17:04,708:INFO:Initializing Extra Trees Regressor
2023-08-11 13:17:04,708:INFO:Total runtime is 0.20625114838282266 minutes
2023-08-11 13:17:04,711:INFO:SubProcess create_model() called ==================================
2023-08-11 13:17:04,711:INFO:Initializing create_model()
2023-08-11 13:17:04,711:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=et, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:17:04,711:INFO:Checking exceptions
2023-08-11 13:17:04,711:INFO:Importing libraries
2023-08-11 13:17:04,711:INFO:Copying training dataset
2023-08-11 13:17:04,713:INFO:Defining folds
2023-08-11 13:17:04,713:INFO:Declaring metric variables
2023-08-11 13:17:04,715:INFO:Importing untrained model
2023-08-11 13:17:04,718:INFO:Extra Trees Regressor Imported successfully
2023-08-11 13:17:04,722:INFO:Starting cross validation
2023-08-11 13:17:04,723:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:17:05,586:INFO:Calculating mean and std
2023-08-11 13:17:05,588:INFO:Creating metrics dataframe
2023-08-11 13:17:05,662:INFO:Uploading results into container
2023-08-11 13:17:05,663:INFO:Uploading model into container now
2023-08-11 13:17:05,663:INFO:_master_model_container: 14
2023-08-11 13:17:05,663:INFO:_display_container: 2
2023-08-11 13:17:05,663:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=42)
2023-08-11 13:17:05,663:INFO:create_model() successfully completed......................................
2023-08-11 13:17:05,820:INFO:SubProcess create_model() end ==================================
2023-08-11 13:17:05,820:INFO:Creating metrics dataframe
2023-08-11 13:17:05,830:INFO:Initializing AdaBoost Regressor
2023-08-11 13:17:05,830:INFO:Total runtime is 0.2249431610107422 minutes
2023-08-11 13:17:05,832:INFO:SubProcess create_model() called ==================================
2023-08-11 13:17:05,832:INFO:Initializing create_model()
2023-08-11 13:17:05,832:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=ada, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:17:05,832:INFO:Checking exceptions
2023-08-11 13:17:05,832:INFO:Importing libraries
2023-08-11 13:17:05,832:INFO:Copying training dataset
2023-08-11 13:17:05,835:INFO:Defining folds
2023-08-11 13:17:05,835:INFO:Declaring metric variables
2023-08-11 13:17:05,837:INFO:Importing untrained model
2023-08-11 13:17:05,839:INFO:AdaBoost Regressor Imported successfully
2023-08-11 13:17:05,843:INFO:Starting cross validation
2023-08-11 13:17:05,844:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:17:06,285:INFO:Calculating mean and std
2023-08-11 13:17:06,286:INFO:Creating metrics dataframe
2023-08-11 13:17:06,360:INFO:Uploading results into container
2023-08-11 13:17:06,360:INFO:Uploading model into container now
2023-08-11 13:17:06,361:INFO:_master_model_container: 15
2023-08-11 13:17:06,361:INFO:_display_container: 2
2023-08-11 13:17:06,361:INFO:AdaBoostRegressor(random_state=42)
2023-08-11 13:17:06,361:INFO:create_model() successfully completed......................................
2023-08-11 13:17:06,518:INFO:SubProcess create_model() end ==================================
2023-08-11 13:17:06,518:INFO:Creating metrics dataframe
2023-08-11 13:17:06,528:INFO:Initializing Gradient Boosting Regressor
2023-08-11 13:17:06,528:INFO:Total runtime is 0.23657983144124348 minutes
2023-08-11 13:17:06,530:INFO:SubProcess create_model() called ==================================
2023-08-11 13:17:06,530:INFO:Initializing create_model()
2023-08-11 13:17:06,530:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=gbr, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:17:06,530:INFO:Checking exceptions
2023-08-11 13:17:06,531:INFO:Importing libraries
2023-08-11 13:17:06,531:INFO:Copying training dataset
2023-08-11 13:17:06,533:INFO:Defining folds
2023-08-11 13:17:06,533:INFO:Declaring metric variables
2023-08-11 13:17:06,535:INFO:Importing untrained model
2023-08-11 13:17:06,537:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 13:17:06,542:INFO:Starting cross validation
2023-08-11 13:17:06,542:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:17:07,013:INFO:Calculating mean and std
2023-08-11 13:17:07,014:INFO:Creating metrics dataframe
2023-08-11 13:17:07,089:INFO:Uploading results into container
2023-08-11 13:17:07,090:INFO:Uploading model into container now
2023-08-11 13:17:07,090:INFO:_master_model_container: 16
2023-08-11 13:17:07,090:INFO:_display_container: 2
2023-08-11 13:17:07,090:INFO:GradientBoostingRegressor(random_state=42)
2023-08-11 13:17:07,090:INFO:create_model() successfully completed......................................
2023-08-11 13:17:07,249:INFO:SubProcess create_model() end ==================================
2023-08-11 13:17:07,249:INFO:Creating metrics dataframe
2023-08-11 13:17:07,259:INFO:Initializing Extreme Gradient Boosting
2023-08-11 13:17:07,259:INFO:Total runtime is 0.24876781702041625 minutes
2023-08-11 13:17:07,261:INFO:SubProcess create_model() called ==================================
2023-08-11 13:17:07,262:INFO:Initializing create_model()
2023-08-11 13:17:07,262:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:17:07,262:INFO:Checking exceptions
2023-08-11 13:17:07,262:INFO:Importing libraries
2023-08-11 13:17:07,262:INFO:Copying training dataset
2023-08-11 13:17:07,264:INFO:Defining folds
2023-08-11 13:17:07,264:INFO:Declaring metric variables
2023-08-11 13:17:07,266:INFO:Importing untrained model
2023-08-11 13:17:07,269:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 13:17:07,273:INFO:Starting cross validation
2023-08-11 13:17:07,273:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:17:07,805:INFO:Calculating mean and std
2023-08-11 13:17:07,806:INFO:Creating metrics dataframe
2023-08-11 13:17:07,881:INFO:Uploading results into container
2023-08-11 13:17:07,881:INFO:Uploading model into container now
2023-08-11 13:17:07,881:INFO:_master_model_container: 17
2023-08-11 13:17:07,881:INFO:_display_container: 2
2023-08-11 13:17:07,882:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=42,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 13:17:07,882:INFO:create_model() successfully completed......................................
2023-08-11 13:17:08,038:INFO:SubProcess create_model() end ==================================
2023-08-11 13:17:08,038:INFO:Creating metrics dataframe
2023-08-11 13:17:08,048:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 13:17:08,048:INFO:Total runtime is 0.2619143486022949 minutes
2023-08-11 13:17:08,050:INFO:SubProcess create_model() called ==================================
2023-08-11 13:17:08,051:INFO:Initializing create_model()
2023-08-11 13:17:08,051:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:17:08,051:INFO:Checking exceptions
2023-08-11 13:17:08,051:INFO:Importing libraries
2023-08-11 13:17:08,051:INFO:Copying training dataset
2023-08-11 13:17:08,053:INFO:Defining folds
2023-08-11 13:17:08,053:INFO:Declaring metric variables
2023-08-11 13:17:08,055:INFO:Importing untrained model
2023-08-11 13:17:08,058:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 13:17:08,062:INFO:Starting cross validation
2023-08-11 13:17:08,062:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:17:08,849:INFO:Calculating mean and std
2023-08-11 13:17:08,850:INFO:Creating metrics dataframe
2023-08-11 13:17:08,924:INFO:Uploading results into container
2023-08-11 13:17:08,924:INFO:Uploading model into container now
2023-08-11 13:17:08,925:INFO:_master_model_container: 18
2023-08-11 13:17:08,925:INFO:_display_container: 2
2023-08-11 13:17:08,925:INFO:LGBMRegressor(random_state=42)
2023-08-11 13:17:08,925:INFO:create_model() successfully completed......................................
2023-08-11 13:17:09,082:INFO:SubProcess create_model() end ==================================
2023-08-11 13:17:09,082:INFO:Creating metrics dataframe
2023-08-11 13:17:09,093:INFO:Initializing CatBoost Regressor
2023-08-11 13:17:09,093:INFO:Total runtime is 0.2793196678161621 minutes
2023-08-11 13:17:09,095:INFO:SubProcess create_model() called ==================================
2023-08-11 13:17:09,095:INFO:Initializing create_model()
2023-08-11 13:17:09,095:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=catboost, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:17:09,095:INFO:Checking exceptions
2023-08-11 13:17:09,095:INFO:Importing libraries
2023-08-11 13:17:09,095:INFO:Copying training dataset
2023-08-11 13:17:09,097:INFO:Defining folds
2023-08-11 13:17:09,097:INFO:Declaring metric variables
2023-08-11 13:17:09,100:INFO:Importing untrained model
2023-08-11 13:17:09,102:INFO:CatBoost Regressor Imported successfully
2023-08-11 13:17:09,106:INFO:Starting cross validation
2023-08-11 13:17:09,106:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:17:11,218:INFO:Calculating mean and std
2023-08-11 13:17:11,219:INFO:Creating metrics dataframe
2023-08-11 13:17:11,296:INFO:Uploading results into container
2023-08-11 13:17:11,297:INFO:Uploading model into container now
2023-08-11 13:17:11,297:INFO:_master_model_container: 19
2023-08-11 13:17:11,297:INFO:_display_container: 2
2023-08-11 13:17:11,297:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d22ed7c10>
2023-08-11 13:17:11,297:INFO:create_model() successfully completed......................................
2023-08-11 13:17:11,454:INFO:SubProcess create_model() end ==================================
2023-08-11 13:17:11,454:INFO:Creating metrics dataframe
2023-08-11 13:17:11,465:INFO:Initializing Dummy Regressor
2023-08-11 13:17:11,465:INFO:Total runtime is 0.3188580314318339 minutes
2023-08-11 13:17:11,467:INFO:SubProcess create_model() called ==================================
2023-08-11 13:17:11,467:INFO:Initializing create_model()
2023-08-11 13:17:11,467:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=dummy, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d230d6890>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:17:11,467:INFO:Checking exceptions
2023-08-11 13:17:11,467:INFO:Importing libraries
2023-08-11 13:17:11,467:INFO:Copying training dataset
2023-08-11 13:17:11,470:INFO:Defining folds
2023-08-11 13:17:11,470:INFO:Declaring metric variables
2023-08-11 13:17:11,472:INFO:Importing untrained model
2023-08-11 13:17:11,474:INFO:Dummy Regressor Imported successfully
2023-08-11 13:17:11,478:INFO:Starting cross validation
2023-08-11 13:17:11,479:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:17:11,898:INFO:Calculating mean and std
2023-08-11 13:17:11,899:INFO:Creating metrics dataframe
2023-08-11 13:17:11,976:INFO:Uploading results into container
2023-08-11 13:17:11,976:INFO:Uploading model into container now
2023-08-11 13:17:11,976:INFO:_master_model_container: 20
2023-08-11 13:17:11,976:INFO:_display_container: 2
2023-08-11 13:17:11,976:INFO:DummyRegressor()
2023-08-11 13:17:11,976:INFO:create_model() successfully completed......................................
2023-08-11 13:17:12,133:INFO:SubProcess create_model() end ==================================
2023-08-11 13:17:12,133:INFO:Creating metrics dataframe
2023-08-11 13:17:12,150:INFO:Initializing create_model()
2023-08-11 13:17:12,150:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22c33cd0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=42), fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:17:12,150:INFO:Checking exceptions
2023-08-11 13:17:12,152:INFO:Importing libraries
2023-08-11 13:17:12,152:INFO:Copying training dataset
2023-08-11 13:17:12,153:INFO:Defining folds
2023-08-11 13:17:12,153:INFO:Declaring metric variables
2023-08-11 13:17:12,153:INFO:Importing untrained model
2023-08-11 13:17:12,153:INFO:Declaring custom model
2023-08-11 13:17:12,154:INFO:Extra Trees Regressor Imported successfully
2023-08-11 13:17:12,154:INFO:Cross validation set to False
2023-08-11 13:17:12,154:INFO:Fitting Model
2023-08-11 13:17:12,387:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=42)
2023-08-11 13:17:12,387:INFO:create_model() successfully completed......................................
2023-08-11 13:17:12,574:INFO:_master_model_container: 20
2023-08-11 13:17:12,574:INFO:_display_container: 2
2023-08-11 13:17:12,575:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=42)
2023-08-11 13:17:12,575:INFO:compare_models() successfully completed......................................
2023-08-11 13:18:42,496:INFO:PyCaret RegressionExperiment
2023-08-11 13:18:42,496:INFO:Logging name: reg-default-name
2023-08-11 13:18:42,497:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 13:18:42,497:INFO:version 3.0.2
2023-08-11 13:18:42,497:INFO:Initializing setup()
2023-08-11 13:18:42,497:INFO:self.USI: c8fd
2023-08-11 13:18:42,497:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 13:18:42,497:INFO:Checking environment
2023-08-11 13:18:42,497:INFO:python_version: 3.7.13
2023-08-11 13:18:42,497:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 13:18:42,497:INFO:machine: x86_64
2023-08-11 13:18:42,497:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 13:18:42,497:INFO:Memory: svmem(total=17179869184, available=1188093952, percent=93.1, used=1620754432, free=8617984, active=1183469568, inactive=1178804224, wired=437284864)
2023-08-11 13:18:42,497:INFO:Physical Core: 8
2023-08-11 13:18:42,497:INFO:Logical Core: 8
2023-08-11 13:18:42,497:INFO:Checking libraries
2023-08-11 13:18:42,497:INFO:System:
2023-08-11 13:18:42,497:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 13:18:42,497:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 13:18:42,497:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 13:18:42,497:INFO:PyCaret required dependencies:
2023-08-11 13:18:42,497:INFO:                 pip: 22.3.1
2023-08-11 13:18:42,497:INFO:          setuptools: 63.4.1
2023-08-11 13:18:42,497:INFO:             pycaret: 3.0.2
2023-08-11 13:18:42,497:INFO:             IPython: 7.33.0
2023-08-11 13:18:42,497:INFO:          ipywidgets: 8.0.2
2023-08-11 13:18:42,497:INFO:                tqdm: 4.64.1
2023-08-11 13:18:42,497:INFO:               numpy: 1.21.5
2023-08-11 13:18:42,497:INFO:              pandas: 1.3.5
2023-08-11 13:18:42,497:INFO:              jinja2: 3.1.2
2023-08-11 13:18:42,497:INFO:               scipy: 1.7.3
2023-08-11 13:18:42,497:INFO:              joblib: 1.2.0
2023-08-11 13:18:42,497:INFO:             sklearn: 1.0.2
2023-08-11 13:18:42,497:INFO:                pyod: 1.0.9
2023-08-11 13:18:42,497:INFO:            imblearn: 0.10.1
2023-08-11 13:18:42,497:INFO:   category_encoders: 2.6.1
2023-08-11 13:18:42,497:INFO:            lightgbm: 3.3.2
2023-08-11 13:18:42,497:INFO:               numba: 0.56.2
2023-08-11 13:18:42,497:INFO:            requests: 2.28.1
2023-08-11 13:18:42,498:INFO:          matplotlib: 3.5.3
2023-08-11 13:18:42,498:INFO:          scikitplot: 0.3.7
2023-08-11 13:18:42,498:INFO:         yellowbrick: 1.5
2023-08-11 13:18:42,498:INFO:              plotly: 5.13.0
2023-08-11 13:18:42,498:INFO:             kaleido: 0.2.1
2023-08-11 13:18:42,498:INFO:         statsmodels: 0.13.2
2023-08-11 13:18:42,498:INFO:              sktime: 0.17.0
2023-08-11 13:18:42,498:INFO:               tbats: 1.1.3
2023-08-11 13:18:42,498:INFO:            pmdarima: 2.0.3
2023-08-11 13:18:42,498:INFO:              psutil: 5.9.2
2023-08-11 13:18:42,498:INFO:PyCaret optional dependencies:
2023-08-11 13:18:42,498:INFO:                shap: Not installed
2023-08-11 13:18:42,498:INFO:           interpret: Not installed
2023-08-11 13:18:42,498:INFO:                umap: 0.5.3
2023-08-11 13:18:42,498:INFO:    pandas_profiling: 3.0.0
2023-08-11 13:18:42,498:INFO:  explainerdashboard: Not installed
2023-08-11 13:18:42,498:INFO:             autoviz: Not installed
2023-08-11 13:18:42,498:INFO:           fairlearn: Not installed
2023-08-11 13:18:42,498:INFO:             xgboost: 1.6.2
2023-08-11 13:18:42,498:INFO:            catboost: 1.0.4
2023-08-11 13:18:42,498:INFO:              kmodes: 0.12.2
2023-08-11 13:18:42,498:INFO:             mlxtend: 0.19.0
2023-08-11 13:18:42,498:INFO:       statsforecast: Not installed
2023-08-11 13:18:42,498:INFO:        tune_sklearn: Not installed
2023-08-11 13:18:42,498:INFO:                 ray: Not installed
2023-08-11 13:18:42,498:INFO:            hyperopt: Not installed
2023-08-11 13:18:42,498:INFO:              optuna: Not installed
2023-08-11 13:18:42,498:INFO:               skopt: Not installed
2023-08-11 13:18:42,498:INFO:              mlflow: 1.29.0
2023-08-11 13:18:42,498:INFO:              gradio: Not installed
2023-08-11 13:18:42,498:INFO:             fastapi: Not installed
2023-08-11 13:18:42,498:INFO:             uvicorn: Not installed
2023-08-11 13:18:42,498:INFO:              m2cgen: Not installed
2023-08-11 13:18:42,498:INFO:           evidently: Not installed
2023-08-11 13:18:42,498:INFO:               fugue: Not installed
2023-08-11 13:18:42,498:INFO:           streamlit: 1.13.0
2023-08-11 13:18:42,498:INFO:             prophet: Not installed
2023-08-11 13:18:42,498:INFO:None
2023-08-11 13:18:42,498:INFO:Set up data.
2023-08-11 13:18:42,501:INFO:Set up train/test split.
2023-08-11 13:18:42,503:INFO:Set up index.
2023-08-11 13:18:42,503:INFO:Set up folding strategy.
2023-08-11 13:18:42,503:INFO:Assigning column types.
2023-08-11 13:18:42,506:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 13:18:42,506:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,510:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,514:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,560:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,596:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,596:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:18:42,598:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:18:42,599:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,603:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,606:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,652:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,689:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,689:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:18:42,692:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:18:42,692:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 13:18:42,696:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,699:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,745:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,781:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,781:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:18:42,783:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:18:42,787:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,791:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,836:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,873:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,873:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:18:42,875:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:18:42,875:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 13:18:42,883:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,928:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,964:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:18:42,964:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:18:42,966:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:18:42,973:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:18:43,018:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:18:43,054:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:18:43,054:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:18:43,056:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:18:43,057:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 13:18:43,109:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:18:43,145:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:18:43,145:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:18:43,147:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:18:43,199:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:18:43,235:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:18:43,235:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:18:43,237:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:18:43,238:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 13:18:43,289:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:18:43,326:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:18:43,328:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:18:43,380:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:18:43,416:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:18:43,418:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:18:43,419:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 13:18:43,511:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:18:43,513:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:18:43,601:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:18:43,603:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:18:43,604:INFO:Preparing preprocessing pipeline...
2023-08-11 13:18:43,604:INFO:Set up simple imputation.
2023-08-11 13:18:43,614:INFO:Finished creating preprocessing pipeline.
2023-08-11 13:18:43,617:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ABC', 'nAcid', 'nBridgehead',
                                             'AATS0i', 'GATS2d', 'PEOE_VSA13'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-11 13:18:43,617:INFO:Creating final display dataframe.
2023-08-11 13:18:43,657:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target               pKi
2                   Target type        Regression
3           Original data shape          (316, 7)
4        Transformed data shape          (316, 7)
5   Transformed train set shape          (221, 7)
6    Transformed test set shape           (95, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              c8fd
2023-08-11 13:18:43,752:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:18:43,754:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:18:43,842:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:18:43,844:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:18:43,845:INFO:setup() successfully completed in 1.42s...............
2023-08-11 13:18:44,530:INFO:Initializing compare_models()
2023-08-11 13:18:44,530:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 13:18:44,530:INFO:Checking exceptions
2023-08-11 13:18:44,534:INFO:Preparing display monitor
2023-08-11 13:18:44,588:INFO:Initializing Linear Regression
2023-08-11 13:18:44,588:INFO:Total runtime is 3.7829081217447918e-06 minutes
2023-08-11 13:18:44,591:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:44,592:INFO:Initializing create_model()
2023-08-11 13:18:44,592:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=lr, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:44,592:INFO:Checking exceptions
2023-08-11 13:18:44,592:INFO:Importing libraries
2023-08-11 13:18:44,592:INFO:Copying training dataset
2023-08-11 13:18:44,596:INFO:Defining folds
2023-08-11 13:18:44,596:INFO:Declaring metric variables
2023-08-11 13:18:44,599:INFO:Importing untrained model
2023-08-11 13:18:44,602:INFO:Linear Regression Imported successfully
2023-08-11 13:18:44,609:INFO:Starting cross validation
2023-08-11 13:18:44,610:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:45,018:INFO:Calculating mean and std
2023-08-11 13:18:45,019:INFO:Creating metrics dataframe
2023-08-11 13:18:45,091:INFO:Uploading results into container
2023-08-11 13:18:45,092:INFO:Uploading model into container now
2023-08-11 13:18:45,092:INFO:_master_model_container: 1
2023-08-11 13:18:45,092:INFO:_display_container: 2
2023-08-11 13:18:45,092:INFO:LinearRegression(n_jobs=-1)
2023-08-11 13:18:45,092:INFO:create_model() successfully completed......................................
2023-08-11 13:18:45,251:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:45,251:INFO:Creating metrics dataframe
2023-08-11 13:18:45,259:INFO:Initializing Lasso Regression
2023-08-11 13:18:45,259:INFO:Total runtime is 0.01118470033009847 minutes
2023-08-11 13:18:45,261:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:45,261:INFO:Initializing create_model()
2023-08-11 13:18:45,261:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=lasso, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:45,261:INFO:Checking exceptions
2023-08-11 13:18:45,261:INFO:Importing libraries
2023-08-11 13:18:45,261:INFO:Copying training dataset
2023-08-11 13:18:45,263:INFO:Defining folds
2023-08-11 13:18:45,263:INFO:Declaring metric variables
2023-08-11 13:18:45,265:INFO:Importing untrained model
2023-08-11 13:18:45,267:INFO:Lasso Regression Imported successfully
2023-08-11 13:18:45,271:INFO:Starting cross validation
2023-08-11 13:18:45,271:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:45,767:INFO:Calculating mean and std
2023-08-11 13:18:45,768:INFO:Creating metrics dataframe
2023-08-11 13:18:45,842:INFO:Uploading results into container
2023-08-11 13:18:45,843:INFO:Uploading model into container now
2023-08-11 13:18:45,843:INFO:_master_model_container: 2
2023-08-11 13:18:45,843:INFO:_display_container: 2
2023-08-11 13:18:45,843:INFO:Lasso(random_state=42)
2023-08-11 13:18:45,843:INFO:create_model() successfully completed......................................
2023-08-11 13:18:45,999:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:45,999:INFO:Creating metrics dataframe
2023-08-11 13:18:46,007:INFO:Initializing Ridge Regression
2023-08-11 13:18:46,007:INFO:Total runtime is 0.023648516337076823 minutes
2023-08-11 13:18:46,009:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:46,009:INFO:Initializing create_model()
2023-08-11 13:18:46,009:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=ridge, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:46,009:INFO:Checking exceptions
2023-08-11 13:18:46,009:INFO:Importing libraries
2023-08-11 13:18:46,009:INFO:Copying training dataset
2023-08-11 13:18:46,011:INFO:Defining folds
2023-08-11 13:18:46,011:INFO:Declaring metric variables
2023-08-11 13:18:46,013:INFO:Importing untrained model
2023-08-11 13:18:46,016:INFO:Ridge Regression Imported successfully
2023-08-11 13:18:46,020:INFO:Starting cross validation
2023-08-11 13:18:46,020:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:46,436:INFO:Calculating mean and std
2023-08-11 13:18:46,437:INFO:Creating metrics dataframe
2023-08-11 13:18:46,513:INFO:Uploading results into container
2023-08-11 13:18:46,513:INFO:Uploading model into container now
2023-08-11 13:18:46,513:INFO:_master_model_container: 3
2023-08-11 13:18:46,513:INFO:_display_container: 2
2023-08-11 13:18:46,513:INFO:Ridge(random_state=42)
2023-08-11 13:18:46,513:INFO:create_model() successfully completed......................................
2023-08-11 13:18:46,673:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:46,674:INFO:Creating metrics dataframe
2023-08-11 13:18:46,682:INFO:Initializing Elastic Net
2023-08-11 13:18:46,682:INFO:Total runtime is 0.03490190108617147 minutes
2023-08-11 13:18:46,684:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:46,684:INFO:Initializing create_model()
2023-08-11 13:18:46,684:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=en, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:46,684:INFO:Checking exceptions
2023-08-11 13:18:46,684:INFO:Importing libraries
2023-08-11 13:18:46,684:INFO:Copying training dataset
2023-08-11 13:18:46,687:INFO:Defining folds
2023-08-11 13:18:46,687:INFO:Declaring metric variables
2023-08-11 13:18:46,689:INFO:Importing untrained model
2023-08-11 13:18:46,691:INFO:Elastic Net Imported successfully
2023-08-11 13:18:46,696:INFO:Starting cross validation
2023-08-11 13:18:46,696:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:47,096:INFO:Calculating mean and std
2023-08-11 13:18:47,098:INFO:Creating metrics dataframe
2023-08-11 13:18:47,172:INFO:Uploading results into container
2023-08-11 13:18:47,172:INFO:Uploading model into container now
2023-08-11 13:18:47,173:INFO:_master_model_container: 4
2023-08-11 13:18:47,173:INFO:_display_container: 2
2023-08-11 13:18:47,173:INFO:ElasticNet(random_state=42)
2023-08-11 13:18:47,173:INFO:create_model() successfully completed......................................
2023-08-11 13:18:47,328:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:47,328:INFO:Creating metrics dataframe
2023-08-11 13:18:47,337:INFO:Initializing Least Angle Regression
2023-08-11 13:18:47,337:INFO:Total runtime is 0.04581649700800578 minutes
2023-08-11 13:18:47,339:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:47,339:INFO:Initializing create_model()
2023-08-11 13:18:47,339:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=lar, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:47,339:INFO:Checking exceptions
2023-08-11 13:18:47,339:INFO:Importing libraries
2023-08-11 13:18:47,339:INFO:Copying training dataset
2023-08-11 13:18:47,342:INFO:Defining folds
2023-08-11 13:18:47,342:INFO:Declaring metric variables
2023-08-11 13:18:47,344:INFO:Importing untrained model
2023-08-11 13:18:47,346:INFO:Least Angle Regression Imported successfully
2023-08-11 13:18:47,350:INFO:Starting cross validation
2023-08-11 13:18:47,351:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:47,386:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:47,395:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:47,405:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:47,405:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:47,405:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:47,424:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:47,433:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:47,439:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:47,511:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:47,516:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:47,752:INFO:Calculating mean and std
2023-08-11 13:18:47,753:INFO:Creating metrics dataframe
2023-08-11 13:18:47,827:INFO:Uploading results into container
2023-08-11 13:18:47,828:INFO:Uploading model into container now
2023-08-11 13:18:47,828:INFO:_master_model_container: 5
2023-08-11 13:18:47,828:INFO:_display_container: 2
2023-08-11 13:18:47,828:INFO:Lars(random_state=42)
2023-08-11 13:18:47,828:INFO:create_model() successfully completed......................................
2023-08-11 13:18:47,983:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:47,983:INFO:Creating metrics dataframe
2023-08-11 13:18:47,992:INFO:Initializing Lasso Least Angle Regression
2023-08-11 13:18:47,992:INFO:Total runtime is 0.056734649340311694 minutes
2023-08-11 13:18:47,994:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:47,994:INFO:Initializing create_model()
2023-08-11 13:18:47,994:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=llar, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:47,994:INFO:Checking exceptions
2023-08-11 13:18:47,994:INFO:Importing libraries
2023-08-11 13:18:47,994:INFO:Copying training dataset
2023-08-11 13:18:47,997:INFO:Defining folds
2023-08-11 13:18:47,997:INFO:Declaring metric variables
2023-08-11 13:18:47,999:INFO:Importing untrained model
2023-08-11 13:18:48,001:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 13:18:48,005:INFO:Starting cross validation
2023-08-11 13:18:48,006:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:48,038:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:18:48,053:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:18:48,057:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:18:48,060:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:18:48,072:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:18:48,078:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:18:48,096:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:18:48,123:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:18:48,136:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:18:48,152:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:18:48,411:INFO:Calculating mean and std
2023-08-11 13:18:48,412:INFO:Creating metrics dataframe
2023-08-11 13:18:48,490:INFO:Uploading results into container
2023-08-11 13:18:48,491:INFO:Uploading model into container now
2023-08-11 13:18:48,491:INFO:_master_model_container: 6
2023-08-11 13:18:48,491:INFO:_display_container: 2
2023-08-11 13:18:48,491:INFO:LassoLars(random_state=42)
2023-08-11 13:18:48,491:INFO:create_model() successfully completed......................................
2023-08-11 13:18:48,647:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:48,647:INFO:Creating metrics dataframe
2023-08-11 13:18:48,655:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 13:18:48,655:INFO:Total runtime is 0.06779043277104696 minutes
2023-08-11 13:18:48,657:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:48,657:INFO:Initializing create_model()
2023-08-11 13:18:48,657:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=omp, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:48,657:INFO:Checking exceptions
2023-08-11 13:18:48,657:INFO:Importing libraries
2023-08-11 13:18:48,658:INFO:Copying training dataset
2023-08-11 13:18:48,660:INFO:Defining folds
2023-08-11 13:18:48,660:INFO:Declaring metric variables
2023-08-11 13:18:48,662:INFO:Importing untrained model
2023-08-11 13:18:48,664:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 13:18:48,668:INFO:Starting cross validation
2023-08-11 13:18:48,669:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:48,701:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:48,705:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:48,715:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:48,724:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:48,733:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:48,744:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:48,763:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:48,773:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:48,796:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:48,809:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:18:49,070:INFO:Calculating mean and std
2023-08-11 13:18:49,072:INFO:Creating metrics dataframe
2023-08-11 13:18:49,146:INFO:Uploading results into container
2023-08-11 13:18:49,146:INFO:Uploading model into container now
2023-08-11 13:18:49,146:INFO:_master_model_container: 7
2023-08-11 13:18:49,146:INFO:_display_container: 2
2023-08-11 13:18:49,146:INFO:OrthogonalMatchingPursuit()
2023-08-11 13:18:49,146:INFO:create_model() successfully completed......................................
2023-08-11 13:18:49,302:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:49,302:INFO:Creating metrics dataframe
2023-08-11 13:18:49,311:INFO:Initializing Bayesian Ridge
2023-08-11 13:18:49,311:INFO:Total runtime is 0.07871598402659098 minutes
2023-08-11 13:18:49,313:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:49,313:INFO:Initializing create_model()
2023-08-11 13:18:49,313:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=br, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:49,313:INFO:Checking exceptions
2023-08-11 13:18:49,313:INFO:Importing libraries
2023-08-11 13:18:49,313:INFO:Copying training dataset
2023-08-11 13:18:49,316:INFO:Defining folds
2023-08-11 13:18:49,316:INFO:Declaring metric variables
2023-08-11 13:18:49,318:INFO:Importing untrained model
2023-08-11 13:18:49,320:INFO:Bayesian Ridge Imported successfully
2023-08-11 13:18:49,324:INFO:Starting cross validation
2023-08-11 13:18:49,325:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:49,736:INFO:Calculating mean and std
2023-08-11 13:18:49,737:INFO:Creating metrics dataframe
2023-08-11 13:18:49,811:INFO:Uploading results into container
2023-08-11 13:18:49,812:INFO:Uploading model into container now
2023-08-11 13:18:49,812:INFO:_master_model_container: 8
2023-08-11 13:18:49,812:INFO:_display_container: 2
2023-08-11 13:18:49,812:INFO:BayesianRidge()
2023-08-11 13:18:49,812:INFO:create_model() successfully completed......................................
2023-08-11 13:18:49,968:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:49,968:INFO:Creating metrics dataframe
2023-08-11 13:18:49,977:INFO:Initializing Passive Aggressive Regressor
2023-08-11 13:18:49,977:INFO:Total runtime is 0.08981716632843018 minutes
2023-08-11 13:18:49,979:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:49,979:INFO:Initializing create_model()
2023-08-11 13:18:49,979:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=par, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:49,979:INFO:Checking exceptions
2023-08-11 13:18:49,979:INFO:Importing libraries
2023-08-11 13:18:49,979:INFO:Copying training dataset
2023-08-11 13:18:49,982:INFO:Defining folds
2023-08-11 13:18:49,982:INFO:Declaring metric variables
2023-08-11 13:18:49,984:INFO:Importing untrained model
2023-08-11 13:18:49,986:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 13:18:49,990:INFO:Starting cross validation
2023-08-11 13:18:49,991:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:50,402:INFO:Calculating mean and std
2023-08-11 13:18:50,403:INFO:Creating metrics dataframe
2023-08-11 13:18:50,477:INFO:Uploading results into container
2023-08-11 13:18:50,478:INFO:Uploading model into container now
2023-08-11 13:18:50,478:INFO:_master_model_container: 9
2023-08-11 13:18:50,478:INFO:_display_container: 2
2023-08-11 13:18:50,478:INFO:PassiveAggressiveRegressor(random_state=42)
2023-08-11 13:18:50,478:INFO:create_model() successfully completed......................................
2023-08-11 13:18:50,633:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:50,633:INFO:Creating metrics dataframe
2023-08-11 13:18:50,642:INFO:Initializing Huber Regressor
2023-08-11 13:18:50,642:INFO:Total runtime is 0.10090903441111247 minutes
2023-08-11 13:18:50,644:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:50,645:INFO:Initializing create_model()
2023-08-11 13:18:50,645:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=huber, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:50,645:INFO:Checking exceptions
2023-08-11 13:18:50,645:INFO:Importing libraries
2023-08-11 13:18:50,645:INFO:Copying training dataset
2023-08-11 13:18:50,647:INFO:Defining folds
2023-08-11 13:18:50,647:INFO:Declaring metric variables
2023-08-11 13:18:50,649:INFO:Importing untrained model
2023-08-11 13:18:50,651:INFO:Huber Regressor Imported successfully
2023-08-11 13:18:50,655:INFO:Starting cross validation
2023-08-11 13:18:50,656:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:51,064:INFO:Calculating mean and std
2023-08-11 13:18:51,065:INFO:Creating metrics dataframe
2023-08-11 13:18:51,140:INFO:Uploading results into container
2023-08-11 13:18:51,140:INFO:Uploading model into container now
2023-08-11 13:18:51,140:INFO:_master_model_container: 10
2023-08-11 13:18:51,140:INFO:_display_container: 2
2023-08-11 13:18:51,140:INFO:HuberRegressor()
2023-08-11 13:18:51,140:INFO:create_model() successfully completed......................................
2023-08-11 13:18:51,296:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:51,296:INFO:Creating metrics dataframe
2023-08-11 13:18:51,305:INFO:Initializing K Neighbors Regressor
2023-08-11 13:18:51,305:INFO:Total runtime is 0.11195778449376424 minutes
2023-08-11 13:18:51,307:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:51,307:INFO:Initializing create_model()
2023-08-11 13:18:51,307:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=knn, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:51,308:INFO:Checking exceptions
2023-08-11 13:18:51,308:INFO:Importing libraries
2023-08-11 13:18:51,308:INFO:Copying training dataset
2023-08-11 13:18:51,310:INFO:Defining folds
2023-08-11 13:18:51,310:INFO:Declaring metric variables
2023-08-11 13:18:51,312:INFO:Importing untrained model
2023-08-11 13:18:51,315:INFO:K Neighbors Regressor Imported successfully
2023-08-11 13:18:51,319:INFO:Starting cross validation
2023-08-11 13:18:51,320:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:51,800:INFO:Calculating mean and std
2023-08-11 13:18:51,801:INFO:Creating metrics dataframe
2023-08-11 13:18:51,875:INFO:Uploading results into container
2023-08-11 13:18:51,876:INFO:Uploading model into container now
2023-08-11 13:18:51,876:INFO:_master_model_container: 11
2023-08-11 13:18:51,876:INFO:_display_container: 2
2023-08-11 13:18:51,876:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 13:18:51,876:INFO:create_model() successfully completed......................................
2023-08-11 13:18:52,033:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:52,033:INFO:Creating metrics dataframe
2023-08-11 13:18:52,042:INFO:Initializing Decision Tree Regressor
2023-08-11 13:18:52,042:INFO:Total runtime is 0.12424231767654419 minutes
2023-08-11 13:18:52,044:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:52,044:INFO:Initializing create_model()
2023-08-11 13:18:52,044:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=dt, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:52,045:INFO:Checking exceptions
2023-08-11 13:18:52,045:INFO:Importing libraries
2023-08-11 13:18:52,045:INFO:Copying training dataset
2023-08-11 13:18:52,047:INFO:Defining folds
2023-08-11 13:18:52,047:INFO:Declaring metric variables
2023-08-11 13:18:52,049:INFO:Importing untrained model
2023-08-11 13:18:52,052:INFO:Decision Tree Regressor Imported successfully
2023-08-11 13:18:52,056:INFO:Starting cross validation
2023-08-11 13:18:52,056:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:52,457:INFO:Calculating mean and std
2023-08-11 13:18:52,458:INFO:Creating metrics dataframe
2023-08-11 13:18:52,533:INFO:Uploading results into container
2023-08-11 13:18:52,534:INFO:Uploading model into container now
2023-08-11 13:18:52,534:INFO:_master_model_container: 12
2023-08-11 13:18:52,534:INFO:_display_container: 2
2023-08-11 13:18:52,534:INFO:DecisionTreeRegressor(random_state=42)
2023-08-11 13:18:52,534:INFO:create_model() successfully completed......................................
2023-08-11 13:18:52,690:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:52,690:INFO:Creating metrics dataframe
2023-08-11 13:18:52,699:INFO:Initializing Random Forest Regressor
2023-08-11 13:18:52,699:INFO:Total runtime is 0.13519450028737387 minutes
2023-08-11 13:18:52,701:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:52,702:INFO:Initializing create_model()
2023-08-11 13:18:52,702:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=rf, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:52,702:INFO:Checking exceptions
2023-08-11 13:18:52,702:INFO:Importing libraries
2023-08-11 13:18:52,702:INFO:Copying training dataset
2023-08-11 13:18:52,704:INFO:Defining folds
2023-08-11 13:18:52,704:INFO:Declaring metric variables
2023-08-11 13:18:52,706:INFO:Importing untrained model
2023-08-11 13:18:52,709:INFO:Random Forest Regressor Imported successfully
2023-08-11 13:18:52,713:INFO:Starting cross validation
2023-08-11 13:18:52,713:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:53,664:INFO:Calculating mean and std
2023-08-11 13:18:53,665:INFO:Creating metrics dataframe
2023-08-11 13:18:53,743:INFO:Uploading results into container
2023-08-11 13:18:53,744:INFO:Uploading model into container now
2023-08-11 13:18:53,744:INFO:_master_model_container: 13
2023-08-11 13:18:53,744:INFO:_display_container: 2
2023-08-11 13:18:53,744:INFO:RandomForestRegressor(n_jobs=-1, random_state=42)
2023-08-11 13:18:53,744:INFO:create_model() successfully completed......................................
2023-08-11 13:18:53,900:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:53,900:INFO:Creating metrics dataframe
2023-08-11 13:18:53,909:INFO:Initializing Extra Trees Regressor
2023-08-11 13:18:53,909:INFO:Total runtime is 0.1553603490193685 minutes
2023-08-11 13:18:53,911:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:53,912:INFO:Initializing create_model()
2023-08-11 13:18:53,912:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=et, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:53,912:INFO:Checking exceptions
2023-08-11 13:18:53,912:INFO:Importing libraries
2023-08-11 13:18:53,912:INFO:Copying training dataset
2023-08-11 13:18:53,914:INFO:Defining folds
2023-08-11 13:18:53,914:INFO:Declaring metric variables
2023-08-11 13:18:53,916:INFO:Importing untrained model
2023-08-11 13:18:53,918:INFO:Extra Trees Regressor Imported successfully
2023-08-11 13:18:53,922:INFO:Starting cross validation
2023-08-11 13:18:53,923:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:54,784:INFO:Calculating mean and std
2023-08-11 13:18:54,786:INFO:Creating metrics dataframe
2023-08-11 13:18:54,865:INFO:Uploading results into container
2023-08-11 13:18:54,866:INFO:Uploading model into container now
2023-08-11 13:18:54,866:INFO:_master_model_container: 14
2023-08-11 13:18:54,866:INFO:_display_container: 2
2023-08-11 13:18:54,866:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=42)
2023-08-11 13:18:54,866:INFO:create_model() successfully completed......................................
2023-08-11 13:18:55,022:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:55,022:INFO:Creating metrics dataframe
2023-08-11 13:18:55,032:INFO:Initializing AdaBoost Regressor
2023-08-11 13:18:55,032:INFO:Total runtime is 0.1740752140680949 minutes
2023-08-11 13:18:55,034:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:55,034:INFO:Initializing create_model()
2023-08-11 13:18:55,034:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=ada, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:55,035:INFO:Checking exceptions
2023-08-11 13:18:55,035:INFO:Importing libraries
2023-08-11 13:18:55,035:INFO:Copying training dataset
2023-08-11 13:18:55,037:INFO:Defining folds
2023-08-11 13:18:55,037:INFO:Declaring metric variables
2023-08-11 13:18:55,039:INFO:Importing untrained model
2023-08-11 13:18:55,041:INFO:AdaBoost Regressor Imported successfully
2023-08-11 13:18:55,045:INFO:Starting cross validation
2023-08-11 13:18:55,046:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:55,534:INFO:Calculating mean and std
2023-08-11 13:18:55,535:INFO:Creating metrics dataframe
2023-08-11 13:18:55,617:INFO:Uploading results into container
2023-08-11 13:18:55,617:INFO:Uploading model into container now
2023-08-11 13:18:55,618:INFO:_master_model_container: 15
2023-08-11 13:18:55,618:INFO:_display_container: 2
2023-08-11 13:18:55,618:INFO:AdaBoostRegressor(random_state=42)
2023-08-11 13:18:55,618:INFO:create_model() successfully completed......................................
2023-08-11 13:18:55,774:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:55,774:INFO:Creating metrics dataframe
2023-08-11 13:18:55,784:INFO:Initializing Gradient Boosting Regressor
2023-08-11 13:18:55,784:INFO:Total runtime is 0.1866077701250712 minutes
2023-08-11 13:18:55,786:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:55,786:INFO:Initializing create_model()
2023-08-11 13:18:55,786:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=gbr, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:55,787:INFO:Checking exceptions
2023-08-11 13:18:55,787:INFO:Importing libraries
2023-08-11 13:18:55,787:INFO:Copying training dataset
2023-08-11 13:18:55,789:INFO:Defining folds
2023-08-11 13:18:55,789:INFO:Declaring metric variables
2023-08-11 13:18:55,791:INFO:Importing untrained model
2023-08-11 13:18:55,793:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 13:18:55,797:INFO:Starting cross validation
2023-08-11 13:18:55,798:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:56,293:INFO:Calculating mean and std
2023-08-11 13:18:56,294:INFO:Creating metrics dataframe
2023-08-11 13:18:56,373:INFO:Uploading results into container
2023-08-11 13:18:56,373:INFO:Uploading model into container now
2023-08-11 13:18:56,374:INFO:_master_model_container: 16
2023-08-11 13:18:56,374:INFO:_display_container: 2
2023-08-11 13:18:56,374:INFO:GradientBoostingRegressor(random_state=42)
2023-08-11 13:18:56,374:INFO:create_model() successfully completed......................................
2023-08-11 13:18:56,531:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:56,531:INFO:Creating metrics dataframe
2023-08-11 13:18:56,541:INFO:Initializing Extreme Gradient Boosting
2023-08-11 13:18:56,541:INFO:Total runtime is 0.1992225488026937 minutes
2023-08-11 13:18:56,543:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:56,543:INFO:Initializing create_model()
2023-08-11 13:18:56,543:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:56,543:INFO:Checking exceptions
2023-08-11 13:18:56,543:INFO:Importing libraries
2023-08-11 13:18:56,543:INFO:Copying training dataset
2023-08-11 13:18:56,546:INFO:Defining folds
2023-08-11 13:18:56,546:INFO:Declaring metric variables
2023-08-11 13:18:56,548:INFO:Importing untrained model
2023-08-11 13:18:56,550:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 13:18:56,554:INFO:Starting cross validation
2023-08-11 13:18:56,555:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:57,013:INFO:Calculating mean and std
2023-08-11 13:18:57,014:INFO:Creating metrics dataframe
2023-08-11 13:18:57,094:INFO:Uploading results into container
2023-08-11 13:18:57,094:INFO:Uploading model into container now
2023-08-11 13:18:57,094:INFO:_master_model_container: 17
2023-08-11 13:18:57,094:INFO:_display_container: 2
2023-08-11 13:18:57,095:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=42,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 13:18:57,095:INFO:create_model() successfully completed......................................
2023-08-11 13:18:57,251:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:57,251:INFO:Creating metrics dataframe
2023-08-11 13:18:57,262:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 13:18:57,262:INFO:Total runtime is 0.21123746633529664 minutes
2023-08-11 13:18:57,265:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:57,265:INFO:Initializing create_model()
2023-08-11 13:18:57,265:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:57,265:INFO:Checking exceptions
2023-08-11 13:18:57,265:INFO:Importing libraries
2023-08-11 13:18:57,265:INFO:Copying training dataset
2023-08-11 13:18:57,267:INFO:Defining folds
2023-08-11 13:18:57,268:INFO:Declaring metric variables
2023-08-11 13:18:57,270:INFO:Importing untrained model
2023-08-11 13:18:57,272:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 13:18:57,276:INFO:Starting cross validation
2023-08-11 13:18:57,277:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:57,719:INFO:Calculating mean and std
2023-08-11 13:18:57,720:INFO:Creating metrics dataframe
2023-08-11 13:18:57,799:INFO:Uploading results into container
2023-08-11 13:18:57,800:INFO:Uploading model into container now
2023-08-11 13:18:57,800:INFO:_master_model_container: 18
2023-08-11 13:18:57,800:INFO:_display_container: 2
2023-08-11 13:18:57,800:INFO:LGBMRegressor(random_state=42)
2023-08-11 13:18:57,800:INFO:create_model() successfully completed......................................
2023-08-11 13:18:57,957:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:57,957:INFO:Creating metrics dataframe
2023-08-11 13:18:57,968:INFO:Initializing CatBoost Regressor
2023-08-11 13:18:57,968:INFO:Total runtime is 0.22300206820170085 minutes
2023-08-11 13:18:57,970:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:57,970:INFO:Initializing create_model()
2023-08-11 13:18:57,970:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=catboost, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:57,970:INFO:Checking exceptions
2023-08-11 13:18:57,970:INFO:Importing libraries
2023-08-11 13:18:57,970:INFO:Copying training dataset
2023-08-11 13:18:57,973:INFO:Defining folds
2023-08-11 13:18:57,973:INFO:Declaring metric variables
2023-08-11 13:18:57,975:INFO:Importing untrained model
2023-08-11 13:18:57,977:INFO:CatBoost Regressor Imported successfully
2023-08-11 13:18:57,981:INFO:Starting cross validation
2023-08-11 13:18:57,981:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:18:59,435:INFO:Calculating mean and std
2023-08-11 13:18:59,436:INFO:Creating metrics dataframe
2023-08-11 13:18:59,520:INFO:Uploading results into container
2023-08-11 13:18:59,520:INFO:Uploading model into container now
2023-08-11 13:18:59,521:INFO:_master_model_container: 19
2023-08-11 13:18:59,521:INFO:_display_container: 2
2023-08-11 13:18:59,521:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d444f75d0>
2023-08-11 13:18:59,521:INFO:create_model() successfully completed......................................
2023-08-11 13:18:59,677:INFO:SubProcess create_model() end ==================================
2023-08-11 13:18:59,677:INFO:Creating metrics dataframe
2023-08-11 13:18:59,688:INFO:Initializing Dummy Regressor
2023-08-11 13:18:59,688:INFO:Total runtime is 0.25167091687520343 minutes
2023-08-11 13:18:59,690:INFO:SubProcess create_model() called ==================================
2023-08-11 13:18:59,690:INFO:Initializing create_model()
2023-08-11 13:18:59,690:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=dummy, fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d216173d0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:18:59,690:INFO:Checking exceptions
2023-08-11 13:18:59,690:INFO:Importing libraries
2023-08-11 13:18:59,690:INFO:Copying training dataset
2023-08-11 13:18:59,693:INFO:Defining folds
2023-08-11 13:18:59,693:INFO:Declaring metric variables
2023-08-11 13:18:59,695:INFO:Importing untrained model
2023-08-11 13:18:59,697:INFO:Dummy Regressor Imported successfully
2023-08-11 13:18:59,701:INFO:Starting cross validation
2023-08-11 13:18:59,702:INFO:Cross validating with KFold(n_splits=10, random_state=42, shuffle=True), n_jobs=-1
2023-08-11 13:19:00,118:INFO:Calculating mean and std
2023-08-11 13:19:00,119:INFO:Creating metrics dataframe
2023-08-11 13:19:00,201:INFO:Uploading results into container
2023-08-11 13:19:00,201:INFO:Uploading model into container now
2023-08-11 13:19:00,201:INFO:_master_model_container: 20
2023-08-11 13:19:00,201:INFO:_display_container: 2
2023-08-11 13:19:00,201:INFO:DummyRegressor()
2023-08-11 13:19:00,201:INFO:create_model() successfully completed......................................
2023-08-11 13:19:00,359:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:00,359:INFO:Creating metrics dataframe
2023-08-11 13:19:00,376:INFO:Initializing create_model()
2023-08-11 13:19:00,376:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ca8fd0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=42), fold=KFold(n_splits=10, random_state=42, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:00,376:INFO:Checking exceptions
2023-08-11 13:19:00,377:INFO:Importing libraries
2023-08-11 13:19:00,377:INFO:Copying training dataset
2023-08-11 13:19:00,378:INFO:Defining folds
2023-08-11 13:19:00,378:INFO:Declaring metric variables
2023-08-11 13:19:00,379:INFO:Importing untrained model
2023-08-11 13:19:00,379:INFO:Declaring custom model
2023-08-11 13:19:00,379:INFO:Extra Trees Regressor Imported successfully
2023-08-11 13:19:00,380:INFO:Cross validation set to False
2023-08-11 13:19:00,380:INFO:Fitting Model
2023-08-11 13:19:00,614:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=42)
2023-08-11 13:19:00,614:INFO:create_model() successfully completed......................................
2023-08-11 13:19:00,802:INFO:_master_model_container: 20
2023-08-11 13:19:00,802:INFO:_display_container: 2
2023-08-11 13:19:00,802:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=42)
2023-08-11 13:19:00,802:INFO:compare_models() successfully completed......................................
2023-08-11 13:19:10,999:INFO:PyCaret RegressionExperiment
2023-08-11 13:19:11,000:INFO:Logging name: reg-default-name
2023-08-11 13:19:11,000:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 13:19:11,000:INFO:version 3.0.2
2023-08-11 13:19:11,000:INFO:Initializing setup()
2023-08-11 13:19:11,000:INFO:self.USI: 0338
2023-08-11 13:19:11,000:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 13:19:11,000:INFO:Checking environment
2023-08-11 13:19:11,000:INFO:python_version: 3.7.13
2023-08-11 13:19:11,000:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 13:19:11,000:INFO:machine: x86_64
2023-08-11 13:19:11,000:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 13:19:11,000:INFO:Memory: svmem(total=17179869184, available=1177784320, percent=93.1, used=1598541824, free=18321408, active=1162522624, inactive=1154834432, wired=436019200)
2023-08-11 13:19:11,000:INFO:Physical Core: 8
2023-08-11 13:19:11,000:INFO:Logical Core: 8
2023-08-11 13:19:11,001:INFO:Checking libraries
2023-08-11 13:19:11,001:INFO:System:
2023-08-11 13:19:11,001:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 13:19:11,001:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 13:19:11,001:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 13:19:11,001:INFO:PyCaret required dependencies:
2023-08-11 13:19:11,001:INFO:                 pip: 22.3.1
2023-08-11 13:19:11,001:INFO:          setuptools: 63.4.1
2023-08-11 13:19:11,001:INFO:             pycaret: 3.0.2
2023-08-11 13:19:11,001:INFO:             IPython: 7.33.0
2023-08-11 13:19:11,001:INFO:          ipywidgets: 8.0.2
2023-08-11 13:19:11,001:INFO:                tqdm: 4.64.1
2023-08-11 13:19:11,001:INFO:               numpy: 1.21.5
2023-08-11 13:19:11,001:INFO:              pandas: 1.3.5
2023-08-11 13:19:11,001:INFO:              jinja2: 3.1.2
2023-08-11 13:19:11,001:INFO:               scipy: 1.7.3
2023-08-11 13:19:11,001:INFO:              joblib: 1.2.0
2023-08-11 13:19:11,001:INFO:             sklearn: 1.0.2
2023-08-11 13:19:11,001:INFO:                pyod: 1.0.9
2023-08-11 13:19:11,001:INFO:            imblearn: 0.10.1
2023-08-11 13:19:11,001:INFO:   category_encoders: 2.6.1
2023-08-11 13:19:11,001:INFO:            lightgbm: 3.3.2
2023-08-11 13:19:11,001:INFO:               numba: 0.56.2
2023-08-11 13:19:11,001:INFO:            requests: 2.28.1
2023-08-11 13:19:11,001:INFO:          matplotlib: 3.5.3
2023-08-11 13:19:11,001:INFO:          scikitplot: 0.3.7
2023-08-11 13:19:11,001:INFO:         yellowbrick: 1.5
2023-08-11 13:19:11,001:INFO:              plotly: 5.13.0
2023-08-11 13:19:11,001:INFO:             kaleido: 0.2.1
2023-08-11 13:19:11,001:INFO:         statsmodels: 0.13.2
2023-08-11 13:19:11,001:INFO:              sktime: 0.17.0
2023-08-11 13:19:11,001:INFO:               tbats: 1.1.3
2023-08-11 13:19:11,001:INFO:            pmdarima: 2.0.3
2023-08-11 13:19:11,001:INFO:              psutil: 5.9.2
2023-08-11 13:19:11,001:INFO:PyCaret optional dependencies:
2023-08-11 13:19:11,001:INFO:                shap: Not installed
2023-08-11 13:19:11,001:INFO:           interpret: Not installed
2023-08-11 13:19:11,001:INFO:                umap: 0.5.3
2023-08-11 13:19:11,001:INFO:    pandas_profiling: 3.0.0
2023-08-11 13:19:11,001:INFO:  explainerdashboard: Not installed
2023-08-11 13:19:11,001:INFO:             autoviz: Not installed
2023-08-11 13:19:11,002:INFO:           fairlearn: Not installed
2023-08-11 13:19:11,002:INFO:             xgboost: 1.6.2
2023-08-11 13:19:11,002:INFO:            catboost: 1.0.4
2023-08-11 13:19:11,002:INFO:              kmodes: 0.12.2
2023-08-11 13:19:11,002:INFO:             mlxtend: 0.19.0
2023-08-11 13:19:11,002:INFO:       statsforecast: Not installed
2023-08-11 13:19:11,002:INFO:        tune_sklearn: Not installed
2023-08-11 13:19:11,002:INFO:                 ray: Not installed
2023-08-11 13:19:11,002:INFO:            hyperopt: Not installed
2023-08-11 13:19:11,002:INFO:              optuna: Not installed
2023-08-11 13:19:11,002:INFO:               skopt: Not installed
2023-08-11 13:19:11,002:INFO:              mlflow: 1.29.0
2023-08-11 13:19:11,002:INFO:              gradio: Not installed
2023-08-11 13:19:11,002:INFO:             fastapi: Not installed
2023-08-11 13:19:11,002:INFO:             uvicorn: Not installed
2023-08-11 13:19:11,002:INFO:              m2cgen: Not installed
2023-08-11 13:19:11,002:INFO:           evidently: Not installed
2023-08-11 13:19:11,002:INFO:               fugue: Not installed
2023-08-11 13:19:11,002:INFO:           streamlit: 1.13.0
2023-08-11 13:19:11,002:INFO:             prophet: Not installed
2023-08-11 13:19:11,002:INFO:None
2023-08-11 13:19:11,002:INFO:Set up data.
2023-08-11 13:19:11,004:INFO:Set up train/test split.
2023-08-11 13:19:11,006:INFO:Set up index.
2023-08-11 13:19:11,006:INFO:Set up folding strategy.
2023-08-11 13:19:11,006:INFO:Assigning column types.
2023-08-11 13:19:11,009:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 13:19:11,009:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,013:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,017:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,062:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,097:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,098:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:11,100:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:11,100:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,104:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,108:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,152:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,188:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,188:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:11,190:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:11,191:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 13:19:11,194:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,198:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,242:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,278:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,278:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:11,280:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:11,284:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,288:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,332:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,367:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,367:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:11,369:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:11,369:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 13:19:11,376:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,420:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,459:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,459:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:11,461:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:11,469:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,515:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,551:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,551:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:11,553:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:11,554:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 13:19:11,606:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,642:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,642:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:11,644:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:11,697:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,733:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,733:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:11,735:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:11,735:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 13:19:11,787:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,824:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:11,826:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:11,878:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:11,914:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:11,916:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:11,916:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 13:19:12,009:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:12,012:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:12,099:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:12,101:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:12,102:INFO:Preparing preprocessing pipeline...
2023-08-11 13:19:12,102:INFO:Set up simple imputation.
2023-08-11 13:19:12,113:INFO:Finished creating preprocessing pipeline.
2023-08-11 13:19:12,115:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ABC', 'nAcid', 'AATS0i', 'ATSC4c',
                                             'PEOE_VSA13', 'EState_VSA6'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-11 13:19:12,115:INFO:Creating final display dataframe.
2023-08-11 13:19:12,155:INFO:Setup _display_container:                     Description             Value
0                    Session id                 2
1                        Target               pKi
2                   Target type        Regression
3           Original data shape          (316, 7)
4        Transformed data shape          (316, 7)
5   Transformed train set shape          (221, 7)
6    Transformed test set shape           (95, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              0338
2023-08-11 13:19:12,249:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:12,252:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:12,339:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:12,341:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:12,341:INFO:setup() successfully completed in 1.42s...............
2023-08-11 13:19:12,382:INFO:Initializing compare_models()
2023-08-11 13:19:12,382:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 13:19:12,382:INFO:Checking exceptions
2023-08-11 13:19:12,383:INFO:Preparing display monitor
2023-08-11 13:19:12,408:INFO:Initializing Linear Regression
2023-08-11 13:19:12,409:INFO:Total runtime is 3.0358632405598956e-06 minutes
2023-08-11 13:19:12,411:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:12,411:INFO:Initializing create_model()
2023-08-11 13:19:12,411:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=lr, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:12,411:INFO:Checking exceptions
2023-08-11 13:19:12,412:INFO:Importing libraries
2023-08-11 13:19:12,412:INFO:Copying training dataset
2023-08-11 13:19:12,413:INFO:Defining folds
2023-08-11 13:19:12,414:INFO:Declaring metric variables
2023-08-11 13:19:12,416:INFO:Importing untrained model
2023-08-11 13:19:12,419:INFO:Linear Regression Imported successfully
2023-08-11 13:19:12,424:INFO:Starting cross validation
2023-08-11 13:19:12,425:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:12,865:INFO:Calculating mean and std
2023-08-11 13:19:12,866:INFO:Creating metrics dataframe
2023-08-11 13:19:12,945:INFO:Uploading results into container
2023-08-11 13:19:12,945:INFO:Uploading model into container now
2023-08-11 13:19:12,946:INFO:_master_model_container: 1
2023-08-11 13:19:12,946:INFO:_display_container: 2
2023-08-11 13:19:12,946:INFO:LinearRegression(n_jobs=-1)
2023-08-11 13:19:12,946:INFO:create_model() successfully completed......................................
2023-08-11 13:19:13,107:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:13,107:INFO:Creating metrics dataframe
2023-08-11 13:19:13,115:INFO:Initializing Lasso Regression
2023-08-11 13:19:13,115:INFO:Total runtime is 0.011769882837931313 minutes
2023-08-11 13:19:13,117:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:13,117:INFO:Initializing create_model()
2023-08-11 13:19:13,117:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=lasso, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:13,117:INFO:Checking exceptions
2023-08-11 13:19:13,117:INFO:Importing libraries
2023-08-11 13:19:13,117:INFO:Copying training dataset
2023-08-11 13:19:13,119:INFO:Defining folds
2023-08-11 13:19:13,119:INFO:Declaring metric variables
2023-08-11 13:19:13,121:INFO:Importing untrained model
2023-08-11 13:19:13,123:INFO:Lasso Regression Imported successfully
2023-08-11 13:19:13,127:INFO:Starting cross validation
2023-08-11 13:19:13,127:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:13,557:INFO:Calculating mean and std
2023-08-11 13:19:13,558:INFO:Creating metrics dataframe
2023-08-11 13:19:13,639:INFO:Uploading results into container
2023-08-11 13:19:13,640:INFO:Uploading model into container now
2023-08-11 13:19:13,640:INFO:_master_model_container: 2
2023-08-11 13:19:13,640:INFO:_display_container: 2
2023-08-11 13:19:13,640:INFO:Lasso(random_state=2)
2023-08-11 13:19:13,640:INFO:create_model() successfully completed......................................
2023-08-11 13:19:13,800:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:13,800:INFO:Creating metrics dataframe
2023-08-11 13:19:13,809:INFO:Initializing Ridge Regression
2023-08-11 13:19:13,809:INFO:Total runtime is 0.023345820109049478 minutes
2023-08-11 13:19:13,811:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:13,812:INFO:Initializing create_model()
2023-08-11 13:19:13,812:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=ridge, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:13,812:INFO:Checking exceptions
2023-08-11 13:19:13,812:INFO:Importing libraries
2023-08-11 13:19:13,812:INFO:Copying training dataset
2023-08-11 13:19:13,814:INFO:Defining folds
2023-08-11 13:19:13,814:INFO:Declaring metric variables
2023-08-11 13:19:13,817:INFO:Importing untrained model
2023-08-11 13:19:13,819:INFO:Ridge Regression Imported successfully
2023-08-11 13:19:13,823:INFO:Starting cross validation
2023-08-11 13:19:13,823:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:14,250:INFO:Calculating mean and std
2023-08-11 13:19:14,251:INFO:Creating metrics dataframe
2023-08-11 13:19:14,332:INFO:Uploading results into container
2023-08-11 13:19:14,332:INFO:Uploading model into container now
2023-08-11 13:19:14,332:INFO:_master_model_container: 3
2023-08-11 13:19:14,332:INFO:_display_container: 2
2023-08-11 13:19:14,332:INFO:Ridge(random_state=2)
2023-08-11 13:19:14,332:INFO:create_model() successfully completed......................................
2023-08-11 13:19:14,490:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:14,490:INFO:Creating metrics dataframe
2023-08-11 13:19:14,498:INFO:Initializing Elastic Net
2023-08-11 13:19:14,498:INFO:Total runtime is 0.03483103513717651 minutes
2023-08-11 13:19:14,500:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:14,501:INFO:Initializing create_model()
2023-08-11 13:19:14,501:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=en, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:14,501:INFO:Checking exceptions
2023-08-11 13:19:14,501:INFO:Importing libraries
2023-08-11 13:19:14,501:INFO:Copying training dataset
2023-08-11 13:19:14,503:INFO:Defining folds
2023-08-11 13:19:14,503:INFO:Declaring metric variables
2023-08-11 13:19:14,505:INFO:Importing untrained model
2023-08-11 13:19:14,508:INFO:Elastic Net Imported successfully
2023-08-11 13:19:14,512:INFO:Starting cross validation
2023-08-11 13:19:14,512:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:14,956:INFO:Calculating mean and std
2023-08-11 13:19:14,957:INFO:Creating metrics dataframe
2023-08-11 13:19:15,038:INFO:Uploading results into container
2023-08-11 13:19:15,039:INFO:Uploading model into container now
2023-08-11 13:19:15,039:INFO:_master_model_container: 4
2023-08-11 13:19:15,039:INFO:_display_container: 2
2023-08-11 13:19:15,039:INFO:ElasticNet(random_state=2)
2023-08-11 13:19:15,039:INFO:create_model() successfully completed......................................
2023-08-11 13:19:15,197:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:15,197:INFO:Creating metrics dataframe
2023-08-11 13:19:15,205:INFO:Initializing Least Angle Regression
2023-08-11 13:19:15,205:INFO:Total runtime is 0.04661399920781453 minutes
2023-08-11 13:19:15,207:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:15,208:INFO:Initializing create_model()
2023-08-11 13:19:15,208:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=lar, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:15,208:INFO:Checking exceptions
2023-08-11 13:19:15,208:INFO:Importing libraries
2023-08-11 13:19:15,208:INFO:Copying training dataset
2023-08-11 13:19:15,210:INFO:Defining folds
2023-08-11 13:19:15,210:INFO:Declaring metric variables
2023-08-11 13:19:15,212:INFO:Importing untrained model
2023-08-11 13:19:15,214:INFO:Least Angle Regression Imported successfully
2023-08-11 13:19:15,219:INFO:Starting cross validation
2023-08-11 13:19:15,219:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:15,251:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:15,261:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:15,262:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:15,278:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:15,287:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:15,294:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:15,304:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:15,309:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:15,365:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:15,368:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:15,656:INFO:Calculating mean and std
2023-08-11 13:19:15,657:INFO:Creating metrics dataframe
2023-08-11 13:19:15,740:INFO:Uploading results into container
2023-08-11 13:19:15,740:INFO:Uploading model into container now
2023-08-11 13:19:15,740:INFO:_master_model_container: 5
2023-08-11 13:19:15,740:INFO:_display_container: 2
2023-08-11 13:19:15,740:INFO:Lars(random_state=2)
2023-08-11 13:19:15,740:INFO:create_model() successfully completed......................................
2023-08-11 13:19:15,897:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:15,897:INFO:Creating metrics dataframe
2023-08-11 13:19:15,905:INFO:Initializing Lasso Least Angle Regression
2023-08-11 13:19:15,905:INFO:Total runtime is 0.058277054627736406 minutes
2023-08-11 13:19:15,907:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:15,907:INFO:Initializing create_model()
2023-08-11 13:19:15,907:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=llar, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:15,907:INFO:Checking exceptions
2023-08-11 13:19:15,907:INFO:Importing libraries
2023-08-11 13:19:15,907:INFO:Copying training dataset
2023-08-11 13:19:15,910:INFO:Defining folds
2023-08-11 13:19:15,910:INFO:Declaring metric variables
2023-08-11 13:19:15,912:INFO:Importing untrained model
2023-08-11 13:19:15,914:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 13:19:15,918:INFO:Starting cross validation
2023-08-11 13:19:15,919:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:15,952:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:15,967:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:15,973:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:15,974:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:15,974:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:15,989:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:16,019:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:16,020:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:16,073:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:16,078:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:16,353:INFO:Calculating mean and std
2023-08-11 13:19:16,354:INFO:Creating metrics dataframe
2023-08-11 13:19:16,436:INFO:Uploading results into container
2023-08-11 13:19:16,437:INFO:Uploading model into container now
2023-08-11 13:19:16,437:INFO:_master_model_container: 6
2023-08-11 13:19:16,437:INFO:_display_container: 2
2023-08-11 13:19:16,437:INFO:LassoLars(random_state=2)
2023-08-11 13:19:16,437:INFO:create_model() successfully completed......................................
2023-08-11 13:19:16,594:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:16,594:INFO:Creating metrics dataframe
2023-08-11 13:19:16,603:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 13:19:16,603:INFO:Total runtime is 0.06990283727645874 minutes
2023-08-11 13:19:16,605:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:16,605:INFO:Initializing create_model()
2023-08-11 13:19:16,605:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=omp, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:16,605:INFO:Checking exceptions
2023-08-11 13:19:16,605:INFO:Importing libraries
2023-08-11 13:19:16,605:INFO:Copying training dataset
2023-08-11 13:19:16,607:INFO:Defining folds
2023-08-11 13:19:16,608:INFO:Declaring metric variables
2023-08-11 13:19:16,610:INFO:Importing untrained model
2023-08-11 13:19:16,612:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 13:19:16,616:INFO:Starting cross validation
2023-08-11 13:19:16,616:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:16,648:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:16,666:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:16,666:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:16,668:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:16,692:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:16,706:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:16,724:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:16,725:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:16,742:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:16,766:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:17,063:INFO:Calculating mean and std
2023-08-11 13:19:17,064:INFO:Creating metrics dataframe
2023-08-11 13:19:17,146:INFO:Uploading results into container
2023-08-11 13:19:17,147:INFO:Uploading model into container now
2023-08-11 13:19:17,147:INFO:_master_model_container: 7
2023-08-11 13:19:17,147:INFO:_display_container: 2
2023-08-11 13:19:17,147:INFO:OrthogonalMatchingPursuit()
2023-08-11 13:19:17,147:INFO:create_model() successfully completed......................................
2023-08-11 13:19:17,303:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:17,303:INFO:Creating metrics dataframe
2023-08-11 13:19:17,312:INFO:Initializing Bayesian Ridge
2023-08-11 13:19:17,312:INFO:Total runtime is 0.08172361850738526 minutes
2023-08-11 13:19:17,314:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:17,314:INFO:Initializing create_model()
2023-08-11 13:19:17,314:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=br, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:17,314:INFO:Checking exceptions
2023-08-11 13:19:17,314:INFO:Importing libraries
2023-08-11 13:19:17,314:INFO:Copying training dataset
2023-08-11 13:19:17,317:INFO:Defining folds
2023-08-11 13:19:17,317:INFO:Declaring metric variables
2023-08-11 13:19:17,319:INFO:Importing untrained model
2023-08-11 13:19:17,321:INFO:Bayesian Ridge Imported successfully
2023-08-11 13:19:17,326:INFO:Starting cross validation
2023-08-11 13:19:17,326:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:17,770:INFO:Calculating mean and std
2023-08-11 13:19:17,772:INFO:Creating metrics dataframe
2023-08-11 13:19:17,853:INFO:Uploading results into container
2023-08-11 13:19:17,854:INFO:Uploading model into container now
2023-08-11 13:19:17,854:INFO:_master_model_container: 8
2023-08-11 13:19:17,854:INFO:_display_container: 2
2023-08-11 13:19:17,854:INFO:BayesianRidge()
2023-08-11 13:19:17,854:INFO:create_model() successfully completed......................................
2023-08-11 13:19:18,010:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:18,010:INFO:Creating metrics dataframe
2023-08-11 13:19:18,019:INFO:Initializing Passive Aggressive Regressor
2023-08-11 13:19:18,019:INFO:Total runtime is 0.09350778659184775 minutes
2023-08-11 13:19:18,021:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:18,021:INFO:Initializing create_model()
2023-08-11 13:19:18,021:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=par, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:18,021:INFO:Checking exceptions
2023-08-11 13:19:18,021:INFO:Importing libraries
2023-08-11 13:19:18,021:INFO:Copying training dataset
2023-08-11 13:19:18,024:INFO:Defining folds
2023-08-11 13:19:18,024:INFO:Declaring metric variables
2023-08-11 13:19:18,026:INFO:Importing untrained model
2023-08-11 13:19:18,028:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 13:19:18,032:INFO:Starting cross validation
2023-08-11 13:19:18,033:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:18,473:INFO:Calculating mean and std
2023-08-11 13:19:18,474:INFO:Creating metrics dataframe
2023-08-11 13:19:18,556:INFO:Uploading results into container
2023-08-11 13:19:18,556:INFO:Uploading model into container now
2023-08-11 13:19:18,557:INFO:_master_model_container: 9
2023-08-11 13:19:18,557:INFO:_display_container: 2
2023-08-11 13:19:18,557:INFO:PassiveAggressiveRegressor(random_state=2)
2023-08-11 13:19:18,557:INFO:create_model() successfully completed......................................
2023-08-11 13:19:18,714:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:18,714:INFO:Creating metrics dataframe
2023-08-11 13:19:18,724:INFO:Initializing Huber Regressor
2023-08-11 13:19:18,724:INFO:Total runtime is 0.10525238116582236 minutes
2023-08-11 13:19:18,726:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:18,726:INFO:Initializing create_model()
2023-08-11 13:19:18,726:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=huber, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:18,726:INFO:Checking exceptions
2023-08-11 13:19:18,726:INFO:Importing libraries
2023-08-11 13:19:18,726:INFO:Copying training dataset
2023-08-11 13:19:18,729:INFO:Defining folds
2023-08-11 13:19:18,729:INFO:Declaring metric variables
2023-08-11 13:19:18,731:INFO:Importing untrained model
2023-08-11 13:19:18,734:INFO:Huber Regressor Imported successfully
2023-08-11 13:19:18,738:INFO:Starting cross validation
2023-08-11 13:19:18,738:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:19,177:INFO:Calculating mean and std
2023-08-11 13:19:19,178:INFO:Creating metrics dataframe
2023-08-11 13:19:19,260:INFO:Uploading results into container
2023-08-11 13:19:19,261:INFO:Uploading model into container now
2023-08-11 13:19:19,261:INFO:_master_model_container: 10
2023-08-11 13:19:19,261:INFO:_display_container: 2
2023-08-11 13:19:19,261:INFO:HuberRegressor()
2023-08-11 13:19:19,261:INFO:create_model() successfully completed......................................
2023-08-11 13:19:19,418:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:19,418:INFO:Creating metrics dataframe
2023-08-11 13:19:19,427:INFO:Initializing K Neighbors Regressor
2023-08-11 13:19:19,427:INFO:Total runtime is 0.11697500149408978 minutes
2023-08-11 13:19:19,429:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:19,429:INFO:Initializing create_model()
2023-08-11 13:19:19,429:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=knn, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:19,429:INFO:Checking exceptions
2023-08-11 13:19:19,429:INFO:Importing libraries
2023-08-11 13:19:19,429:INFO:Copying training dataset
2023-08-11 13:19:19,432:INFO:Defining folds
2023-08-11 13:19:19,432:INFO:Declaring metric variables
2023-08-11 13:19:19,434:INFO:Importing untrained model
2023-08-11 13:19:19,436:INFO:K Neighbors Regressor Imported successfully
2023-08-11 13:19:19,440:INFO:Starting cross validation
2023-08-11 13:19:19,441:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:19,948:INFO:Calculating mean and std
2023-08-11 13:19:19,949:INFO:Creating metrics dataframe
2023-08-11 13:19:20,031:INFO:Uploading results into container
2023-08-11 13:19:20,031:INFO:Uploading model into container now
2023-08-11 13:19:20,032:INFO:_master_model_container: 11
2023-08-11 13:19:20,032:INFO:_display_container: 2
2023-08-11 13:19:20,032:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 13:19:20,032:INFO:create_model() successfully completed......................................
2023-08-11 13:19:20,188:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:20,188:INFO:Creating metrics dataframe
2023-08-11 13:19:20,198:INFO:Initializing Decision Tree Regressor
2023-08-11 13:19:20,198:INFO:Total runtime is 0.129820720354716 minutes
2023-08-11 13:19:20,200:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:20,200:INFO:Initializing create_model()
2023-08-11 13:19:20,200:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=dt, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:20,200:INFO:Checking exceptions
2023-08-11 13:19:20,200:INFO:Importing libraries
2023-08-11 13:19:20,200:INFO:Copying training dataset
2023-08-11 13:19:20,203:INFO:Defining folds
2023-08-11 13:19:20,203:INFO:Declaring metric variables
2023-08-11 13:19:20,205:INFO:Importing untrained model
2023-08-11 13:19:20,207:INFO:Decision Tree Regressor Imported successfully
2023-08-11 13:19:20,211:INFO:Starting cross validation
2023-08-11 13:19:20,211:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:20,619:INFO:Calculating mean and std
2023-08-11 13:19:20,620:INFO:Creating metrics dataframe
2023-08-11 13:19:20,702:INFO:Uploading results into container
2023-08-11 13:19:20,703:INFO:Uploading model into container now
2023-08-11 13:19:20,703:INFO:_master_model_container: 12
2023-08-11 13:19:20,703:INFO:_display_container: 2
2023-08-11 13:19:20,703:INFO:DecisionTreeRegressor(random_state=2)
2023-08-11 13:19:20,703:INFO:create_model() successfully completed......................................
2023-08-11 13:19:20,859:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:20,859:INFO:Creating metrics dataframe
2023-08-11 13:19:20,869:INFO:Initializing Random Forest Regressor
2023-08-11 13:19:20,869:INFO:Total runtime is 0.14101038773854577 minutes
2023-08-11 13:19:20,871:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:20,871:INFO:Initializing create_model()
2023-08-11 13:19:20,871:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=rf, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:20,871:INFO:Checking exceptions
2023-08-11 13:19:20,871:INFO:Importing libraries
2023-08-11 13:19:20,871:INFO:Copying training dataset
2023-08-11 13:19:20,874:INFO:Defining folds
2023-08-11 13:19:20,874:INFO:Declaring metric variables
2023-08-11 13:19:20,876:INFO:Importing untrained model
2023-08-11 13:19:20,878:INFO:Random Forest Regressor Imported successfully
2023-08-11 13:19:20,882:INFO:Starting cross validation
2023-08-11 13:19:20,883:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:21,804:INFO:Calculating mean and std
2023-08-11 13:19:21,805:INFO:Creating metrics dataframe
2023-08-11 13:19:21,891:INFO:Uploading results into container
2023-08-11 13:19:21,891:INFO:Uploading model into container now
2023-08-11 13:19:21,892:INFO:_master_model_container: 13
2023-08-11 13:19:21,892:INFO:_display_container: 2
2023-08-11 13:19:21,892:INFO:RandomForestRegressor(n_jobs=-1, random_state=2)
2023-08-11 13:19:21,892:INFO:create_model() successfully completed......................................
2023-08-11 13:19:22,051:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:22,051:INFO:Creating metrics dataframe
2023-08-11 13:19:22,061:INFO:Initializing Extra Trees Regressor
2023-08-11 13:19:22,061:INFO:Total runtime is 0.160880716641744 minutes
2023-08-11 13:19:22,063:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:22,064:INFO:Initializing create_model()
2023-08-11 13:19:22,064:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=et, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:22,064:INFO:Checking exceptions
2023-08-11 13:19:22,064:INFO:Importing libraries
2023-08-11 13:19:22,064:INFO:Copying training dataset
2023-08-11 13:19:22,066:INFO:Defining folds
2023-08-11 13:19:22,066:INFO:Declaring metric variables
2023-08-11 13:19:22,069:INFO:Importing untrained model
2023-08-11 13:19:22,071:INFO:Extra Trees Regressor Imported successfully
2023-08-11 13:19:22,075:INFO:Starting cross validation
2023-08-11 13:19:22,076:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:22,937:INFO:Calculating mean and std
2023-08-11 13:19:22,939:INFO:Creating metrics dataframe
2023-08-11 13:19:23,025:INFO:Uploading results into container
2023-08-11 13:19:23,026:INFO:Uploading model into container now
2023-08-11 13:19:23,026:INFO:_master_model_container: 14
2023-08-11 13:19:23,026:INFO:_display_container: 2
2023-08-11 13:19:23,026:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=2)
2023-08-11 13:19:23,026:INFO:create_model() successfully completed......................................
2023-08-11 13:19:23,183:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:23,183:INFO:Creating metrics dataframe
2023-08-11 13:19:23,193:INFO:Initializing AdaBoost Regressor
2023-08-11 13:19:23,193:INFO:Total runtime is 0.17974868615468345 minutes
2023-08-11 13:19:23,195:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:23,196:INFO:Initializing create_model()
2023-08-11 13:19:23,196:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=ada, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:23,196:INFO:Checking exceptions
2023-08-11 13:19:23,196:INFO:Importing libraries
2023-08-11 13:19:23,196:INFO:Copying training dataset
2023-08-11 13:19:23,198:INFO:Defining folds
2023-08-11 13:19:23,198:INFO:Declaring metric variables
2023-08-11 13:19:23,200:INFO:Importing untrained model
2023-08-11 13:19:23,203:INFO:AdaBoost Regressor Imported successfully
2023-08-11 13:19:23,207:INFO:Starting cross validation
2023-08-11 13:19:23,207:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:23,713:INFO:Calculating mean and std
2023-08-11 13:19:23,714:INFO:Creating metrics dataframe
2023-08-11 13:19:23,800:INFO:Uploading results into container
2023-08-11 13:19:23,801:INFO:Uploading model into container now
2023-08-11 13:19:23,801:INFO:_master_model_container: 15
2023-08-11 13:19:23,801:INFO:_display_container: 2
2023-08-11 13:19:23,801:INFO:AdaBoostRegressor(random_state=2)
2023-08-11 13:19:23,801:INFO:create_model() successfully completed......................................
2023-08-11 13:19:23,957:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:23,957:INFO:Creating metrics dataframe
2023-08-11 13:19:23,967:INFO:Initializing Gradient Boosting Regressor
2023-08-11 13:19:23,967:INFO:Total runtime is 0.19265009959538779 minutes
2023-08-11 13:19:23,970:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:23,970:INFO:Initializing create_model()
2023-08-11 13:19:23,970:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=gbr, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:23,970:INFO:Checking exceptions
2023-08-11 13:19:23,970:INFO:Importing libraries
2023-08-11 13:19:23,970:INFO:Copying training dataset
2023-08-11 13:19:23,972:INFO:Defining folds
2023-08-11 13:19:23,972:INFO:Declaring metric variables
2023-08-11 13:19:23,974:INFO:Importing untrained model
2023-08-11 13:19:23,977:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 13:19:23,981:INFO:Starting cross validation
2023-08-11 13:19:23,981:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:24,495:INFO:Calculating mean and std
2023-08-11 13:19:24,497:INFO:Creating metrics dataframe
2023-08-11 13:19:24,583:INFO:Uploading results into container
2023-08-11 13:19:24,583:INFO:Uploading model into container now
2023-08-11 13:19:24,583:INFO:_master_model_container: 16
2023-08-11 13:19:24,583:INFO:_display_container: 2
2023-08-11 13:19:24,584:INFO:GradientBoostingRegressor(random_state=2)
2023-08-11 13:19:24,584:INFO:create_model() successfully completed......................................
2023-08-11 13:19:24,741:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:24,742:INFO:Creating metrics dataframe
2023-08-11 13:19:24,752:INFO:Initializing Extreme Gradient Boosting
2023-08-11 13:19:24,752:INFO:Total runtime is 0.20572608709335327 minutes
2023-08-11 13:19:24,754:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:24,754:INFO:Initializing create_model()
2023-08-11 13:19:24,754:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=xgboost, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:24,754:INFO:Checking exceptions
2023-08-11 13:19:24,754:INFO:Importing libraries
2023-08-11 13:19:24,754:INFO:Copying training dataset
2023-08-11 13:19:24,757:INFO:Defining folds
2023-08-11 13:19:24,757:INFO:Declaring metric variables
2023-08-11 13:19:24,759:INFO:Importing untrained model
2023-08-11 13:19:24,761:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 13:19:24,765:INFO:Starting cross validation
2023-08-11 13:19:24,766:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:25,253:INFO:Calculating mean and std
2023-08-11 13:19:25,254:INFO:Creating metrics dataframe
2023-08-11 13:19:25,340:INFO:Uploading results into container
2023-08-11 13:19:25,340:INFO:Uploading model into container now
2023-08-11 13:19:25,341:INFO:_master_model_container: 17
2023-08-11 13:19:25,341:INFO:_display_container: 2
2023-08-11 13:19:25,341:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=2,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 13:19:25,341:INFO:create_model() successfully completed......................................
2023-08-11 13:19:25,498:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:25,498:INFO:Creating metrics dataframe
2023-08-11 13:19:25,509:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 13:19:25,509:INFO:Total runtime is 0.218335231145223 minutes
2023-08-11 13:19:25,511:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:25,511:INFO:Initializing create_model()
2023-08-11 13:19:25,511:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:25,511:INFO:Checking exceptions
2023-08-11 13:19:25,511:INFO:Importing libraries
2023-08-11 13:19:25,511:INFO:Copying training dataset
2023-08-11 13:19:25,513:INFO:Defining folds
2023-08-11 13:19:25,513:INFO:Declaring metric variables
2023-08-11 13:19:25,515:INFO:Importing untrained model
2023-08-11 13:19:25,518:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 13:19:25,522:INFO:Starting cross validation
2023-08-11 13:19:25,522:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:25,979:INFO:Calculating mean and std
2023-08-11 13:19:25,980:INFO:Creating metrics dataframe
2023-08-11 13:19:26,066:INFO:Uploading results into container
2023-08-11 13:19:26,066:INFO:Uploading model into container now
2023-08-11 13:19:26,066:INFO:_master_model_container: 18
2023-08-11 13:19:26,066:INFO:_display_container: 2
2023-08-11 13:19:26,067:INFO:LGBMRegressor(random_state=2)
2023-08-11 13:19:26,067:INFO:create_model() successfully completed......................................
2023-08-11 13:19:26,224:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:26,224:INFO:Creating metrics dataframe
2023-08-11 13:19:26,235:INFO:Initializing CatBoost Regressor
2023-08-11 13:19:26,235:INFO:Total runtime is 0.23043630123138428 minutes
2023-08-11 13:19:26,237:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:26,237:INFO:Initializing create_model()
2023-08-11 13:19:26,237:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=catboost, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:26,237:INFO:Checking exceptions
2023-08-11 13:19:26,237:INFO:Importing libraries
2023-08-11 13:19:26,237:INFO:Copying training dataset
2023-08-11 13:19:26,239:INFO:Defining folds
2023-08-11 13:19:26,239:INFO:Declaring metric variables
2023-08-11 13:19:26,242:INFO:Importing untrained model
2023-08-11 13:19:26,244:INFO:CatBoost Regressor Imported successfully
2023-08-11 13:19:26,248:INFO:Starting cross validation
2023-08-11 13:19:26,248:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:27,768:INFO:Calculating mean and std
2023-08-11 13:19:27,769:INFO:Creating metrics dataframe
2023-08-11 13:19:27,859:INFO:Uploading results into container
2023-08-11 13:19:27,860:INFO:Uploading model into container now
2023-08-11 13:19:27,860:INFO:_master_model_container: 19
2023-08-11 13:19:27,860:INFO:_display_container: 2
2023-08-11 13:19:27,860:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d11f627d0>
2023-08-11 13:19:27,860:INFO:create_model() successfully completed......................................
2023-08-11 13:19:28,018:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:28,018:INFO:Creating metrics dataframe
2023-08-11 13:19:28,029:INFO:Initializing Dummy Regressor
2023-08-11 13:19:28,029:INFO:Total runtime is 0.2603383183479309 minutes
2023-08-11 13:19:28,031:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:28,031:INFO:Initializing create_model()
2023-08-11 13:19:28,031:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=dummy, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d45451cd0>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:28,031:INFO:Checking exceptions
2023-08-11 13:19:28,031:INFO:Importing libraries
2023-08-11 13:19:28,031:INFO:Copying training dataset
2023-08-11 13:19:28,034:INFO:Defining folds
2023-08-11 13:19:28,034:INFO:Declaring metric variables
2023-08-11 13:19:28,036:INFO:Importing untrained model
2023-08-11 13:19:28,038:INFO:Dummy Regressor Imported successfully
2023-08-11 13:19:28,042:INFO:Starting cross validation
2023-08-11 13:19:28,043:INFO:Cross validating with KFold(n_splits=10, random_state=2, shuffle=True), n_jobs=-1
2023-08-11 13:19:28,507:INFO:Calculating mean and std
2023-08-11 13:19:28,509:INFO:Creating metrics dataframe
2023-08-11 13:19:28,597:INFO:Uploading results into container
2023-08-11 13:19:28,597:INFO:Uploading model into container now
2023-08-11 13:19:28,597:INFO:_master_model_container: 20
2023-08-11 13:19:28,597:INFO:_display_container: 2
2023-08-11 13:19:28,597:INFO:DummyRegressor()
2023-08-11 13:19:28,597:INFO:create_model() successfully completed......................................
2023-08-11 13:19:28,754:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:28,754:INFO:Creating metrics dataframe
2023-08-11 13:19:28,771:INFO:Initializing create_model()
2023-08-11 13:19:28,771:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d43f8b850>, estimator=<catboost.core.CatBoostRegressor object at 0x7f9d11f627d0>, fold=KFold(n_splits=10, random_state=2, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:28,771:INFO:Checking exceptions
2023-08-11 13:19:28,772:INFO:Importing libraries
2023-08-11 13:19:28,772:INFO:Copying training dataset
2023-08-11 13:19:28,774:INFO:Defining folds
2023-08-11 13:19:28,774:INFO:Declaring metric variables
2023-08-11 13:19:28,774:INFO:Importing untrained model
2023-08-11 13:19:28,774:INFO:Declaring custom model
2023-08-11 13:19:28,774:INFO:CatBoost Regressor Imported successfully
2023-08-11 13:19:28,775:INFO:Cross validation set to False
2023-08-11 13:19:28,775:INFO:Fitting Model
2023-08-11 13:19:29,169:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d442d73d0>
2023-08-11 13:19:29,169:INFO:create_model() successfully completed......................................
2023-08-11 13:19:29,357:INFO:_master_model_container: 20
2023-08-11 13:19:29,357:INFO:_display_container: 2
2023-08-11 13:19:29,357:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d442d73d0>
2023-08-11 13:19:29,357:INFO:compare_models() successfully completed......................................
2023-08-11 13:19:34,993:INFO:PyCaret RegressionExperiment
2023-08-11 13:19:34,994:INFO:Logging name: reg-default-name
2023-08-11 13:19:34,994:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 13:19:34,994:INFO:version 3.0.2
2023-08-11 13:19:34,994:INFO:Initializing setup()
2023-08-11 13:19:34,994:INFO:self.USI: 0c14
2023-08-11 13:19:34,994:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 13:19:34,994:INFO:Checking environment
2023-08-11 13:19:34,994:INFO:python_version: 3.7.13
2023-08-11 13:19:34,994:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 13:19:34,994:INFO:machine: x86_64
2023-08-11 13:19:34,994:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 13:19:34,994:INFO:Memory: svmem(total=17179869184, available=1173925888, percent=93.2, used=1591828480, free=19263488, active=1157308416, inactive=1151016960, wired=434520064)
2023-08-11 13:19:34,994:INFO:Physical Core: 8
2023-08-11 13:19:34,994:INFO:Logical Core: 8
2023-08-11 13:19:34,994:INFO:Checking libraries
2023-08-11 13:19:34,994:INFO:System:
2023-08-11 13:19:34,994:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 13:19:34,994:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 13:19:34,994:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 13:19:34,994:INFO:PyCaret required dependencies:
2023-08-11 13:19:34,994:INFO:                 pip: 22.3.1
2023-08-11 13:19:34,994:INFO:          setuptools: 63.4.1
2023-08-11 13:19:34,994:INFO:             pycaret: 3.0.2
2023-08-11 13:19:34,994:INFO:             IPython: 7.33.0
2023-08-11 13:19:34,994:INFO:          ipywidgets: 8.0.2
2023-08-11 13:19:34,994:INFO:                tqdm: 4.64.1
2023-08-11 13:19:34,994:INFO:               numpy: 1.21.5
2023-08-11 13:19:34,995:INFO:              pandas: 1.3.5
2023-08-11 13:19:34,995:INFO:              jinja2: 3.1.2
2023-08-11 13:19:34,995:INFO:               scipy: 1.7.3
2023-08-11 13:19:34,995:INFO:              joblib: 1.2.0
2023-08-11 13:19:34,995:INFO:             sklearn: 1.0.2
2023-08-11 13:19:34,995:INFO:                pyod: 1.0.9
2023-08-11 13:19:34,995:INFO:            imblearn: 0.10.1
2023-08-11 13:19:34,995:INFO:   category_encoders: 2.6.1
2023-08-11 13:19:34,995:INFO:            lightgbm: 3.3.2
2023-08-11 13:19:34,995:INFO:               numba: 0.56.2
2023-08-11 13:19:34,995:INFO:            requests: 2.28.1
2023-08-11 13:19:34,995:INFO:          matplotlib: 3.5.3
2023-08-11 13:19:34,995:INFO:          scikitplot: 0.3.7
2023-08-11 13:19:34,995:INFO:         yellowbrick: 1.5
2023-08-11 13:19:34,995:INFO:              plotly: 5.13.0
2023-08-11 13:19:34,995:INFO:             kaleido: 0.2.1
2023-08-11 13:19:34,995:INFO:         statsmodels: 0.13.2
2023-08-11 13:19:34,995:INFO:              sktime: 0.17.0
2023-08-11 13:19:34,995:INFO:               tbats: 1.1.3
2023-08-11 13:19:34,995:INFO:            pmdarima: 2.0.3
2023-08-11 13:19:34,995:INFO:              psutil: 5.9.2
2023-08-11 13:19:34,995:INFO:PyCaret optional dependencies:
2023-08-11 13:19:34,995:INFO:                shap: Not installed
2023-08-11 13:19:34,995:INFO:           interpret: Not installed
2023-08-11 13:19:34,995:INFO:                umap: 0.5.3
2023-08-11 13:19:34,995:INFO:    pandas_profiling: 3.0.0
2023-08-11 13:19:34,995:INFO:  explainerdashboard: Not installed
2023-08-11 13:19:34,995:INFO:             autoviz: Not installed
2023-08-11 13:19:34,995:INFO:           fairlearn: Not installed
2023-08-11 13:19:34,995:INFO:             xgboost: 1.6.2
2023-08-11 13:19:34,995:INFO:            catboost: 1.0.4
2023-08-11 13:19:34,995:INFO:              kmodes: 0.12.2
2023-08-11 13:19:34,995:INFO:             mlxtend: 0.19.0
2023-08-11 13:19:34,995:INFO:       statsforecast: Not installed
2023-08-11 13:19:34,995:INFO:        tune_sklearn: Not installed
2023-08-11 13:19:34,995:INFO:                 ray: Not installed
2023-08-11 13:19:34,995:INFO:            hyperopt: Not installed
2023-08-11 13:19:34,995:INFO:              optuna: Not installed
2023-08-11 13:19:34,995:INFO:               skopt: Not installed
2023-08-11 13:19:34,995:INFO:              mlflow: 1.29.0
2023-08-11 13:19:34,995:INFO:              gradio: Not installed
2023-08-11 13:19:34,995:INFO:             fastapi: Not installed
2023-08-11 13:19:34,995:INFO:             uvicorn: Not installed
2023-08-11 13:19:34,995:INFO:              m2cgen: Not installed
2023-08-11 13:19:34,996:INFO:           evidently: Not installed
2023-08-11 13:19:34,996:INFO:               fugue: Not installed
2023-08-11 13:19:34,996:INFO:           streamlit: 1.13.0
2023-08-11 13:19:34,996:INFO:             prophet: Not installed
2023-08-11 13:19:34,996:INFO:None
2023-08-11 13:19:34,996:INFO:Set up data.
2023-08-11 13:19:34,998:INFO:Set up train/test split.
2023-08-11 13:19:35,000:INFO:Set up index.
2023-08-11 13:19:35,000:INFO:Set up folding strategy.
2023-08-11 13:19:35,000:INFO:Assigning column types.
2023-08-11 13:19:35,002:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 13:19:35,003:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,006:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,010:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,056:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,092:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,092:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:35,094:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:35,095:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,099:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,102:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,148:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,185:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,185:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:35,187:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:35,188:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 13:19:35,192:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,195:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,241:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,278:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,278:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:35,280:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:35,284:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,288:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,334:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,370:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,371:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:35,373:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:35,373:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 13:19:35,380:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,426:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,463:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,463:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:35,465:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:35,473:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,519:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,555:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,556:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:35,558:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:35,559:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 13:19:35,612:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,649:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,649:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:35,651:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:35,705:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,741:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,742:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:35,744:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:35,744:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 13:19:35,797:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,834:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:35,836:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:35,889:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:19:35,926:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:35,928:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:35,928:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 13:19:36,022:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:36,024:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:36,114:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:36,116:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:36,117:INFO:Preparing preprocessing pipeline...
2023-08-11 13:19:36,117:INFO:Set up simple imputation.
2023-08-11 13:19:36,128:INFO:Finished creating preprocessing pipeline.
2023-08-11 13:19:36,130:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ABC', 'nAcid', 'AATS0i', 'ATSC4c',
                                             'PEOE_VSA13', 'EState_VSA6'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-11 13:19:36,130:INFO:Creating final display dataframe.
2023-08-11 13:19:36,170:INFO:Setup _display_container:                     Description             Value
0                    Session id                22
1                        Target               pKi
2                   Target type        Regression
3           Original data shape          (316, 7)
4        Transformed data shape          (316, 7)
5   Transformed train set shape          (221, 7)
6    Transformed test set shape           (95, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              0c14
2023-08-11 13:19:36,265:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:36,267:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:36,357:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:19:36,359:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:19:36,360:INFO:setup() successfully completed in 1.45s...............
2023-08-11 13:19:36,403:INFO:Initializing compare_models()
2023-08-11 13:19:36,403:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 13:19:36,403:INFO:Checking exceptions
2023-08-11 13:19:36,404:INFO:Preparing display monitor
2023-08-11 13:19:36,430:INFO:Initializing Linear Regression
2023-08-11 13:19:36,430:INFO:Total runtime is 2.9802322387695312e-06 minutes
2023-08-11 13:19:36,432:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:36,433:INFO:Initializing create_model()
2023-08-11 13:19:36,433:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=lr, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:36,433:INFO:Checking exceptions
2023-08-11 13:19:36,433:INFO:Importing libraries
2023-08-11 13:19:36,433:INFO:Copying training dataset
2023-08-11 13:19:36,435:INFO:Defining folds
2023-08-11 13:19:36,435:INFO:Declaring metric variables
2023-08-11 13:19:36,437:INFO:Importing untrained model
2023-08-11 13:19:36,440:INFO:Linear Regression Imported successfully
2023-08-11 13:19:36,444:INFO:Starting cross validation
2023-08-11 13:19:36,444:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:36,916:INFO:Calculating mean and std
2023-08-11 13:19:36,917:INFO:Creating metrics dataframe
2023-08-11 13:19:37,004:INFO:Uploading results into container
2023-08-11 13:19:37,004:INFO:Uploading model into container now
2023-08-11 13:19:37,004:INFO:_master_model_container: 1
2023-08-11 13:19:37,004:INFO:_display_container: 2
2023-08-11 13:19:37,004:INFO:LinearRegression(n_jobs=-1)
2023-08-11 13:19:37,004:INFO:create_model() successfully completed......................................
2023-08-11 13:19:37,163:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:37,163:INFO:Creating metrics dataframe
2023-08-11 13:19:37,171:INFO:Initializing Lasso Regression
2023-08-11 13:19:37,171:INFO:Total runtime is 0.012351667881011963 minutes
2023-08-11 13:19:37,173:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:37,173:INFO:Initializing create_model()
2023-08-11 13:19:37,173:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=lasso, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:37,173:INFO:Checking exceptions
2023-08-11 13:19:37,173:INFO:Importing libraries
2023-08-11 13:19:37,173:INFO:Copying training dataset
2023-08-11 13:19:37,175:INFO:Defining folds
2023-08-11 13:19:37,175:INFO:Declaring metric variables
2023-08-11 13:19:37,177:INFO:Importing untrained model
2023-08-11 13:19:37,179:INFO:Lasso Regression Imported successfully
2023-08-11 13:19:37,182:INFO:Starting cross validation
2023-08-11 13:19:37,183:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:37,638:INFO:Calculating mean and std
2023-08-11 13:19:37,639:INFO:Creating metrics dataframe
2023-08-11 13:19:37,727:INFO:Uploading results into container
2023-08-11 13:19:37,727:INFO:Uploading model into container now
2023-08-11 13:19:37,727:INFO:_master_model_container: 2
2023-08-11 13:19:37,727:INFO:_display_container: 2
2023-08-11 13:19:37,727:INFO:Lasso(random_state=22)
2023-08-11 13:19:37,727:INFO:create_model() successfully completed......................................
2023-08-11 13:19:37,884:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:37,884:INFO:Creating metrics dataframe
2023-08-11 13:19:37,892:INFO:Initializing Ridge Regression
2023-08-11 13:19:37,892:INFO:Total runtime is 0.024371031920115152 minutes
2023-08-11 13:19:37,894:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:37,894:INFO:Initializing create_model()
2023-08-11 13:19:37,894:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=ridge, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:37,894:INFO:Checking exceptions
2023-08-11 13:19:37,894:INFO:Importing libraries
2023-08-11 13:19:37,894:INFO:Copying training dataset
2023-08-11 13:19:37,897:INFO:Defining folds
2023-08-11 13:19:37,897:INFO:Declaring metric variables
2023-08-11 13:19:37,899:INFO:Importing untrained model
2023-08-11 13:19:37,901:INFO:Ridge Regression Imported successfully
2023-08-11 13:19:37,905:INFO:Starting cross validation
2023-08-11 13:19:37,907:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:38,369:INFO:Calculating mean and std
2023-08-11 13:19:38,370:INFO:Creating metrics dataframe
2023-08-11 13:19:38,458:INFO:Uploading results into container
2023-08-11 13:19:38,458:INFO:Uploading model into container now
2023-08-11 13:19:38,458:INFO:_master_model_container: 3
2023-08-11 13:19:38,458:INFO:_display_container: 2
2023-08-11 13:19:38,459:INFO:Ridge(random_state=22)
2023-08-11 13:19:38,459:INFO:create_model() successfully completed......................................
2023-08-11 13:19:38,616:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:38,616:INFO:Creating metrics dataframe
2023-08-11 13:19:38,624:INFO:Initializing Elastic Net
2023-08-11 13:19:38,624:INFO:Total runtime is 0.036574848492940265 minutes
2023-08-11 13:19:38,626:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:38,626:INFO:Initializing create_model()
2023-08-11 13:19:38,626:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=en, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:38,626:INFO:Checking exceptions
2023-08-11 13:19:38,626:INFO:Importing libraries
2023-08-11 13:19:38,626:INFO:Copying training dataset
2023-08-11 13:19:38,629:INFO:Defining folds
2023-08-11 13:19:38,629:INFO:Declaring metric variables
2023-08-11 13:19:38,631:INFO:Importing untrained model
2023-08-11 13:19:38,633:INFO:Elastic Net Imported successfully
2023-08-11 13:19:38,637:INFO:Starting cross validation
2023-08-11 13:19:38,638:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:39,095:INFO:Calculating mean and std
2023-08-11 13:19:39,096:INFO:Creating metrics dataframe
2023-08-11 13:19:39,183:INFO:Uploading results into container
2023-08-11 13:19:39,184:INFO:Uploading model into container now
2023-08-11 13:19:39,184:INFO:_master_model_container: 4
2023-08-11 13:19:39,184:INFO:_display_container: 2
2023-08-11 13:19:39,184:INFO:ElasticNet(random_state=22)
2023-08-11 13:19:39,184:INFO:create_model() successfully completed......................................
2023-08-11 13:19:39,341:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:39,342:INFO:Creating metrics dataframe
2023-08-11 13:19:39,350:INFO:Initializing Least Angle Regression
2023-08-11 13:19:39,350:INFO:Total runtime is 0.04867901404698689 minutes
2023-08-11 13:19:39,352:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:39,353:INFO:Initializing create_model()
2023-08-11 13:19:39,353:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=lar, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:39,353:INFO:Checking exceptions
2023-08-11 13:19:39,353:INFO:Importing libraries
2023-08-11 13:19:39,353:INFO:Copying training dataset
2023-08-11 13:19:39,355:INFO:Defining folds
2023-08-11 13:19:39,355:INFO:Declaring metric variables
2023-08-11 13:19:39,358:INFO:Importing untrained model
2023-08-11 13:19:39,360:INFO:Least Angle Regression Imported successfully
2023-08-11 13:19:39,365:INFO:Starting cross validation
2023-08-11 13:19:39,365:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:39,398:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:39,407:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:39,407:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:39,417:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:39,424:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:39,448:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:39,469:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:39,478:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:39,503:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:39,536:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:39,835:INFO:Calculating mean and std
2023-08-11 13:19:39,836:INFO:Creating metrics dataframe
2023-08-11 13:19:39,924:INFO:Uploading results into container
2023-08-11 13:19:39,925:INFO:Uploading model into container now
2023-08-11 13:19:39,925:INFO:_master_model_container: 5
2023-08-11 13:19:39,925:INFO:_display_container: 2
2023-08-11 13:19:39,925:INFO:Lars(random_state=22)
2023-08-11 13:19:39,925:INFO:create_model() successfully completed......................................
2023-08-11 13:19:40,082:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:40,082:INFO:Creating metrics dataframe
2023-08-11 13:19:40,090:INFO:Initializing Lasso Least Angle Regression
2023-08-11 13:19:40,091:INFO:Total runtime is 0.0610165516535441 minutes
2023-08-11 13:19:40,093:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:40,093:INFO:Initializing create_model()
2023-08-11 13:19:40,093:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=llar, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:40,093:INFO:Checking exceptions
2023-08-11 13:19:40,093:INFO:Importing libraries
2023-08-11 13:19:40,093:INFO:Copying training dataset
2023-08-11 13:19:40,095:INFO:Defining folds
2023-08-11 13:19:40,095:INFO:Declaring metric variables
2023-08-11 13:19:40,098:INFO:Importing untrained model
2023-08-11 13:19:40,100:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 13:19:40,104:INFO:Starting cross validation
2023-08-11 13:19:40,104:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:40,137:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:40,151:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:40,152:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:40,155:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:40,159:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:40,167:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:40,186:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:40,191:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:40,260:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:40,260:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:19:40,557:INFO:Calculating mean and std
2023-08-11 13:19:40,558:INFO:Creating metrics dataframe
2023-08-11 13:19:40,646:INFO:Uploading results into container
2023-08-11 13:19:40,646:INFO:Uploading model into container now
2023-08-11 13:19:40,646:INFO:_master_model_container: 6
2023-08-11 13:19:40,646:INFO:_display_container: 2
2023-08-11 13:19:40,646:INFO:LassoLars(random_state=22)
2023-08-11 13:19:40,646:INFO:create_model() successfully completed......................................
2023-08-11 13:19:40,803:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:40,803:INFO:Creating metrics dataframe
2023-08-11 13:19:40,811:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 13:19:40,811:INFO:Total runtime is 0.07303131818771362 minutes
2023-08-11 13:19:40,813:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:40,814:INFO:Initializing create_model()
2023-08-11 13:19:40,814:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=omp, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:40,814:INFO:Checking exceptions
2023-08-11 13:19:40,814:INFO:Importing libraries
2023-08-11 13:19:40,814:INFO:Copying training dataset
2023-08-11 13:19:40,816:INFO:Defining folds
2023-08-11 13:19:40,816:INFO:Declaring metric variables
2023-08-11 13:19:40,818:INFO:Importing untrained model
2023-08-11 13:19:40,820:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 13:19:40,825:INFO:Starting cross validation
2023-08-11 13:19:40,826:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:40,857:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:40,861:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:40,865:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:40,876:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:40,887:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:40,909:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:40,910:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:40,913:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:40,962:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:40,978:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:19:41,273:INFO:Calculating mean and std
2023-08-11 13:19:41,275:INFO:Creating metrics dataframe
2023-08-11 13:19:41,362:INFO:Uploading results into container
2023-08-11 13:19:41,363:INFO:Uploading model into container now
2023-08-11 13:19:41,363:INFO:_master_model_container: 7
2023-08-11 13:19:41,363:INFO:_display_container: 2
2023-08-11 13:19:41,363:INFO:OrthogonalMatchingPursuit()
2023-08-11 13:19:41,363:INFO:create_model() successfully completed......................................
2023-08-11 13:19:41,520:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:41,520:INFO:Creating metrics dataframe
2023-08-11 13:19:41,528:INFO:Initializing Bayesian Ridge
2023-08-11 13:19:41,528:INFO:Total runtime is 0.08498241504033406 minutes
2023-08-11 13:19:41,531:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:41,531:INFO:Initializing create_model()
2023-08-11 13:19:41,531:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=br, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:41,531:INFO:Checking exceptions
2023-08-11 13:19:41,531:INFO:Importing libraries
2023-08-11 13:19:41,531:INFO:Copying training dataset
2023-08-11 13:19:41,534:INFO:Defining folds
2023-08-11 13:19:41,534:INFO:Declaring metric variables
2023-08-11 13:19:41,536:INFO:Importing untrained model
2023-08-11 13:19:41,538:INFO:Bayesian Ridge Imported successfully
2023-08-11 13:19:41,542:INFO:Starting cross validation
2023-08-11 13:19:41,543:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:41,989:INFO:Calculating mean and std
2023-08-11 13:19:41,990:INFO:Creating metrics dataframe
2023-08-11 13:19:42,079:INFO:Uploading results into container
2023-08-11 13:19:42,079:INFO:Uploading model into container now
2023-08-11 13:19:42,079:INFO:_master_model_container: 8
2023-08-11 13:19:42,079:INFO:_display_container: 2
2023-08-11 13:19:42,080:INFO:BayesianRidge()
2023-08-11 13:19:42,080:INFO:create_model() successfully completed......................................
2023-08-11 13:19:42,236:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:42,236:INFO:Creating metrics dataframe
2023-08-11 13:19:42,245:INFO:Initializing Passive Aggressive Regressor
2023-08-11 13:19:42,245:INFO:Total runtime is 0.09692593415578206 minutes
2023-08-11 13:19:42,247:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:42,247:INFO:Initializing create_model()
2023-08-11 13:19:42,247:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=par, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:42,247:INFO:Checking exceptions
2023-08-11 13:19:42,247:INFO:Importing libraries
2023-08-11 13:19:42,247:INFO:Copying training dataset
2023-08-11 13:19:42,250:INFO:Defining folds
2023-08-11 13:19:42,250:INFO:Declaring metric variables
2023-08-11 13:19:42,252:INFO:Importing untrained model
2023-08-11 13:19:42,254:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 13:19:42,259:INFO:Starting cross validation
2023-08-11 13:19:42,259:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:42,728:INFO:Calculating mean and std
2023-08-11 13:19:42,729:INFO:Creating metrics dataframe
2023-08-11 13:19:42,817:INFO:Uploading results into container
2023-08-11 13:19:42,817:INFO:Uploading model into container now
2023-08-11 13:19:42,818:INFO:_master_model_container: 9
2023-08-11 13:19:42,818:INFO:_display_container: 2
2023-08-11 13:19:42,818:INFO:PassiveAggressiveRegressor(random_state=22)
2023-08-11 13:19:42,818:INFO:create_model() successfully completed......................................
2023-08-11 13:19:42,976:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:42,976:INFO:Creating metrics dataframe
2023-08-11 13:19:42,985:INFO:Initializing Huber Regressor
2023-08-11 13:19:42,985:INFO:Total runtime is 0.10925901730855306 minutes
2023-08-11 13:19:42,987:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:42,987:INFO:Initializing create_model()
2023-08-11 13:19:42,987:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=huber, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:42,987:INFO:Checking exceptions
2023-08-11 13:19:42,987:INFO:Importing libraries
2023-08-11 13:19:42,987:INFO:Copying training dataset
2023-08-11 13:19:42,990:INFO:Defining folds
2023-08-11 13:19:42,990:INFO:Declaring metric variables
2023-08-11 13:19:42,992:INFO:Importing untrained model
2023-08-11 13:19:42,994:INFO:Huber Regressor Imported successfully
2023-08-11 13:19:42,998:INFO:Starting cross validation
2023-08-11 13:19:42,999:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:43,463:INFO:Calculating mean and std
2023-08-11 13:19:43,464:INFO:Creating metrics dataframe
2023-08-11 13:19:43,552:INFO:Uploading results into container
2023-08-11 13:19:43,552:INFO:Uploading model into container now
2023-08-11 13:19:43,553:INFO:_master_model_container: 10
2023-08-11 13:19:43,553:INFO:_display_container: 2
2023-08-11 13:19:43,553:INFO:HuberRegressor()
2023-08-11 13:19:43,553:INFO:create_model() successfully completed......................................
2023-08-11 13:19:43,712:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:43,713:INFO:Creating metrics dataframe
2023-08-11 13:19:43,722:INFO:Initializing K Neighbors Regressor
2023-08-11 13:19:43,722:INFO:Total runtime is 0.12154541810353597 minutes
2023-08-11 13:19:43,724:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:43,725:INFO:Initializing create_model()
2023-08-11 13:19:43,725:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=knn, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:43,725:INFO:Checking exceptions
2023-08-11 13:19:43,725:INFO:Importing libraries
2023-08-11 13:19:43,725:INFO:Copying training dataset
2023-08-11 13:19:43,727:INFO:Defining folds
2023-08-11 13:19:43,727:INFO:Declaring metric variables
2023-08-11 13:19:43,730:INFO:Importing untrained model
2023-08-11 13:19:43,732:INFO:K Neighbors Regressor Imported successfully
2023-08-11 13:19:43,737:INFO:Starting cross validation
2023-08-11 13:19:43,737:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:44,284:INFO:Calculating mean and std
2023-08-11 13:19:44,285:INFO:Creating metrics dataframe
2023-08-11 13:19:44,373:INFO:Uploading results into container
2023-08-11 13:19:44,374:INFO:Uploading model into container now
2023-08-11 13:19:44,374:INFO:_master_model_container: 11
2023-08-11 13:19:44,374:INFO:_display_container: 2
2023-08-11 13:19:44,374:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 13:19:44,374:INFO:create_model() successfully completed......................................
2023-08-11 13:19:44,532:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:44,532:INFO:Creating metrics dataframe
2023-08-11 13:19:44,542:INFO:Initializing Decision Tree Regressor
2023-08-11 13:19:44,542:INFO:Total runtime is 0.13520665168762208 minutes
2023-08-11 13:19:44,544:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:44,544:INFO:Initializing create_model()
2023-08-11 13:19:44,544:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=dt, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:44,544:INFO:Checking exceptions
2023-08-11 13:19:44,544:INFO:Importing libraries
2023-08-11 13:19:44,544:INFO:Copying training dataset
2023-08-11 13:19:44,547:INFO:Defining folds
2023-08-11 13:19:44,547:INFO:Declaring metric variables
2023-08-11 13:19:44,549:INFO:Importing untrained model
2023-08-11 13:19:44,551:INFO:Decision Tree Regressor Imported successfully
2023-08-11 13:19:44,555:INFO:Starting cross validation
2023-08-11 13:19:44,556:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:45,013:INFO:Calculating mean and std
2023-08-11 13:19:45,014:INFO:Creating metrics dataframe
2023-08-11 13:19:45,103:INFO:Uploading results into container
2023-08-11 13:19:45,103:INFO:Uploading model into container now
2023-08-11 13:19:45,103:INFO:_master_model_container: 12
2023-08-11 13:19:45,103:INFO:_display_container: 2
2023-08-11 13:19:45,104:INFO:DecisionTreeRegressor(random_state=22)
2023-08-11 13:19:45,104:INFO:create_model() successfully completed......................................
2023-08-11 13:19:45,264:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:45,264:INFO:Creating metrics dataframe
2023-08-11 13:19:45,274:INFO:Initializing Random Forest Regressor
2023-08-11 13:19:45,274:INFO:Total runtime is 0.14740826288859052 minutes
2023-08-11 13:19:45,276:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:45,276:INFO:Initializing create_model()
2023-08-11 13:19:45,276:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=rf, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:45,276:INFO:Checking exceptions
2023-08-11 13:19:45,276:INFO:Importing libraries
2023-08-11 13:19:45,276:INFO:Copying training dataset
2023-08-11 13:19:45,279:INFO:Defining folds
2023-08-11 13:19:45,279:INFO:Declaring metric variables
2023-08-11 13:19:45,281:INFO:Importing untrained model
2023-08-11 13:19:45,283:INFO:Random Forest Regressor Imported successfully
2023-08-11 13:19:45,288:INFO:Starting cross validation
2023-08-11 13:19:45,289:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:46,250:INFO:Calculating mean and std
2023-08-11 13:19:46,252:INFO:Creating metrics dataframe
2023-08-11 13:19:46,341:INFO:Uploading results into container
2023-08-11 13:19:46,341:INFO:Uploading model into container now
2023-08-11 13:19:46,342:INFO:_master_model_container: 13
2023-08-11 13:19:46,342:INFO:_display_container: 2
2023-08-11 13:19:46,342:INFO:RandomForestRegressor(n_jobs=-1, random_state=22)
2023-08-11 13:19:46,342:INFO:create_model() successfully completed......................................
2023-08-11 13:19:46,499:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:46,499:INFO:Creating metrics dataframe
2023-08-11 13:19:46,509:INFO:Initializing Extra Trees Regressor
2023-08-11 13:19:46,509:INFO:Total runtime is 0.1679957151412964 minutes
2023-08-11 13:19:46,511:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:46,511:INFO:Initializing create_model()
2023-08-11 13:19:46,511:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=et, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:46,512:INFO:Checking exceptions
2023-08-11 13:19:46,512:INFO:Importing libraries
2023-08-11 13:19:46,512:INFO:Copying training dataset
2023-08-11 13:19:46,514:INFO:Defining folds
2023-08-11 13:19:46,514:INFO:Declaring metric variables
2023-08-11 13:19:46,516:INFO:Importing untrained model
2023-08-11 13:19:46,518:INFO:Extra Trees Regressor Imported successfully
2023-08-11 13:19:46,522:INFO:Starting cross validation
2023-08-11 13:19:46,523:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:47,354:INFO:Calculating mean and std
2023-08-11 13:19:47,356:INFO:Creating metrics dataframe
2023-08-11 13:19:47,450:INFO:Uploading results into container
2023-08-11 13:19:47,451:INFO:Uploading model into container now
2023-08-11 13:19:47,451:INFO:_master_model_container: 14
2023-08-11 13:19:47,451:INFO:_display_container: 2
2023-08-11 13:19:47,451:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=22)
2023-08-11 13:19:47,451:INFO:create_model() successfully completed......................................
2023-08-11 13:19:47,609:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:47,610:INFO:Creating metrics dataframe
2023-08-11 13:19:47,619:INFO:Initializing AdaBoost Regressor
2023-08-11 13:19:47,620:INFO:Total runtime is 0.18650060097376508 minutes
2023-08-11 13:19:47,622:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:47,622:INFO:Initializing create_model()
2023-08-11 13:19:47,622:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=ada, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:47,622:INFO:Checking exceptions
2023-08-11 13:19:47,622:INFO:Importing libraries
2023-08-11 13:19:47,622:INFO:Copying training dataset
2023-08-11 13:19:47,624:INFO:Defining folds
2023-08-11 13:19:47,624:INFO:Declaring metric variables
2023-08-11 13:19:47,627:INFO:Importing untrained model
2023-08-11 13:19:47,629:INFO:AdaBoost Regressor Imported successfully
2023-08-11 13:19:47,633:INFO:Starting cross validation
2023-08-11 13:19:47,633:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:48,182:INFO:Calculating mean and std
2023-08-11 13:19:48,184:INFO:Creating metrics dataframe
2023-08-11 13:19:48,275:INFO:Uploading results into container
2023-08-11 13:19:48,275:INFO:Uploading model into container now
2023-08-11 13:19:48,275:INFO:_master_model_container: 15
2023-08-11 13:19:48,275:INFO:_display_container: 2
2023-08-11 13:19:48,276:INFO:AdaBoostRegressor(random_state=22)
2023-08-11 13:19:48,276:INFO:create_model() successfully completed......................................
2023-08-11 13:19:48,432:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:48,432:INFO:Creating metrics dataframe
2023-08-11 13:19:48,442:INFO:Initializing Gradient Boosting Regressor
2023-08-11 13:19:48,442:INFO:Total runtime is 0.2002159992853801 minutes
2023-08-11 13:19:48,445:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:48,445:INFO:Initializing create_model()
2023-08-11 13:19:48,445:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=gbr, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:48,445:INFO:Checking exceptions
2023-08-11 13:19:48,445:INFO:Importing libraries
2023-08-11 13:19:48,445:INFO:Copying training dataset
2023-08-11 13:19:48,447:INFO:Defining folds
2023-08-11 13:19:48,447:INFO:Declaring metric variables
2023-08-11 13:19:48,450:INFO:Importing untrained model
2023-08-11 13:19:48,452:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 13:19:48,456:INFO:Starting cross validation
2023-08-11 13:19:48,456:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:49,000:INFO:Calculating mean and std
2023-08-11 13:19:49,002:INFO:Creating metrics dataframe
2023-08-11 13:19:49,093:INFO:Uploading results into container
2023-08-11 13:19:49,093:INFO:Uploading model into container now
2023-08-11 13:19:49,094:INFO:_master_model_container: 16
2023-08-11 13:19:49,094:INFO:_display_container: 2
2023-08-11 13:19:49,094:INFO:GradientBoostingRegressor(random_state=22)
2023-08-11 13:19:49,094:INFO:create_model() successfully completed......................................
2023-08-11 13:19:49,251:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:49,251:INFO:Creating metrics dataframe
2023-08-11 13:19:49,261:INFO:Initializing Extreme Gradient Boosting
2023-08-11 13:19:49,261:INFO:Total runtime is 0.21386545101801557 minutes
2023-08-11 13:19:49,263:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:49,264:INFO:Initializing create_model()
2023-08-11 13:19:49,264:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=xgboost, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:49,264:INFO:Checking exceptions
2023-08-11 13:19:49,264:INFO:Importing libraries
2023-08-11 13:19:49,264:INFO:Copying training dataset
2023-08-11 13:19:49,266:INFO:Defining folds
2023-08-11 13:19:49,266:INFO:Declaring metric variables
2023-08-11 13:19:49,268:INFO:Importing untrained model
2023-08-11 13:19:49,271:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 13:19:49,275:INFO:Starting cross validation
2023-08-11 13:19:49,275:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:49,786:INFO:Calculating mean and std
2023-08-11 13:19:49,788:INFO:Creating metrics dataframe
2023-08-11 13:19:49,879:INFO:Uploading results into container
2023-08-11 13:19:49,879:INFO:Uploading model into container now
2023-08-11 13:19:49,879:INFO:_master_model_container: 17
2023-08-11 13:19:49,879:INFO:_display_container: 2
2023-08-11 13:19:49,880:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=22,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 13:19:49,880:INFO:create_model() successfully completed......................................
2023-08-11 13:19:50,036:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:50,036:INFO:Creating metrics dataframe
2023-08-11 13:19:50,047:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 13:19:50,047:INFO:Total runtime is 0.2269538005193075 minutes
2023-08-11 13:19:50,049:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:50,049:INFO:Initializing create_model()
2023-08-11 13:19:50,049:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:50,049:INFO:Checking exceptions
2023-08-11 13:19:50,049:INFO:Importing libraries
2023-08-11 13:19:50,049:INFO:Copying training dataset
2023-08-11 13:19:50,052:INFO:Defining folds
2023-08-11 13:19:50,052:INFO:Declaring metric variables
2023-08-11 13:19:50,054:INFO:Importing untrained model
2023-08-11 13:19:50,056:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 13:19:50,061:INFO:Starting cross validation
2023-08-11 13:19:50,061:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:50,602:INFO:Calculating mean and std
2023-08-11 13:19:50,603:INFO:Creating metrics dataframe
2023-08-11 13:19:50,695:INFO:Uploading results into container
2023-08-11 13:19:50,695:INFO:Uploading model into container now
2023-08-11 13:19:50,695:INFO:_master_model_container: 18
2023-08-11 13:19:50,695:INFO:_display_container: 2
2023-08-11 13:19:50,696:INFO:LGBMRegressor(random_state=22)
2023-08-11 13:19:50,696:INFO:create_model() successfully completed......................................
2023-08-11 13:19:50,852:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:50,852:INFO:Creating metrics dataframe
2023-08-11 13:19:50,863:INFO:Initializing CatBoost Regressor
2023-08-11 13:19:50,863:INFO:Total runtime is 0.24055759906768803 minutes
2023-08-11 13:19:50,865:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:50,865:INFO:Initializing create_model()
2023-08-11 13:19:50,865:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=catboost, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:50,865:INFO:Checking exceptions
2023-08-11 13:19:50,865:INFO:Importing libraries
2023-08-11 13:19:50,865:INFO:Copying training dataset
2023-08-11 13:19:50,868:INFO:Defining folds
2023-08-11 13:19:50,868:INFO:Declaring metric variables
2023-08-11 13:19:50,870:INFO:Importing untrained model
2023-08-11 13:19:50,872:INFO:CatBoost Regressor Imported successfully
2023-08-11 13:19:50,876:INFO:Starting cross validation
2023-08-11 13:19:50,877:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:52,434:INFO:Calculating mean and std
2023-08-11 13:19:52,435:INFO:Creating metrics dataframe
2023-08-11 13:19:52,530:INFO:Uploading results into container
2023-08-11 13:19:52,530:INFO:Uploading model into container now
2023-08-11 13:19:52,530:INFO:_master_model_container: 19
2023-08-11 13:19:52,530:INFO:_display_container: 2
2023-08-11 13:19:52,530:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d43b27ed0>
2023-08-11 13:19:52,530:INFO:create_model() successfully completed......................................
2023-08-11 13:19:52,688:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:52,688:INFO:Creating metrics dataframe
2023-08-11 13:19:52,698:INFO:Initializing Dummy Regressor
2023-08-11 13:19:52,698:INFO:Total runtime is 0.2711483995119731 minutes
2023-08-11 13:19:52,700:INFO:SubProcess create_model() called ==================================
2023-08-11 13:19:52,701:INFO:Initializing create_model()
2023-08-11 13:19:52,701:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=dummy, fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d21621110>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:52,701:INFO:Checking exceptions
2023-08-11 13:19:52,701:INFO:Importing libraries
2023-08-11 13:19:52,701:INFO:Copying training dataset
2023-08-11 13:19:52,703:INFO:Defining folds
2023-08-11 13:19:52,703:INFO:Declaring metric variables
2023-08-11 13:19:52,705:INFO:Importing untrained model
2023-08-11 13:19:52,708:INFO:Dummy Regressor Imported successfully
2023-08-11 13:19:52,712:INFO:Starting cross validation
2023-08-11 13:19:52,712:INFO:Cross validating with KFold(n_splits=10, random_state=22, shuffle=True), n_jobs=-1
2023-08-11 13:19:53,186:INFO:Calculating mean and std
2023-08-11 13:19:53,188:INFO:Creating metrics dataframe
2023-08-11 13:19:53,280:INFO:Uploading results into container
2023-08-11 13:19:53,281:INFO:Uploading model into container now
2023-08-11 13:19:53,281:INFO:_master_model_container: 20
2023-08-11 13:19:53,281:INFO:_display_container: 2
2023-08-11 13:19:53,281:INFO:DummyRegressor()
2023-08-11 13:19:53,281:INFO:create_model() successfully completed......................................
2023-08-11 13:19:53,438:INFO:SubProcess create_model() end ==================================
2023-08-11 13:19:53,438:INFO:Creating metrics dataframe
2023-08-11 13:19:53,455:INFO:Initializing create_model()
2023-08-11 13:19:53,455:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d11f63790>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=22), fold=KFold(n_splits=10, random_state=22, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:19:53,455:INFO:Checking exceptions
2023-08-11 13:19:53,456:INFO:Importing libraries
2023-08-11 13:19:53,456:INFO:Copying training dataset
2023-08-11 13:19:53,458:INFO:Defining folds
2023-08-11 13:19:53,458:INFO:Declaring metric variables
2023-08-11 13:19:53,458:INFO:Importing untrained model
2023-08-11 13:19:53,458:INFO:Declaring custom model
2023-08-11 13:19:53,459:INFO:Extra Trees Regressor Imported successfully
2023-08-11 13:19:53,459:INFO:Cross validation set to False
2023-08-11 13:19:53,459:INFO:Fitting Model
2023-08-11 13:19:53,700:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=22)
2023-08-11 13:19:53,700:INFO:create_model() successfully completed......................................
2023-08-11 13:19:53,889:INFO:_master_model_container: 20
2023-08-11 13:19:53,889:INFO:_display_container: 2
2023-08-11 13:19:53,889:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=22)
2023-08-11 13:19:53,889:INFO:compare_models() successfully completed......................................
2023-08-11 13:20:00,645:INFO:PyCaret RegressionExperiment
2023-08-11 13:20:00,645:INFO:Logging name: reg-default-name
2023-08-11 13:20:00,645:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-11 13:20:00,645:INFO:version 3.0.2
2023-08-11 13:20:00,645:INFO:Initializing setup()
2023-08-11 13:20:00,645:INFO:self.USI: fee0
2023-08-11 13:20:00,645:INFO:self._variable_keys: {'fold_groups_param', 'pipeline', '_ml_usecase', 'log_plots_param', 'seed', 'transform_target_param', 'y_test', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'X_test', 'USI', 'idx', 'X', 'y_train', 'y', 'gpu_n_jobs_param', 'exp_name_log', 'exp_id', 'memory', 'logging_param', '_available_plots', 'n_jobs_param', 'X_train', 'fold_shuffle_param', 'data'}
2023-08-11 13:20:00,645:INFO:Checking environment
2023-08-11 13:20:00,645:INFO:python_version: 3.7.13
2023-08-11 13:20:00,645:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-11 13:20:00,645:INFO:machine: x86_64
2023-08-11 13:20:00,645:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 13:20:00,645:INFO:Memory: svmem(total=17179869184, available=1163935744, percent=93.2, used=1580748800, free=17690624, active=1148010496, inactive=1135697920, wired=432738304)
2023-08-11 13:20:00,645:INFO:Physical Core: 8
2023-08-11 13:20:00,645:INFO:Logical Core: 8
2023-08-11 13:20:00,645:INFO:Checking libraries
2023-08-11 13:20:00,645:INFO:System:
2023-08-11 13:20:00,645:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-11 13:20:00,645:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-11 13:20:00,645:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-11 13:20:00,645:INFO:PyCaret required dependencies:
2023-08-11 13:20:00,645:INFO:                 pip: 22.3.1
2023-08-11 13:20:00,645:INFO:          setuptools: 63.4.1
2023-08-11 13:20:00,645:INFO:             pycaret: 3.0.2
2023-08-11 13:20:00,645:INFO:             IPython: 7.33.0
2023-08-11 13:20:00,645:INFO:          ipywidgets: 8.0.2
2023-08-11 13:20:00,645:INFO:                tqdm: 4.64.1
2023-08-11 13:20:00,646:INFO:               numpy: 1.21.5
2023-08-11 13:20:00,646:INFO:              pandas: 1.3.5
2023-08-11 13:20:00,646:INFO:              jinja2: 3.1.2
2023-08-11 13:20:00,646:INFO:               scipy: 1.7.3
2023-08-11 13:20:00,646:INFO:              joblib: 1.2.0
2023-08-11 13:20:00,646:INFO:             sklearn: 1.0.2
2023-08-11 13:20:00,646:INFO:                pyod: 1.0.9
2023-08-11 13:20:00,646:INFO:            imblearn: 0.10.1
2023-08-11 13:20:00,646:INFO:   category_encoders: 2.6.1
2023-08-11 13:20:00,646:INFO:            lightgbm: 3.3.2
2023-08-11 13:20:00,646:INFO:               numba: 0.56.2
2023-08-11 13:20:00,646:INFO:            requests: 2.28.1
2023-08-11 13:20:00,646:INFO:          matplotlib: 3.5.3
2023-08-11 13:20:00,646:INFO:          scikitplot: 0.3.7
2023-08-11 13:20:00,646:INFO:         yellowbrick: 1.5
2023-08-11 13:20:00,646:INFO:              plotly: 5.13.0
2023-08-11 13:20:00,646:INFO:             kaleido: 0.2.1
2023-08-11 13:20:00,646:INFO:         statsmodels: 0.13.2
2023-08-11 13:20:00,646:INFO:              sktime: 0.17.0
2023-08-11 13:20:00,646:INFO:               tbats: 1.1.3
2023-08-11 13:20:00,646:INFO:            pmdarima: 2.0.3
2023-08-11 13:20:00,646:INFO:              psutil: 5.9.2
2023-08-11 13:20:00,646:INFO:PyCaret optional dependencies:
2023-08-11 13:20:00,646:INFO:                shap: Not installed
2023-08-11 13:20:00,646:INFO:           interpret: Not installed
2023-08-11 13:20:00,646:INFO:                umap: 0.5.3
2023-08-11 13:20:00,646:INFO:    pandas_profiling: 3.0.0
2023-08-11 13:20:00,646:INFO:  explainerdashboard: Not installed
2023-08-11 13:20:00,646:INFO:             autoviz: Not installed
2023-08-11 13:20:00,646:INFO:           fairlearn: Not installed
2023-08-11 13:20:00,646:INFO:             xgboost: 1.6.2
2023-08-11 13:20:00,646:INFO:            catboost: 1.0.4
2023-08-11 13:20:00,646:INFO:              kmodes: 0.12.2
2023-08-11 13:20:00,646:INFO:             mlxtend: 0.19.0
2023-08-11 13:20:00,646:INFO:       statsforecast: Not installed
2023-08-11 13:20:00,646:INFO:        tune_sklearn: Not installed
2023-08-11 13:20:00,646:INFO:                 ray: Not installed
2023-08-11 13:20:00,646:INFO:            hyperopt: Not installed
2023-08-11 13:20:00,646:INFO:              optuna: Not installed
2023-08-11 13:20:00,646:INFO:               skopt: Not installed
2023-08-11 13:20:00,646:INFO:              mlflow: 1.29.0
2023-08-11 13:20:00,646:INFO:              gradio: Not installed
2023-08-11 13:20:00,646:INFO:             fastapi: Not installed
2023-08-11 13:20:00,646:INFO:             uvicorn: Not installed
2023-08-11 13:20:00,646:INFO:              m2cgen: Not installed
2023-08-11 13:20:00,647:INFO:           evidently: Not installed
2023-08-11 13:20:00,647:INFO:               fugue: Not installed
2023-08-11 13:20:00,647:INFO:           streamlit: 1.13.0
2023-08-11 13:20:00,647:INFO:             prophet: Not installed
2023-08-11 13:20:00,647:INFO:None
2023-08-11 13:20:00,647:INFO:Set up data.
2023-08-11 13:20:00,649:INFO:Set up train/test split.
2023-08-11 13:20:00,651:INFO:Set up index.
2023-08-11 13:20:00,651:INFO:Set up folding strategy.
2023-08-11 13:20:00,651:INFO:Assigning column types.
2023-08-11 13:20:00,653:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-11 13:20:00,653:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 13:20:00,657:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:20:00,661:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:20:00,707:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:20:00,744:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:20:00,744:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:20:00,746:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:20:00,747:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-11 13:20:00,750:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:20:00,754:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:20:00,800:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:20:00,837:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:20:00,837:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:20:00,839:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:20:00,840:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-11 13:20:00,844:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:20:00,847:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:20:00,893:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:20:00,930:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:20:00,930:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:20:00,932:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:20:00,937:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-11 13:20:00,940:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:20:00,986:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:20:01,022:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:20:01,023:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:20:01,025:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:20:01,025:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-11 13:20:01,032:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:20:01,078:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:20:01,115:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:20:01,115:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:20:01,117:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:20:01,125:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-11 13:20:01,171:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:20:01,207:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:20:01,207:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:20:01,210:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:20:01,210:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-11 13:20:01,263:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:20:01,299:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:20:01,300:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:20:01,302:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:20:01,356:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:20:01,392:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-11 13:20:01,392:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:20:01,394:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:20:01,395:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-11 13:20:01,447:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:20:01,484:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:20:01,486:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:20:01,539:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-11 13:20:01,576:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:20:01,578:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:20:01,578:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-11 13:20:01,672:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:20:01,674:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:20:01,764:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:20:01,766:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:20:01,767:INFO:Preparing preprocessing pipeline...
2023-08-11 13:20:01,767:INFO:Set up simple imputation.
2023-08-11 13:20:01,777:INFO:Finished creating preprocessing pipeline.
2023-08-11 13:20:01,779:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ABC', 'nAcid', 'AATS0i', 'ATSC4c',
                                             'PEOE_VSA13', 'EState_VSA6'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-11 13:20:01,779:INFO:Creating final display dataframe.
2023-08-11 13:20:01,820:INFO:Setup _display_container:                     Description             Value
0                    Session id               432
1                        Target               pKi
2                   Target type        Regression
3           Original data shape          (316, 7)
4        Transformed data shape          (316, 7)
5   Transformed train set shape          (221, 7)
6    Transformed test set shape           (95, 7)
7              Numeric features                 6
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              fee0
2023-08-11 13:20:01,916:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:20:01,918:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:20:02,008:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-11 13:20:02,010:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-11 13:20:02,011:INFO:setup() successfully completed in 1.45s...............
2023-08-11 13:20:07,176:INFO:Initializing compare_models()
2023-08-11 13:20:07,176:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-11 13:20:07,177:INFO:Checking exceptions
2023-08-11 13:20:07,181:INFO:Preparing display monitor
2023-08-11 13:20:07,237:INFO:Initializing Linear Regression
2023-08-11 13:20:07,237:INFO:Total runtime is 3.3934911092122394e-06 minutes
2023-08-11 13:20:07,241:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:07,241:INFO:Initializing create_model()
2023-08-11 13:20:07,241:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=lr, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:07,241:INFO:Checking exceptions
2023-08-11 13:20:07,241:INFO:Importing libraries
2023-08-11 13:20:07,241:INFO:Copying training dataset
2023-08-11 13:20:07,244:INFO:Defining folds
2023-08-11 13:20:07,244:INFO:Declaring metric variables
2023-08-11 13:20:07,247:INFO:Importing untrained model
2023-08-11 13:20:07,250:INFO:Linear Regression Imported successfully
2023-08-11 13:20:07,256:INFO:Starting cross validation
2023-08-11 13:20:07,257:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:07,735:INFO:Calculating mean and std
2023-08-11 13:20:07,736:INFO:Creating metrics dataframe
2023-08-11 13:20:07,827:INFO:Uploading results into container
2023-08-11 13:20:07,828:INFO:Uploading model into container now
2023-08-11 13:20:07,828:INFO:_master_model_container: 1
2023-08-11 13:20:07,828:INFO:_display_container: 2
2023-08-11 13:20:07,828:INFO:LinearRegression(n_jobs=-1)
2023-08-11 13:20:07,828:INFO:create_model() successfully completed......................................
2023-08-11 13:20:07,989:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:07,989:INFO:Creating metrics dataframe
2023-08-11 13:20:07,997:INFO:Initializing Lasso Regression
2023-08-11 13:20:07,997:INFO:Total runtime is 0.012661580244700113 minutes
2023-08-11 13:20:07,999:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:07,999:INFO:Initializing create_model()
2023-08-11 13:20:07,999:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=lasso, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:07,999:INFO:Checking exceptions
2023-08-11 13:20:07,999:INFO:Importing libraries
2023-08-11 13:20:07,999:INFO:Copying training dataset
2023-08-11 13:20:08,001:INFO:Defining folds
2023-08-11 13:20:08,001:INFO:Declaring metric variables
2023-08-11 13:20:08,003:INFO:Importing untrained model
2023-08-11 13:20:08,005:INFO:Lasso Regression Imported successfully
2023-08-11 13:20:08,009:INFO:Starting cross validation
2023-08-11 13:20:08,009:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:08,497:INFO:Calculating mean and std
2023-08-11 13:20:08,499:INFO:Creating metrics dataframe
2023-08-11 13:20:08,593:INFO:Uploading results into container
2023-08-11 13:20:08,593:INFO:Uploading model into container now
2023-08-11 13:20:08,594:INFO:_master_model_container: 2
2023-08-11 13:20:08,594:INFO:_display_container: 2
2023-08-11 13:20:08,594:INFO:Lasso(random_state=432)
2023-08-11 13:20:08,594:INFO:create_model() successfully completed......................................
2023-08-11 13:20:08,754:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:08,754:INFO:Creating metrics dataframe
2023-08-11 13:20:08,762:INFO:Initializing Ridge Regression
2023-08-11 13:20:08,762:INFO:Total runtime is 0.02541596492131551 minutes
2023-08-11 13:20:08,764:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:08,764:INFO:Initializing create_model()
2023-08-11 13:20:08,764:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=ridge, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:08,764:INFO:Checking exceptions
2023-08-11 13:20:08,764:INFO:Importing libraries
2023-08-11 13:20:08,764:INFO:Copying training dataset
2023-08-11 13:20:08,767:INFO:Defining folds
2023-08-11 13:20:08,767:INFO:Declaring metric variables
2023-08-11 13:20:08,769:INFO:Importing untrained model
2023-08-11 13:20:08,771:INFO:Ridge Regression Imported successfully
2023-08-11 13:20:08,775:INFO:Starting cross validation
2023-08-11 13:20:08,776:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:09,275:INFO:Calculating mean and std
2023-08-11 13:20:09,276:INFO:Creating metrics dataframe
2023-08-11 13:20:09,369:INFO:Uploading results into container
2023-08-11 13:20:09,370:INFO:Uploading model into container now
2023-08-11 13:20:09,370:INFO:_master_model_container: 3
2023-08-11 13:20:09,370:INFO:_display_container: 2
2023-08-11 13:20:09,370:INFO:Ridge(random_state=432)
2023-08-11 13:20:09,370:INFO:create_model() successfully completed......................................
2023-08-11 13:20:09,527:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:09,527:INFO:Creating metrics dataframe
2023-08-11 13:20:09,536:INFO:Initializing Elastic Net
2023-08-11 13:20:09,536:INFO:Total runtime is 0.03831281264623006 minutes
2023-08-11 13:20:09,538:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:09,538:INFO:Initializing create_model()
2023-08-11 13:20:09,538:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=en, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:09,538:INFO:Checking exceptions
2023-08-11 13:20:09,538:INFO:Importing libraries
2023-08-11 13:20:09,538:INFO:Copying training dataset
2023-08-11 13:20:09,541:INFO:Defining folds
2023-08-11 13:20:09,541:INFO:Declaring metric variables
2023-08-11 13:20:09,544:INFO:Importing untrained model
2023-08-11 13:20:09,546:INFO:Elastic Net Imported successfully
2023-08-11 13:20:09,550:INFO:Starting cross validation
2023-08-11 13:20:09,550:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:10,036:INFO:Calculating mean and std
2023-08-11 13:20:10,037:INFO:Creating metrics dataframe
2023-08-11 13:20:10,131:INFO:Uploading results into container
2023-08-11 13:20:10,131:INFO:Uploading model into container now
2023-08-11 13:20:10,131:INFO:_master_model_container: 4
2023-08-11 13:20:10,131:INFO:_display_container: 2
2023-08-11 13:20:10,132:INFO:ElasticNet(random_state=432)
2023-08-11 13:20:10,132:INFO:create_model() successfully completed......................................
2023-08-11 13:20:10,288:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:10,289:INFO:Creating metrics dataframe
2023-08-11 13:20:10,297:INFO:Initializing Least Angle Regression
2023-08-11 13:20:10,297:INFO:Total runtime is 0.05099859635035196 minutes
2023-08-11 13:20:10,299:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:10,299:INFO:Initializing create_model()
2023-08-11 13:20:10,299:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=lar, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:10,299:INFO:Checking exceptions
2023-08-11 13:20:10,299:INFO:Importing libraries
2023-08-11 13:20:10,299:INFO:Copying training dataset
2023-08-11 13:20:10,302:INFO:Defining folds
2023-08-11 13:20:10,302:INFO:Declaring metric variables
2023-08-11 13:20:10,304:INFO:Importing untrained model
2023-08-11 13:20:10,306:INFO:Least Angle Regression Imported successfully
2023-08-11 13:20:10,311:INFO:Starting cross validation
2023-08-11 13:20:10,311:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:10,342:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:10,347:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:10,363:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:10,368:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:10,380:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:10,381:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:10,384:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:10,408:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:10,441:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:10,465:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:10,803:INFO:Calculating mean and std
2023-08-11 13:20:10,805:INFO:Creating metrics dataframe
2023-08-11 13:20:10,898:INFO:Uploading results into container
2023-08-11 13:20:10,898:INFO:Uploading model into container now
2023-08-11 13:20:10,898:INFO:_master_model_container: 5
2023-08-11 13:20:10,899:INFO:_display_container: 2
2023-08-11 13:20:10,899:INFO:Lars(random_state=432)
2023-08-11 13:20:10,899:INFO:create_model() successfully completed......................................
2023-08-11 13:20:11,055:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:11,055:INFO:Creating metrics dataframe
2023-08-11 13:20:11,064:INFO:Initializing Lasso Least Angle Regression
2023-08-11 13:20:11,064:INFO:Total runtime is 0.06378011306126911 minutes
2023-08-11 13:20:11,066:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:11,066:INFO:Initializing create_model()
2023-08-11 13:20:11,066:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=llar, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:11,066:INFO:Checking exceptions
2023-08-11 13:20:11,066:INFO:Importing libraries
2023-08-11 13:20:11,066:INFO:Copying training dataset
2023-08-11 13:20:11,069:INFO:Defining folds
2023-08-11 13:20:11,069:INFO:Declaring metric variables
2023-08-11 13:20:11,071:INFO:Importing untrained model
2023-08-11 13:20:11,073:INFO:Lasso Least Angle Regression Imported successfully
2023-08-11 13:20:11,077:INFO:Starting cross validation
2023-08-11 13:20:11,078:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:11,110:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:20:11,113:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:20:11,121:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:20:11,125:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:20:11,141:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:20:11,144:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:20:11,168:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:20:11,192:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:20:11,213:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:20:11,228:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-11 13:20:11,562:INFO:Calculating mean and std
2023-08-11 13:20:11,563:INFO:Creating metrics dataframe
2023-08-11 13:20:11,656:INFO:Uploading results into container
2023-08-11 13:20:11,657:INFO:Uploading model into container now
2023-08-11 13:20:11,657:INFO:_master_model_container: 6
2023-08-11 13:20:11,657:INFO:_display_container: 2
2023-08-11 13:20:11,657:INFO:LassoLars(random_state=432)
2023-08-11 13:20:11,657:INFO:create_model() successfully completed......................................
2023-08-11 13:20:11,814:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:11,814:INFO:Creating metrics dataframe
2023-08-11 13:20:11,823:INFO:Initializing Orthogonal Matching Pursuit
2023-08-11 13:20:11,823:INFO:Total runtime is 0.07643082936604817 minutes
2023-08-11 13:20:11,825:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:11,825:INFO:Initializing create_model()
2023-08-11 13:20:11,825:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=omp, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:11,825:INFO:Checking exceptions
2023-08-11 13:20:11,825:INFO:Importing libraries
2023-08-11 13:20:11,825:INFO:Copying training dataset
2023-08-11 13:20:11,828:INFO:Defining folds
2023-08-11 13:20:11,828:INFO:Declaring metric variables
2023-08-11 13:20:11,830:INFO:Importing untrained model
2023-08-11 13:20:11,832:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-11 13:20:11,836:INFO:Starting cross validation
2023-08-11 13:20:11,837:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:11,869:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:11,873:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:11,877:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:11,889:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:11,891:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:11,899:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:11,917:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:11,922:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:11,990:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:12,007:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-11 13:20:12,329:INFO:Calculating mean and std
2023-08-11 13:20:12,330:INFO:Creating metrics dataframe
2023-08-11 13:20:12,423:INFO:Uploading results into container
2023-08-11 13:20:12,424:INFO:Uploading model into container now
2023-08-11 13:20:12,424:INFO:_master_model_container: 7
2023-08-11 13:20:12,424:INFO:_display_container: 2
2023-08-11 13:20:12,424:INFO:OrthogonalMatchingPursuit()
2023-08-11 13:20:12,425:INFO:create_model() successfully completed......................................
2023-08-11 13:20:12,581:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:12,582:INFO:Creating metrics dataframe
2023-08-11 13:20:12,590:INFO:Initializing Bayesian Ridge
2023-08-11 13:20:12,590:INFO:Total runtime is 0.0892218788464864 minutes
2023-08-11 13:20:12,593:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:12,593:INFO:Initializing create_model()
2023-08-11 13:20:12,593:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=br, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:12,593:INFO:Checking exceptions
2023-08-11 13:20:12,593:INFO:Importing libraries
2023-08-11 13:20:12,593:INFO:Copying training dataset
2023-08-11 13:20:12,595:INFO:Defining folds
2023-08-11 13:20:12,596:INFO:Declaring metric variables
2023-08-11 13:20:12,598:INFO:Importing untrained model
2023-08-11 13:20:12,600:INFO:Bayesian Ridge Imported successfully
2023-08-11 13:20:12,604:INFO:Starting cross validation
2023-08-11 13:20:12,604:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:13,090:INFO:Calculating mean and std
2023-08-11 13:20:13,091:INFO:Creating metrics dataframe
2023-08-11 13:20:13,186:INFO:Uploading results into container
2023-08-11 13:20:13,186:INFO:Uploading model into container now
2023-08-11 13:20:13,186:INFO:_master_model_container: 8
2023-08-11 13:20:13,186:INFO:_display_container: 2
2023-08-11 13:20:13,186:INFO:BayesianRidge()
2023-08-11 13:20:13,186:INFO:create_model() successfully completed......................................
2023-08-11 13:20:13,343:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:13,344:INFO:Creating metrics dataframe
2023-08-11 13:20:13,352:INFO:Initializing Passive Aggressive Regressor
2023-08-11 13:20:13,353:INFO:Total runtime is 0.10192456245422363 minutes
2023-08-11 13:20:13,355:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:13,355:INFO:Initializing create_model()
2023-08-11 13:20:13,355:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=par, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:13,355:INFO:Checking exceptions
2023-08-11 13:20:13,355:INFO:Importing libraries
2023-08-11 13:20:13,355:INFO:Copying training dataset
2023-08-11 13:20:13,357:INFO:Defining folds
2023-08-11 13:20:13,357:INFO:Declaring metric variables
2023-08-11 13:20:13,360:INFO:Importing untrained model
2023-08-11 13:20:13,362:INFO:Passive Aggressive Regressor Imported successfully
2023-08-11 13:20:13,366:INFO:Starting cross validation
2023-08-11 13:20:13,367:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:13,851:INFO:Calculating mean and std
2023-08-11 13:20:13,852:INFO:Creating metrics dataframe
2023-08-11 13:20:13,945:INFO:Uploading results into container
2023-08-11 13:20:13,946:INFO:Uploading model into container now
2023-08-11 13:20:13,946:INFO:_master_model_container: 9
2023-08-11 13:20:13,946:INFO:_display_container: 2
2023-08-11 13:20:13,946:INFO:PassiveAggressiveRegressor(random_state=432)
2023-08-11 13:20:13,946:INFO:create_model() successfully completed......................................
2023-08-11 13:20:14,103:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:14,103:INFO:Creating metrics dataframe
2023-08-11 13:20:14,112:INFO:Initializing Huber Regressor
2023-08-11 13:20:14,112:INFO:Total runtime is 0.11458737850189209 minutes
2023-08-11 13:20:14,114:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:14,115:INFO:Initializing create_model()
2023-08-11 13:20:14,115:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=huber, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:14,115:INFO:Checking exceptions
2023-08-11 13:20:14,115:INFO:Importing libraries
2023-08-11 13:20:14,115:INFO:Copying training dataset
2023-08-11 13:20:14,117:INFO:Defining folds
2023-08-11 13:20:14,117:INFO:Declaring metric variables
2023-08-11 13:20:14,119:INFO:Importing untrained model
2023-08-11 13:20:14,122:INFO:Huber Regressor Imported successfully
2023-08-11 13:20:14,126:INFO:Starting cross validation
2023-08-11 13:20:14,127:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:14,609:INFO:Calculating mean and std
2023-08-11 13:20:14,610:INFO:Creating metrics dataframe
2023-08-11 13:20:14,703:INFO:Uploading results into container
2023-08-11 13:20:14,704:INFO:Uploading model into container now
2023-08-11 13:20:14,704:INFO:_master_model_container: 10
2023-08-11 13:20:14,704:INFO:_display_container: 2
2023-08-11 13:20:14,704:INFO:HuberRegressor()
2023-08-11 13:20:14,704:INFO:create_model() successfully completed......................................
2023-08-11 13:20:14,861:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:14,861:INFO:Creating metrics dataframe
2023-08-11 13:20:14,870:INFO:Initializing K Neighbors Regressor
2023-08-11 13:20:14,870:INFO:Total runtime is 0.12722201347351075 minutes
2023-08-11 13:20:14,872:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:14,873:INFO:Initializing create_model()
2023-08-11 13:20:14,873:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=knn, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:14,873:INFO:Checking exceptions
2023-08-11 13:20:14,873:INFO:Importing libraries
2023-08-11 13:20:14,873:INFO:Copying training dataset
2023-08-11 13:20:14,875:INFO:Defining folds
2023-08-11 13:20:14,876:INFO:Declaring metric variables
2023-08-11 13:20:14,878:INFO:Importing untrained model
2023-08-11 13:20:14,880:INFO:K Neighbors Regressor Imported successfully
2023-08-11 13:20:14,884:INFO:Starting cross validation
2023-08-11 13:20:14,885:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:15,442:INFO:Calculating mean and std
2023-08-11 13:20:15,443:INFO:Creating metrics dataframe
2023-08-11 13:20:15,537:INFO:Uploading results into container
2023-08-11 13:20:15,538:INFO:Uploading model into container now
2023-08-11 13:20:15,538:INFO:_master_model_container: 11
2023-08-11 13:20:15,538:INFO:_display_container: 2
2023-08-11 13:20:15,538:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-11 13:20:15,538:INFO:create_model() successfully completed......................................
2023-08-11 13:20:15,695:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:15,695:INFO:Creating metrics dataframe
2023-08-11 13:20:15,704:INFO:Initializing Decision Tree Regressor
2023-08-11 13:20:15,704:INFO:Total runtime is 0.14112386306126914 minutes
2023-08-11 13:20:15,707:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:15,707:INFO:Initializing create_model()
2023-08-11 13:20:15,707:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=dt, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:15,707:INFO:Checking exceptions
2023-08-11 13:20:15,707:INFO:Importing libraries
2023-08-11 13:20:15,707:INFO:Copying training dataset
2023-08-11 13:20:15,709:INFO:Defining folds
2023-08-11 13:20:15,709:INFO:Declaring metric variables
2023-08-11 13:20:15,711:INFO:Importing untrained model
2023-08-11 13:20:15,714:INFO:Decision Tree Regressor Imported successfully
2023-08-11 13:20:15,718:INFO:Starting cross validation
2023-08-11 13:20:15,719:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:16,191:INFO:Calculating mean and std
2023-08-11 13:20:16,193:INFO:Creating metrics dataframe
2023-08-11 13:20:16,286:INFO:Uploading results into container
2023-08-11 13:20:16,286:INFO:Uploading model into container now
2023-08-11 13:20:16,286:INFO:_master_model_container: 12
2023-08-11 13:20:16,286:INFO:_display_container: 2
2023-08-11 13:20:16,286:INFO:DecisionTreeRegressor(random_state=432)
2023-08-11 13:20:16,286:INFO:create_model() successfully completed......................................
2023-08-11 13:20:16,443:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:16,443:INFO:Creating metrics dataframe
2023-08-11 13:20:16,453:INFO:Initializing Random Forest Regressor
2023-08-11 13:20:16,453:INFO:Total runtime is 0.15360026359558107 minutes
2023-08-11 13:20:16,455:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:16,455:INFO:Initializing create_model()
2023-08-11 13:20:16,455:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=rf, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:16,455:INFO:Checking exceptions
2023-08-11 13:20:16,455:INFO:Importing libraries
2023-08-11 13:20:16,455:INFO:Copying training dataset
2023-08-11 13:20:16,458:INFO:Defining folds
2023-08-11 13:20:16,458:INFO:Declaring metric variables
2023-08-11 13:20:16,460:INFO:Importing untrained model
2023-08-11 13:20:16,462:INFO:Random Forest Regressor Imported successfully
2023-08-11 13:20:16,466:INFO:Starting cross validation
2023-08-11 13:20:16,467:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:17,514:INFO:Calculating mean and std
2023-08-11 13:20:17,515:INFO:Creating metrics dataframe
2023-08-11 13:20:17,613:INFO:Uploading results into container
2023-08-11 13:20:17,613:INFO:Uploading model into container now
2023-08-11 13:20:17,613:INFO:_master_model_container: 13
2023-08-11 13:20:17,613:INFO:_display_container: 2
2023-08-11 13:20:17,613:INFO:RandomForestRegressor(n_jobs=-1, random_state=432)
2023-08-11 13:20:17,614:INFO:create_model() successfully completed......................................
2023-08-11 13:20:17,771:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:17,771:INFO:Creating metrics dataframe
2023-08-11 13:20:17,781:INFO:Initializing Extra Trees Regressor
2023-08-11 13:20:17,781:INFO:Total runtime is 0.17573646306991578 minutes
2023-08-11 13:20:17,783:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:17,784:INFO:Initializing create_model()
2023-08-11 13:20:17,784:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=et, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:17,784:INFO:Checking exceptions
2023-08-11 13:20:17,784:INFO:Importing libraries
2023-08-11 13:20:17,784:INFO:Copying training dataset
2023-08-11 13:20:17,786:INFO:Defining folds
2023-08-11 13:20:17,786:INFO:Declaring metric variables
2023-08-11 13:20:17,788:INFO:Importing untrained model
2023-08-11 13:20:17,790:INFO:Extra Trees Regressor Imported successfully
2023-08-11 13:20:17,794:INFO:Starting cross validation
2023-08-11 13:20:17,795:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:18,660:INFO:Calculating mean and std
2023-08-11 13:20:18,661:INFO:Creating metrics dataframe
2023-08-11 13:20:18,759:INFO:Uploading results into container
2023-08-11 13:20:18,760:INFO:Uploading model into container now
2023-08-11 13:20:18,760:INFO:_master_model_container: 14
2023-08-11 13:20:18,760:INFO:_display_container: 2
2023-08-11 13:20:18,760:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=432)
2023-08-11 13:20:18,760:INFO:create_model() successfully completed......................................
2023-08-11 13:20:18,917:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:18,917:INFO:Creating metrics dataframe
2023-08-11 13:20:18,927:INFO:Initializing AdaBoost Regressor
2023-08-11 13:20:18,927:INFO:Total runtime is 0.19483509461085002 minutes
2023-08-11 13:20:18,929:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:18,929:INFO:Initializing create_model()
2023-08-11 13:20:18,929:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=ada, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:18,929:INFO:Checking exceptions
2023-08-11 13:20:18,929:INFO:Importing libraries
2023-08-11 13:20:18,929:INFO:Copying training dataset
2023-08-11 13:20:18,932:INFO:Defining folds
2023-08-11 13:20:18,932:INFO:Declaring metric variables
2023-08-11 13:20:18,934:INFO:Importing untrained model
2023-08-11 13:20:18,936:INFO:AdaBoost Regressor Imported successfully
2023-08-11 13:20:18,941:INFO:Starting cross validation
2023-08-11 13:20:18,941:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:19,506:INFO:Calculating mean and std
2023-08-11 13:20:19,507:INFO:Creating metrics dataframe
2023-08-11 13:20:19,604:INFO:Uploading results into container
2023-08-11 13:20:19,605:INFO:Uploading model into container now
2023-08-11 13:20:19,605:INFO:_master_model_container: 15
2023-08-11 13:20:19,605:INFO:_display_container: 2
2023-08-11 13:20:19,605:INFO:AdaBoostRegressor(random_state=432)
2023-08-11 13:20:19,605:INFO:create_model() successfully completed......................................
2023-08-11 13:20:19,762:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:19,762:INFO:Creating metrics dataframe
2023-08-11 13:20:19,773:INFO:Initializing Gradient Boosting Regressor
2023-08-11 13:20:19,773:INFO:Total runtime is 0.20892537832260133 minutes
2023-08-11 13:20:19,775:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:19,775:INFO:Initializing create_model()
2023-08-11 13:20:19,775:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=gbr, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:19,775:INFO:Checking exceptions
2023-08-11 13:20:19,775:INFO:Importing libraries
2023-08-11 13:20:19,775:INFO:Copying training dataset
2023-08-11 13:20:19,778:INFO:Defining folds
2023-08-11 13:20:19,778:INFO:Declaring metric variables
2023-08-11 13:20:19,780:INFO:Importing untrained model
2023-08-11 13:20:19,782:INFO:Gradient Boosting Regressor Imported successfully
2023-08-11 13:20:19,786:INFO:Starting cross validation
2023-08-11 13:20:19,786:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:20,349:INFO:Calculating mean and std
2023-08-11 13:20:20,351:INFO:Creating metrics dataframe
2023-08-11 13:20:20,448:INFO:Uploading results into container
2023-08-11 13:20:20,449:INFO:Uploading model into container now
2023-08-11 13:20:20,449:INFO:_master_model_container: 16
2023-08-11 13:20:20,449:INFO:_display_container: 2
2023-08-11 13:20:20,449:INFO:GradientBoostingRegressor(random_state=432)
2023-08-11 13:20:20,449:INFO:create_model() successfully completed......................................
2023-08-11 13:20:20,606:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:20,607:INFO:Creating metrics dataframe
2023-08-11 13:20:20,617:INFO:Initializing Extreme Gradient Boosting
2023-08-11 13:20:20,617:INFO:Total runtime is 0.2229975461959839 minutes
2023-08-11 13:20:20,619:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:20,619:INFO:Initializing create_model()
2023-08-11 13:20:20,619:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=xgboost, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:20,619:INFO:Checking exceptions
2023-08-11 13:20:20,619:INFO:Importing libraries
2023-08-11 13:20:20,619:INFO:Copying training dataset
2023-08-11 13:20:20,622:INFO:Defining folds
2023-08-11 13:20:20,622:INFO:Declaring metric variables
2023-08-11 13:20:20,624:INFO:Importing untrained model
2023-08-11 13:20:20,626:INFO:Extreme Gradient Boosting Imported successfully
2023-08-11 13:20:20,631:INFO:Starting cross validation
2023-08-11 13:20:20,631:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:21,166:INFO:Calculating mean and std
2023-08-11 13:20:21,167:INFO:Creating metrics dataframe
2023-08-11 13:20:21,264:INFO:Uploading results into container
2023-08-11 13:20:21,264:INFO:Uploading model into container now
2023-08-11 13:20:21,264:INFO:_master_model_container: 17
2023-08-11 13:20:21,264:INFO:_display_container: 2
2023-08-11 13:20:21,265:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=432,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-11 13:20:21,265:INFO:create_model() successfully completed......................................
2023-08-11 13:20:21,422:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:21,422:INFO:Creating metrics dataframe
2023-08-11 13:20:21,433:INFO:Initializing Light Gradient Boosting Machine
2023-08-11 13:20:21,433:INFO:Total runtime is 0.236597482363383 minutes
2023-08-11 13:20:21,435:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:21,435:INFO:Initializing create_model()
2023-08-11 13:20:21,435:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:21,435:INFO:Checking exceptions
2023-08-11 13:20:21,435:INFO:Importing libraries
2023-08-11 13:20:21,435:INFO:Copying training dataset
2023-08-11 13:20:21,438:INFO:Defining folds
2023-08-11 13:20:21,438:INFO:Declaring metric variables
2023-08-11 13:20:21,440:INFO:Importing untrained model
2023-08-11 13:20:21,442:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-11 13:20:21,446:INFO:Starting cross validation
2023-08-11 13:20:21,447:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:21,972:INFO:Calculating mean and std
2023-08-11 13:20:21,973:INFO:Creating metrics dataframe
2023-08-11 13:20:22,072:INFO:Uploading results into container
2023-08-11 13:20:22,072:INFO:Uploading model into container now
2023-08-11 13:20:22,073:INFO:_master_model_container: 18
2023-08-11 13:20:22,073:INFO:_display_container: 2
2023-08-11 13:20:22,073:INFO:LGBMRegressor(random_state=432)
2023-08-11 13:20:22,073:INFO:create_model() successfully completed......................................
2023-08-11 13:20:22,230:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:22,231:INFO:Creating metrics dataframe
2023-08-11 13:20:22,242:INFO:Initializing CatBoost Regressor
2023-08-11 13:20:22,242:INFO:Total runtime is 0.2500765800476074 minutes
2023-08-11 13:20:22,244:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:22,244:INFO:Initializing create_model()
2023-08-11 13:20:22,244:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=catboost, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:22,244:INFO:Checking exceptions
2023-08-11 13:20:22,244:INFO:Importing libraries
2023-08-11 13:20:22,244:INFO:Copying training dataset
2023-08-11 13:20:22,247:INFO:Defining folds
2023-08-11 13:20:22,247:INFO:Declaring metric variables
2023-08-11 13:20:22,249:INFO:Importing untrained model
2023-08-11 13:20:22,252:INFO:CatBoost Regressor Imported successfully
2023-08-11 13:20:22,256:INFO:Starting cross validation
2023-08-11 13:20:22,256:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:23,840:INFO:Calculating mean and std
2023-08-11 13:20:23,841:INFO:Creating metrics dataframe
2023-08-11 13:20:23,942:INFO:Uploading results into container
2023-08-11 13:20:23,942:INFO:Uploading model into container now
2023-08-11 13:20:23,943:INFO:_master_model_container: 19
2023-08-11 13:20:23,943:INFO:_display_container: 2
2023-08-11 13:20:23,943:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d219483d0>
2023-08-11 13:20:23,943:INFO:create_model() successfully completed......................................
2023-08-11 13:20:24,100:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:24,100:INFO:Creating metrics dataframe
2023-08-11 13:20:24,112:INFO:Initializing Dummy Regressor
2023-08-11 13:20:24,112:INFO:Total runtime is 0.28124872843424475 minutes
2023-08-11 13:20:24,114:INFO:SubProcess create_model() called ==================================
2023-08-11 13:20:24,114:INFO:Initializing create_model()
2023-08-11 13:20:24,114:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=dummy, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f9d4467af10>, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:24,114:INFO:Checking exceptions
2023-08-11 13:20:24,114:INFO:Importing libraries
2023-08-11 13:20:24,114:INFO:Copying training dataset
2023-08-11 13:20:24,117:INFO:Defining folds
2023-08-11 13:20:24,117:INFO:Declaring metric variables
2023-08-11 13:20:24,119:INFO:Importing untrained model
2023-08-11 13:20:24,121:INFO:Dummy Regressor Imported successfully
2023-08-11 13:20:24,125:INFO:Starting cross validation
2023-08-11 13:20:24,126:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-11 13:20:24,631:INFO:Calculating mean and std
2023-08-11 13:20:24,632:INFO:Creating metrics dataframe
2023-08-11 13:20:24,730:INFO:Uploading results into container
2023-08-11 13:20:24,731:INFO:Uploading model into container now
2023-08-11 13:20:24,731:INFO:_master_model_container: 20
2023-08-11 13:20:24,731:INFO:_display_container: 2
2023-08-11 13:20:24,731:INFO:DummyRegressor()
2023-08-11 13:20:24,731:INFO:create_model() successfully completed......................................
2023-08-11 13:20:24,889:INFO:SubProcess create_model() end ==================================
2023-08-11 13:20:24,889:INFO:Creating metrics dataframe
2023-08-11 13:20:24,906:INFO:Initializing create_model()
2023-08-11 13:20:24,906:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7f9d22ed7f50>, estimator=<catboost.core.CatBoostRegressor object at 0x7f9d219483d0>, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-11 13:20:24,906:INFO:Checking exceptions
2023-08-11 13:20:24,907:INFO:Importing libraries
2023-08-11 13:20:24,907:INFO:Copying training dataset
2023-08-11 13:20:24,908:INFO:Defining folds
2023-08-11 13:20:24,909:INFO:Declaring metric variables
2023-08-11 13:20:24,909:INFO:Importing untrained model
2023-08-11 13:20:24,909:INFO:Declaring custom model
2023-08-11 13:20:24,909:INFO:CatBoost Regressor Imported successfully
2023-08-11 13:20:24,909:INFO:Cross validation set to False
2023-08-11 13:20:24,910:INFO:Fitting Model
2023-08-11 13:20:25,304:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d22eb8c10>
2023-08-11 13:20:25,305:INFO:create_model() successfully completed......................................
2023-08-11 13:20:25,491:INFO:_master_model_container: 20
2023-08-11 13:20:25,491:INFO:_display_container: 2
2023-08-11 13:20:25,491:INFO:<catboost.core.CatBoostRegressor object at 0x7f9d22eb8c10>
2023-08-11 13:20:25,491:INFO:compare_models() successfully completed......................................
2023-08-18 15:18:11,927:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-18 15:18:11,927:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-18 15:18:11,927:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-18 15:18:11,927:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-18 15:18:12,361:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-08-18 15:19:46,350:INFO:PyCaret RegressionExperiment
2023-08-18 15:19:46,350:INFO:Logging name: reg-default-name
2023-08-18 15:19:46,350:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-18 15:19:46,350:INFO:version 3.0.2
2023-08-18 15:19:46,350:INFO:Initializing setup()
2023-08-18 15:19:46,350:INFO:self.USI: 0619
2023-08-18 15:19:46,350:INFO:self._variable_keys: {'pipeline', 'html_param', 'exp_name_log', 'memory', 'X', 'n_jobs_param', 'logging_param', 'y_test', 'y', 'fold_generator', 'data', 'transform_target_param', 'idx', 'fold_groups_param', '_available_plots', 'exp_id', 'X_test', 'USI', '_ml_usecase', 'y_train', 'fold_shuffle_param', 'gpu_n_jobs_param', 'gpu_param', 'log_plots_param', 'seed', 'target_param', 'X_train'}
2023-08-18 15:19:46,350:INFO:Checking environment
2023-08-18 15:19:46,350:INFO:python_version: 3.7.13
2023-08-18 15:19:46,351:INFO:python_build: ('default', 'Mar 28 2022 07:24:34')
2023-08-18 15:19:46,351:INFO:machine: x86_64
2023-08-18 15:19:46,351:INFO:platform: Darwin-22.6.0-x86_64-i386-64bit
2023-08-18 15:19:46,351:INFO:Memory: svmem(total=17179869184, available=2080292864, percent=87.9, used=1414819840, free=713105408, active=976904192, inactive=1281875968, wired=437915648)
2023-08-18 15:19:46,351:INFO:Physical Core: 8
2023-08-18 15:19:46,351:INFO:Logical Core: 8
2023-08-18 15:19:46,351:INFO:Checking libraries
2023-08-18 15:19:46,351:INFO:System:
2023-08-18 15:19:46,351:INFO:    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]
2023-08-18 15:19:46,351:INFO:executable: /Users/adnane/opt/anaconda3/envs/ADN/bin/python
2023-08-18 15:19:46,351:INFO:   machine: Darwin-22.6.0-x86_64-i386-64bit
2023-08-18 15:19:46,351:INFO:PyCaret required dependencies:
2023-08-18 15:19:46,351:INFO:                 pip: 22.3.1
2023-08-18 15:19:46,351:INFO:          setuptools: 63.4.1
2023-08-18 15:19:46,351:INFO:             pycaret: 3.0.2
2023-08-18 15:19:46,351:INFO:             IPython: 7.33.0
2023-08-18 15:19:46,351:INFO:          ipywidgets: 8.0.2
2023-08-18 15:19:46,351:INFO:                tqdm: 4.64.1
2023-08-18 15:19:46,351:INFO:               numpy: 1.21.5
2023-08-18 15:19:46,351:INFO:              pandas: 1.3.5
2023-08-18 15:19:46,351:INFO:              jinja2: 3.1.2
2023-08-18 15:19:46,351:INFO:               scipy: 1.7.3
2023-08-18 15:19:46,351:INFO:              joblib: 1.2.0
2023-08-18 15:19:46,351:INFO:             sklearn: 1.0.2
2023-08-18 15:19:46,351:INFO:                pyod: 1.0.9
2023-08-18 15:19:46,351:INFO:            imblearn: 0.10.1
2023-08-18 15:19:46,351:INFO:   category_encoders: 2.6.1
2023-08-18 15:19:46,351:INFO:            lightgbm: 3.3.2
2023-08-18 15:19:46,351:INFO:               numba: 0.56.2
2023-08-18 15:19:46,351:INFO:            requests: 2.28.1
2023-08-18 15:19:46,351:INFO:          matplotlib: 3.5.3
2023-08-18 15:19:46,351:INFO:          scikitplot: 0.3.7
2023-08-18 15:19:46,351:INFO:         yellowbrick: 1.5
2023-08-18 15:19:46,351:INFO:              plotly: 5.13.0
2023-08-18 15:19:46,351:INFO:             kaleido: 0.2.1
2023-08-18 15:19:46,351:INFO:         statsmodels: 0.13.2
2023-08-18 15:19:46,351:INFO:              sktime: 0.17.0
2023-08-18 15:19:46,351:INFO:               tbats: 1.1.3
2023-08-18 15:19:46,351:INFO:            pmdarima: 2.0.3
2023-08-18 15:19:46,351:INFO:              psutil: 5.9.2
2023-08-18 15:19:46,351:INFO:PyCaret optional dependencies:
2023-08-18 15:19:46,359:INFO:                shap: Not installed
2023-08-18 15:19:46,359:INFO:           interpret: Not installed
2023-08-18 15:19:46,359:INFO:                umap: 0.5.3
2023-08-18 15:19:46,359:INFO:    pandas_profiling: 3.0.0
2023-08-18 15:19:46,359:INFO:  explainerdashboard: Not installed
2023-08-18 15:19:46,359:INFO:             autoviz: Not installed
2023-08-18 15:19:46,359:INFO:           fairlearn: Not installed
2023-08-18 15:19:46,359:INFO:             xgboost: 1.6.2
2023-08-18 15:19:46,359:INFO:            catboost: 1.0.4
2023-08-18 15:19:46,359:INFO:              kmodes: 0.12.2
2023-08-18 15:19:46,359:INFO:             mlxtend: 0.19.0
2023-08-18 15:19:46,359:INFO:       statsforecast: Not installed
2023-08-18 15:19:46,359:INFO:        tune_sklearn: Not installed
2023-08-18 15:19:46,359:INFO:                 ray: Not installed
2023-08-18 15:19:46,359:INFO:            hyperopt: Not installed
2023-08-18 15:19:46,359:INFO:              optuna: Not installed
2023-08-18 15:19:46,359:INFO:               skopt: Not installed
2023-08-18 15:19:46,359:INFO:              mlflow: 1.29.0
2023-08-18 15:19:46,359:INFO:              gradio: Not installed
2023-08-18 15:19:46,359:INFO:             fastapi: Not installed
2023-08-18 15:19:46,359:INFO:             uvicorn: Not installed
2023-08-18 15:19:46,359:INFO:              m2cgen: Not installed
2023-08-18 15:19:46,359:INFO:           evidently: Not installed
2023-08-18 15:19:46,359:INFO:               fugue: Not installed
2023-08-18 15:19:46,359:INFO:           streamlit: 1.13.0
2023-08-18 15:19:46,359:INFO:             prophet: Not installed
2023-08-18 15:19:46,359:INFO:None
2023-08-18 15:19:46,359:INFO:Set up data.
2023-08-18 15:19:46,363:INFO:Set up train/test split.
2023-08-18 15:19:46,365:INFO:Set up index.
2023-08-18 15:19:46,365:INFO:Set up folding strategy.
2023-08-18 15:19:46,365:INFO:Assigning column types.
2023-08-18 15:19:46,367:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-18 15:19:46,367:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,371:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,375:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,421:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,456:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,456:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-18 15:19:46,553:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-18 15:19:46,585:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,588:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,592:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,636:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,671:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,671:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-18 15:19:46,673:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-18 15:19:46,674:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-18 15:19:46,677:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,681:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,724:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,758:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,759:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-18 15:19:46,761:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-18 15:19:46,764:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,768:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,811:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,846:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,847:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-18 15:19:46,849:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-18 15:19:46,849:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-18 15:19:46,856:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,899:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,934:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,934:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-18 15:19:46,936:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-18 15:19:46,943:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-18 15:19:46,987:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-18 15:19:47,021:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-18 15:19:47,021:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-18 15:19:47,023:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-18 15:19:47,024:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-18 15:19:47,073:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-18 15:19:47,108:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-18 15:19:47,108:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-18 15:19:47,110:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-18 15:19:47,160:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-18 15:19:47,196:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-18 15:19:47,197:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-18 15:19:47,199:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-18 15:19:47,199:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-18 15:19:47,251:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-18 15:19:47,286:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-18 15:19:47,288:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-18 15:19:47,340:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-18 15:19:47,374:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-18 15:19:47,376:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-18 15:19:47,377:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-18 15:19:47,462:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-18 15:19:47,464:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-18 15:19:47,550:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-18 15:19:47,552:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-18 15:19:47,556:INFO:Preparing preprocessing pipeline...
2023-08-18 15:19:47,556:INFO:Set up simple imputation.
2023-08-18 15:19:47,568:INFO:Finished creating preprocessing pipeline.
2023-08-18 15:19:47,570:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ABC', 'nAcid', 'ATSC4c',
                                             'EState_VSA6'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-18 15:19:47,570:INFO:Creating final display dataframe.
2023-08-18 15:19:47,608:INFO:Setup _display_container:                     Description             Value
0                    Session id               432
1                        Target               pKi
2                   Target type        Regression
3           Original data shape          (316, 5)
4        Transformed data shape          (316, 5)
5   Transformed train set shape          (221, 5)
6    Transformed test set shape           (95, 5)
7              Numeric features                 4
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              0619
2023-08-18 15:19:47,703:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-18 15:19:47,705:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-18 15:19:47,791:INFO:Soft dependency imported: xgboost: 1.6.2
2023-08-18 15:19:47,793:INFO:Soft dependency imported: catboost: 1.0.4
2023-08-18 15:19:47,793:INFO:setup() successfully completed in 1.53s...............
2023-08-18 15:19:47,797:INFO:Initializing compare_models()
2023-08-18 15:19:47,797:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-18 15:19:47,797:INFO:Checking exceptions
2023-08-18 15:19:47,798:INFO:Preparing display monitor
2023-08-18 15:19:47,823:INFO:Initializing Linear Regression
2023-08-18 15:19:47,823:INFO:Total runtime is 1.7682711283365886e-06 minutes
2023-08-18 15:19:47,827:INFO:SubProcess create_model() called ==================================
2023-08-18 15:19:47,827:INFO:Initializing create_model()
2023-08-18 15:19:47,827:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=lr, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:19:47,827:INFO:Checking exceptions
2023-08-18 15:19:47,828:INFO:Importing libraries
2023-08-18 15:19:47,828:INFO:Copying training dataset
2023-08-18 15:19:47,830:INFO:Defining folds
2023-08-18 15:19:47,830:INFO:Declaring metric variables
2023-08-18 15:19:47,832:INFO:Importing untrained model
2023-08-18 15:19:47,835:INFO:Linear Regression Imported successfully
2023-08-18 15:19:47,840:INFO:Starting cross validation
2023-08-18 15:19:47,844:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:19:51,479:INFO:Calculating mean and std
2023-08-18 15:19:51,481:INFO:Creating metrics dataframe
2023-08-18 15:19:51,563:INFO:Uploading results into container
2023-08-18 15:19:51,564:INFO:Uploading model into container now
2023-08-18 15:19:51,564:INFO:_master_model_container: 1
2023-08-18 15:19:51,564:INFO:_display_container: 2
2023-08-18 15:19:51,564:INFO:LinearRegression(n_jobs=-1)
2023-08-18 15:19:51,564:INFO:create_model() successfully completed......................................
2023-08-18 15:19:51,642:INFO:SubProcess create_model() end ==================================
2023-08-18 15:19:51,642:INFO:Creating metrics dataframe
2023-08-18 15:19:51,649:INFO:Initializing Lasso Regression
2023-08-18 15:19:51,649:INFO:Total runtime is 0.06376768350601197 minutes
2023-08-18 15:19:51,651:INFO:SubProcess create_model() called ==================================
2023-08-18 15:19:51,652:INFO:Initializing create_model()
2023-08-18 15:19:51,652:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=lasso, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:19:51,652:INFO:Checking exceptions
2023-08-18 15:19:51,652:INFO:Importing libraries
2023-08-18 15:19:51,652:INFO:Copying training dataset
2023-08-18 15:19:51,654:INFO:Defining folds
2023-08-18 15:19:51,654:INFO:Declaring metric variables
2023-08-18 15:19:51,656:INFO:Importing untrained model
2023-08-18 15:19:51,659:INFO:Lasso Regression Imported successfully
2023-08-18 15:19:51,663:INFO:Starting cross validation
2023-08-18 15:19:51,663:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:19:52,114:INFO:Calculating mean and std
2023-08-18 15:19:52,115:INFO:Creating metrics dataframe
2023-08-18 15:19:52,195:INFO:Uploading results into container
2023-08-18 15:19:52,196:INFO:Uploading model into container now
2023-08-18 15:19:52,196:INFO:_master_model_container: 2
2023-08-18 15:19:52,196:INFO:_display_container: 2
2023-08-18 15:19:52,196:INFO:Lasso(random_state=432)
2023-08-18 15:19:52,196:INFO:create_model() successfully completed......................................
2023-08-18 15:19:52,248:INFO:SubProcess create_model() end ==================================
2023-08-18 15:19:52,248:INFO:Creating metrics dataframe
2023-08-18 15:19:52,256:INFO:Initializing Ridge Regression
2023-08-18 15:19:52,256:INFO:Total runtime is 0.07388261556625367 minutes
2023-08-18 15:19:52,258:INFO:SubProcess create_model() called ==================================
2023-08-18 15:19:52,258:INFO:Initializing create_model()
2023-08-18 15:19:52,258:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=ridge, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:19:52,258:INFO:Checking exceptions
2023-08-18 15:19:52,258:INFO:Importing libraries
2023-08-18 15:19:52,259:INFO:Copying training dataset
2023-08-18 15:19:52,261:INFO:Defining folds
2023-08-18 15:19:52,261:INFO:Declaring metric variables
2023-08-18 15:19:52,263:INFO:Importing untrained model
2023-08-18 15:19:52,265:INFO:Ridge Regression Imported successfully
2023-08-18 15:19:52,270:INFO:Starting cross validation
2023-08-18 15:19:52,271:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:19:52,726:INFO:Calculating mean and std
2023-08-18 15:19:52,728:INFO:Creating metrics dataframe
2023-08-18 15:19:52,808:INFO:Uploading results into container
2023-08-18 15:19:52,809:INFO:Uploading model into container now
2023-08-18 15:19:52,809:INFO:_master_model_container: 3
2023-08-18 15:19:52,809:INFO:_display_container: 2
2023-08-18 15:19:52,809:INFO:Ridge(random_state=432)
2023-08-18 15:19:52,809:INFO:create_model() successfully completed......................................
2023-08-18 15:19:52,861:INFO:SubProcess create_model() end ==================================
2023-08-18 15:19:52,862:INFO:Creating metrics dataframe
2023-08-18 15:19:52,870:INFO:Initializing Elastic Net
2023-08-18 15:19:52,870:INFO:Total runtime is 0.08410743474960328 minutes
2023-08-18 15:19:52,872:INFO:SubProcess create_model() called ==================================
2023-08-18 15:19:52,872:INFO:Initializing create_model()
2023-08-18 15:19:52,872:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=en, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:19:52,872:INFO:Checking exceptions
2023-08-18 15:19:52,872:INFO:Importing libraries
2023-08-18 15:19:52,872:INFO:Copying training dataset
2023-08-18 15:19:52,874:INFO:Defining folds
2023-08-18 15:19:52,875:INFO:Declaring metric variables
2023-08-18 15:19:52,877:INFO:Importing untrained model
2023-08-18 15:19:52,879:INFO:Elastic Net Imported successfully
2023-08-18 15:19:52,883:INFO:Starting cross validation
2023-08-18 15:19:52,884:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:19:53,325:INFO:Calculating mean and std
2023-08-18 15:19:53,326:INFO:Creating metrics dataframe
2023-08-18 15:19:53,407:INFO:Uploading results into container
2023-08-18 15:19:53,407:INFO:Uploading model into container now
2023-08-18 15:19:53,407:INFO:_master_model_container: 4
2023-08-18 15:19:53,407:INFO:_display_container: 2
2023-08-18 15:19:53,407:INFO:ElasticNet(random_state=432)
2023-08-18 15:19:53,407:INFO:create_model() successfully completed......................................
2023-08-18 15:19:53,459:INFO:SubProcess create_model() end ==================================
2023-08-18 15:19:53,460:INFO:Creating metrics dataframe
2023-08-18 15:19:53,468:INFO:Initializing Least Angle Regression
2023-08-18 15:19:53,468:INFO:Total runtime is 0.09407426516215008 minutes
2023-08-18 15:19:53,470:INFO:SubProcess create_model() called ==================================
2023-08-18 15:19:53,470:INFO:Initializing create_model()
2023-08-18 15:19:53,470:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=lar, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:19:53,470:INFO:Checking exceptions
2023-08-18 15:19:53,470:INFO:Importing libraries
2023-08-18 15:19:53,470:INFO:Copying training dataset
2023-08-18 15:19:53,472:INFO:Defining folds
2023-08-18 15:19:53,472:INFO:Declaring metric variables
2023-08-18 15:19:53,475:INFO:Importing untrained model
2023-08-18 15:19:53,477:INFO:Least Angle Regression Imported successfully
2023-08-18 15:19:53,481:INFO:Starting cross validation
2023-08-18 15:19:53,481:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:19:53,537:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:53,539:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:53,546:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:53,557:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:53,568:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:53,575:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:53,575:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:53,580:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:53,667:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:53,681:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:53,948:INFO:Calculating mean and std
2023-08-18 15:19:53,949:INFO:Creating metrics dataframe
2023-08-18 15:19:54,029:INFO:Uploading results into container
2023-08-18 15:19:54,030:INFO:Uploading model into container now
2023-08-18 15:19:54,030:INFO:_master_model_container: 5
2023-08-18 15:19:54,030:INFO:_display_container: 2
2023-08-18 15:19:54,030:INFO:Lars(random_state=432)
2023-08-18 15:19:54,030:INFO:create_model() successfully completed......................................
2023-08-18 15:19:54,082:INFO:SubProcess create_model() end ==================================
2023-08-18 15:19:54,082:INFO:Creating metrics dataframe
2023-08-18 15:19:54,090:INFO:Initializing Lasso Least Angle Regression
2023-08-18 15:19:54,090:INFO:Total runtime is 0.104452117284139 minutes
2023-08-18 15:19:54,092:INFO:SubProcess create_model() called ==================================
2023-08-18 15:19:54,093:INFO:Initializing create_model()
2023-08-18 15:19:54,093:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=llar, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:19:54,093:INFO:Checking exceptions
2023-08-18 15:19:54,093:INFO:Importing libraries
2023-08-18 15:19:54,093:INFO:Copying training dataset
2023-08-18 15:19:54,095:INFO:Defining folds
2023-08-18 15:19:54,095:INFO:Declaring metric variables
2023-08-18 15:19:54,097:INFO:Importing untrained model
2023-08-18 15:19:54,099:INFO:Lasso Least Angle Regression Imported successfully
2023-08-18 15:19:54,104:INFO:Starting cross validation
2023-08-18 15:19:54,104:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:19:54,136:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-18 15:19:54,142:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-18 15:19:54,143:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-18 15:19:54,156:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-18 15:19:54,159:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-18 15:19:54,169:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-18 15:19:54,193:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-18 15:19:54,195:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-18 15:19:54,260:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-18 15:19:54,261:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  FutureWarning,

2023-08-18 15:19:54,542:INFO:Calculating mean and std
2023-08-18 15:19:54,543:INFO:Creating metrics dataframe
2023-08-18 15:19:54,623:INFO:Uploading results into container
2023-08-18 15:19:54,623:INFO:Uploading model into container now
2023-08-18 15:19:54,624:INFO:_master_model_container: 6
2023-08-18 15:19:54,624:INFO:_display_container: 2
2023-08-18 15:19:54,624:INFO:LassoLars(random_state=432)
2023-08-18 15:19:54,624:INFO:create_model() successfully completed......................................
2023-08-18 15:19:54,676:INFO:SubProcess create_model() end ==================================
2023-08-18 15:19:54,676:INFO:Creating metrics dataframe
2023-08-18 15:19:54,684:INFO:Initializing Orthogonal Matching Pursuit
2023-08-18 15:19:54,684:INFO:Total runtime is 0.1143495519955953 minutes
2023-08-18 15:19:54,686:INFO:SubProcess create_model() called ==================================
2023-08-18 15:19:54,686:INFO:Initializing create_model()
2023-08-18 15:19:54,686:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=omp, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:19:54,686:INFO:Checking exceptions
2023-08-18 15:19:54,686:INFO:Importing libraries
2023-08-18 15:19:54,687:INFO:Copying training dataset
2023-08-18 15:19:54,689:INFO:Defining folds
2023-08-18 15:19:54,689:INFO:Declaring metric variables
2023-08-18 15:19:54,691:INFO:Importing untrained model
2023-08-18 15:19:54,693:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-18 15:19:54,697:INFO:Starting cross validation
2023-08-18 15:19:54,698:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:19:54,728:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:54,735:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:54,739:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:54,748:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:54,765:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:54,771:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:54,798:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:54,799:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:54,853:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:54,854:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/sklearn/linear_model/_base.py:138: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  FutureWarning,

2023-08-18 15:19:55,137:INFO:Calculating mean and std
2023-08-18 15:19:55,138:INFO:Creating metrics dataframe
2023-08-18 15:19:55,219:INFO:Uploading results into container
2023-08-18 15:19:55,219:INFO:Uploading model into container now
2023-08-18 15:19:55,219:INFO:_master_model_container: 7
2023-08-18 15:19:55,219:INFO:_display_container: 2
2023-08-18 15:19:55,219:INFO:OrthogonalMatchingPursuit()
2023-08-18 15:19:55,219:INFO:create_model() successfully completed......................................
2023-08-18 15:19:55,271:INFO:SubProcess create_model() end ==================================
2023-08-18 15:19:55,271:INFO:Creating metrics dataframe
2023-08-18 15:19:55,280:INFO:Initializing Bayesian Ridge
2023-08-18 15:19:55,280:INFO:Total runtime is 0.12427563269933065 minutes
2023-08-18 15:19:55,282:INFO:SubProcess create_model() called ==================================
2023-08-18 15:19:55,282:INFO:Initializing create_model()
2023-08-18 15:19:55,282:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=br, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:19:55,282:INFO:Checking exceptions
2023-08-18 15:19:55,282:INFO:Importing libraries
2023-08-18 15:19:55,282:INFO:Copying training dataset
2023-08-18 15:19:55,284:INFO:Defining folds
2023-08-18 15:19:55,285:INFO:Declaring metric variables
2023-08-18 15:19:55,287:INFO:Importing untrained model
2023-08-18 15:19:55,289:INFO:Bayesian Ridge Imported successfully
2023-08-18 15:19:55,293:INFO:Starting cross validation
2023-08-18 15:19:55,294:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:19:55,747:INFO:Calculating mean and std
2023-08-18 15:19:55,748:INFO:Creating metrics dataframe
2023-08-18 15:19:55,827:INFO:Uploading results into container
2023-08-18 15:19:55,827:INFO:Uploading model into container now
2023-08-18 15:19:55,827:INFO:_master_model_container: 8
2023-08-18 15:19:55,827:INFO:_display_container: 2
2023-08-18 15:19:55,828:INFO:BayesianRidge()
2023-08-18 15:19:55,828:INFO:create_model() successfully completed......................................
2023-08-18 15:19:55,880:INFO:SubProcess create_model() end ==================================
2023-08-18 15:19:55,880:INFO:Creating metrics dataframe
2023-08-18 15:19:55,888:INFO:Initializing Passive Aggressive Regressor
2023-08-18 15:19:55,889:INFO:Total runtime is 0.13442073265711466 minutes
2023-08-18 15:19:55,891:INFO:SubProcess create_model() called ==================================
2023-08-18 15:19:55,891:INFO:Initializing create_model()
2023-08-18 15:19:55,891:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=par, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:19:55,891:INFO:Checking exceptions
2023-08-18 15:19:55,891:INFO:Importing libraries
2023-08-18 15:19:55,891:INFO:Copying training dataset
2023-08-18 15:19:55,893:INFO:Defining folds
2023-08-18 15:19:55,894:INFO:Declaring metric variables
2023-08-18 15:19:55,896:INFO:Importing untrained model
2023-08-18 15:19:55,898:INFO:Passive Aggressive Regressor Imported successfully
2023-08-18 15:19:55,902:INFO:Starting cross validation
2023-08-18 15:19:55,903:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:19:56,363:INFO:Calculating mean and std
2023-08-18 15:19:56,364:INFO:Creating metrics dataframe
2023-08-18 15:19:56,444:INFO:Uploading results into container
2023-08-18 15:19:56,444:INFO:Uploading model into container now
2023-08-18 15:19:56,444:INFO:_master_model_container: 9
2023-08-18 15:19:56,444:INFO:_display_container: 2
2023-08-18 15:19:56,445:INFO:PassiveAggressiveRegressor(random_state=432)
2023-08-18 15:19:56,445:INFO:create_model() successfully completed......................................
2023-08-18 15:19:56,496:INFO:SubProcess create_model() end ==================================
2023-08-18 15:19:56,496:INFO:Creating metrics dataframe
2023-08-18 15:19:56,505:INFO:Initializing Huber Regressor
2023-08-18 15:19:56,505:INFO:Total runtime is 0.1447029670079549 minutes
2023-08-18 15:19:56,507:INFO:SubProcess create_model() called ==================================
2023-08-18 15:19:56,508:INFO:Initializing create_model()
2023-08-18 15:19:56,508:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=huber, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:19:56,508:INFO:Checking exceptions
2023-08-18 15:19:56,508:INFO:Importing libraries
2023-08-18 15:19:56,508:INFO:Copying training dataset
2023-08-18 15:19:56,510:INFO:Defining folds
2023-08-18 15:19:56,510:INFO:Declaring metric variables
2023-08-18 15:19:56,512:INFO:Importing untrained model
2023-08-18 15:19:56,515:INFO:Huber Regressor Imported successfully
2023-08-18 15:19:56,519:INFO:Starting cross validation
2023-08-18 15:19:56,520:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:19:56,971:INFO:Calculating mean and std
2023-08-18 15:19:56,972:INFO:Creating metrics dataframe
2023-08-18 15:19:57,052:INFO:Uploading results into container
2023-08-18 15:19:57,052:INFO:Uploading model into container now
2023-08-18 15:19:57,052:INFO:_master_model_container: 10
2023-08-18 15:19:57,052:INFO:_display_container: 2
2023-08-18 15:19:57,052:INFO:HuberRegressor()
2023-08-18 15:19:57,052:INFO:create_model() successfully completed......................................
2023-08-18 15:19:57,104:INFO:SubProcess create_model() end ==================================
2023-08-18 15:19:57,104:INFO:Creating metrics dataframe
2023-08-18 15:19:57,113:INFO:Initializing K Neighbors Regressor
2023-08-18 15:19:57,113:INFO:Total runtime is 0.15483476718266803 minutes
2023-08-18 15:19:57,115:INFO:SubProcess create_model() called ==================================
2023-08-18 15:19:57,116:INFO:Initializing create_model()
2023-08-18 15:19:57,116:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=knn, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:19:57,116:INFO:Checking exceptions
2023-08-18 15:19:57,116:INFO:Importing libraries
2023-08-18 15:19:57,116:INFO:Copying training dataset
2023-08-18 15:19:57,118:INFO:Defining folds
2023-08-18 15:19:57,118:INFO:Declaring metric variables
2023-08-18 15:19:57,120:INFO:Importing untrained model
2023-08-18 15:19:57,122:INFO:K Neighbors Regressor Imported successfully
2023-08-18 15:19:57,127:INFO:Starting cross validation
2023-08-18 15:19:57,128:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:19:57,661:INFO:Calculating mean and std
2023-08-18 15:19:57,662:INFO:Creating metrics dataframe
2023-08-18 15:19:57,742:INFO:Uploading results into container
2023-08-18 15:19:57,742:INFO:Uploading model into container now
2023-08-18 15:19:57,742:INFO:_master_model_container: 11
2023-08-18 15:19:57,742:INFO:_display_container: 2
2023-08-18 15:19:57,743:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-18 15:19:57,743:INFO:create_model() successfully completed......................................
2023-08-18 15:19:57,795:INFO:SubProcess create_model() end ==================================
2023-08-18 15:19:57,795:INFO:Creating metrics dataframe
2023-08-18 15:19:57,804:INFO:Initializing Decision Tree Regressor
2023-08-18 15:19:57,804:INFO:Total runtime is 0.1663447022438049 minutes
2023-08-18 15:19:57,806:INFO:SubProcess create_model() called ==================================
2023-08-18 15:19:57,806:INFO:Initializing create_model()
2023-08-18 15:19:57,806:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=dt, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:19:57,806:INFO:Checking exceptions
2023-08-18 15:19:57,806:INFO:Importing libraries
2023-08-18 15:19:57,806:INFO:Copying training dataset
2023-08-18 15:19:57,808:INFO:Defining folds
2023-08-18 15:19:57,808:INFO:Declaring metric variables
2023-08-18 15:19:57,810:INFO:Importing untrained model
2023-08-18 15:19:57,813:INFO:Decision Tree Regressor Imported successfully
2023-08-18 15:19:57,817:INFO:Starting cross validation
2023-08-18 15:19:57,818:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:19:58,270:INFO:Calculating mean and std
2023-08-18 15:19:58,272:INFO:Creating metrics dataframe
2023-08-18 15:19:58,352:INFO:Uploading results into container
2023-08-18 15:19:58,353:INFO:Uploading model into container now
2023-08-18 15:19:58,353:INFO:_master_model_container: 12
2023-08-18 15:19:58,353:INFO:_display_container: 2
2023-08-18 15:19:58,353:INFO:DecisionTreeRegressor(random_state=432)
2023-08-18 15:19:58,353:INFO:create_model() successfully completed......................................
2023-08-18 15:19:58,405:INFO:SubProcess create_model() end ==================================
2023-08-18 15:19:58,405:INFO:Creating metrics dataframe
2023-08-18 15:19:58,414:INFO:Initializing Random Forest Regressor
2023-08-18 15:19:58,414:INFO:Total runtime is 0.17651845216751097 minutes
2023-08-18 15:19:58,416:INFO:SubProcess create_model() called ==================================
2023-08-18 15:19:58,417:INFO:Initializing create_model()
2023-08-18 15:19:58,417:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=rf, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:19:58,417:INFO:Checking exceptions
2023-08-18 15:19:58,417:INFO:Importing libraries
2023-08-18 15:19:58,417:INFO:Copying training dataset
2023-08-18 15:19:58,419:INFO:Defining folds
2023-08-18 15:19:58,419:INFO:Declaring metric variables
2023-08-18 15:19:58,421:INFO:Importing untrained model
2023-08-18 15:19:58,424:INFO:Random Forest Regressor Imported successfully
2023-08-18 15:19:58,428:INFO:Starting cross validation
2023-08-18 15:19:58,428:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:19:59,359:INFO:Calculating mean and std
2023-08-18 15:19:59,360:INFO:Creating metrics dataframe
2023-08-18 15:19:59,443:INFO:Uploading results into container
2023-08-18 15:19:59,444:INFO:Uploading model into container now
2023-08-18 15:19:59,444:INFO:_master_model_container: 13
2023-08-18 15:19:59,444:INFO:_display_container: 2
2023-08-18 15:19:59,444:INFO:RandomForestRegressor(n_jobs=-1, random_state=432)
2023-08-18 15:19:59,444:INFO:create_model() successfully completed......................................
2023-08-18 15:19:59,496:INFO:SubProcess create_model() end ==================================
2023-08-18 15:19:59,496:INFO:Creating metrics dataframe
2023-08-18 15:19:59,506:INFO:Initializing Extra Trees Regressor
2023-08-18 15:19:59,506:INFO:Total runtime is 0.1947097341219584 minutes
2023-08-18 15:19:59,508:INFO:SubProcess create_model() called ==================================
2023-08-18 15:19:59,508:INFO:Initializing create_model()
2023-08-18 15:19:59,508:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=et, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:19:59,508:INFO:Checking exceptions
2023-08-18 15:19:59,508:INFO:Importing libraries
2023-08-18 15:19:59,508:INFO:Copying training dataset
2023-08-18 15:19:59,511:INFO:Defining folds
2023-08-18 15:19:59,511:INFO:Declaring metric variables
2023-08-18 15:19:59,513:INFO:Importing untrained model
2023-08-18 15:19:59,515:INFO:Extra Trees Regressor Imported successfully
2023-08-18 15:19:59,519:INFO:Starting cross validation
2023-08-18 15:19:59,520:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:20:00,411:INFO:Calculating mean and std
2023-08-18 15:20:00,413:INFO:Creating metrics dataframe
2023-08-18 15:20:00,497:INFO:Uploading results into container
2023-08-18 15:20:00,497:INFO:Uploading model into container now
2023-08-18 15:20:00,498:INFO:_master_model_container: 14
2023-08-18 15:20:00,498:INFO:_display_container: 2
2023-08-18 15:20:00,498:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=432)
2023-08-18 15:20:00,498:INFO:create_model() successfully completed......................................
2023-08-18 15:20:00,550:INFO:SubProcess create_model() end ==================================
2023-08-18 15:20:00,550:INFO:Creating metrics dataframe
2023-08-18 15:20:00,559:INFO:Initializing AdaBoost Regressor
2023-08-18 15:20:00,559:INFO:Total runtime is 0.21226738293965658 minutes
2023-08-18 15:20:00,561:INFO:SubProcess create_model() called ==================================
2023-08-18 15:20:00,562:INFO:Initializing create_model()
2023-08-18 15:20:00,562:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=ada, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:20:00,562:INFO:Checking exceptions
2023-08-18 15:20:00,562:INFO:Importing libraries
2023-08-18 15:20:00,562:INFO:Copying training dataset
2023-08-18 15:20:00,564:INFO:Defining folds
2023-08-18 15:20:00,564:INFO:Declaring metric variables
2023-08-18 15:20:00,566:INFO:Importing untrained model
2023-08-18 15:20:00,569:INFO:AdaBoost Regressor Imported successfully
2023-08-18 15:20:00,573:INFO:Starting cross validation
2023-08-18 15:20:00,574:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:20:01,103:INFO:Calculating mean and std
2023-08-18 15:20:01,104:INFO:Creating metrics dataframe
2023-08-18 15:20:01,188:INFO:Uploading results into container
2023-08-18 15:20:01,189:INFO:Uploading model into container now
2023-08-18 15:20:01,189:INFO:_master_model_container: 15
2023-08-18 15:20:01,189:INFO:_display_container: 2
2023-08-18 15:20:01,189:INFO:AdaBoostRegressor(random_state=432)
2023-08-18 15:20:01,189:INFO:create_model() successfully completed......................................
2023-08-18 15:20:01,241:INFO:SubProcess create_model() end ==================================
2023-08-18 15:20:01,241:INFO:Creating metrics dataframe
2023-08-18 15:20:01,251:INFO:Initializing Gradient Boosting Regressor
2023-08-18 15:20:01,251:INFO:Total runtime is 0.22379724979400636 minutes
2023-08-18 15:20:01,253:INFO:SubProcess create_model() called ==================================
2023-08-18 15:20:01,253:INFO:Initializing create_model()
2023-08-18 15:20:01,253:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=gbr, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:20:01,253:INFO:Checking exceptions
2023-08-18 15:20:01,253:INFO:Importing libraries
2023-08-18 15:20:01,253:INFO:Copying training dataset
2023-08-18 15:20:01,256:INFO:Defining folds
2023-08-18 15:20:01,256:INFO:Declaring metric variables
2023-08-18 15:20:01,258:INFO:Importing untrained model
2023-08-18 15:20:01,260:INFO:Gradient Boosting Regressor Imported successfully
2023-08-18 15:20:01,264:INFO:Starting cross validation
2023-08-18 15:20:01,265:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:20:01,795:INFO:Calculating mean and std
2023-08-18 15:20:01,796:INFO:Creating metrics dataframe
2023-08-18 15:20:01,880:INFO:Uploading results into container
2023-08-18 15:20:01,881:INFO:Uploading model into container now
2023-08-18 15:20:01,881:INFO:_master_model_container: 16
2023-08-18 15:20:01,881:INFO:_display_container: 2
2023-08-18 15:20:01,881:INFO:GradientBoostingRegressor(random_state=432)
2023-08-18 15:20:01,881:INFO:create_model() successfully completed......................................
2023-08-18 15:20:01,933:INFO:SubProcess create_model() end ==================================
2023-08-18 15:20:01,933:INFO:Creating metrics dataframe
2023-08-18 15:20:01,943:INFO:Initializing Extreme Gradient Boosting
2023-08-18 15:20:01,943:INFO:Total runtime is 0.23532973130544027 minutes
2023-08-18 15:20:01,945:INFO:SubProcess create_model() called ==================================
2023-08-18 15:20:01,945:INFO:Initializing create_model()
2023-08-18 15:20:01,945:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=xgboost, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:20:01,946:INFO:Checking exceptions
2023-08-18 15:20:01,946:INFO:Importing libraries
2023-08-18 15:20:01,946:INFO:Copying training dataset
2023-08-18 15:20:01,948:INFO:Defining folds
2023-08-18 15:20:01,948:INFO:Declaring metric variables
2023-08-18 15:20:01,950:INFO:Importing untrained model
2023-08-18 15:20:01,952:INFO:Extreme Gradient Boosting Imported successfully
2023-08-18 15:20:01,956:INFO:Starting cross validation
2023-08-18 15:20:01,957:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:20:02,482:INFO:Calculating mean and std
2023-08-18 15:20:02,483:INFO:Creating metrics dataframe
2023-08-18 15:20:02,567:INFO:Uploading results into container
2023-08-18 15:20:02,567:INFO:Uploading model into container now
2023-08-18 15:20:02,567:INFO:_master_model_container: 17
2023-08-18 15:20:02,567:INFO:_display_container: 2
2023-08-18 15:20:02,568:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, gamma=None,
             gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_to_onehot=None, max_delta_step=None, max_depth=None,
             max_leaves=None, min_child_weight=None, missing=nan,
             monotone_constraints=None, n_estimators=100, n_jobs=-1,
             num_parallel_tree=None, predictor=None, random_state=432,
             reg_alpha=None, reg_lambda=None, ...)
2023-08-18 15:20:02,568:INFO:create_model() successfully completed......................................
2023-08-18 15:20:02,620:INFO:SubProcess create_model() end ==================================
2023-08-18 15:20:02,620:INFO:Creating metrics dataframe
2023-08-18 15:20:02,630:INFO:Initializing Light Gradient Boosting Machine
2023-08-18 15:20:02,630:INFO:Total runtime is 0.24678624868392945 minutes
2023-08-18 15:20:02,632:INFO:SubProcess create_model() called ==================================
2023-08-18 15:20:02,633:INFO:Initializing create_model()
2023-08-18 15:20:02,633:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:20:02,633:INFO:Checking exceptions
2023-08-18 15:20:02,633:INFO:Importing libraries
2023-08-18 15:20:02,633:INFO:Copying training dataset
2023-08-18 15:20:02,635:INFO:Defining folds
2023-08-18 15:20:02,636:INFO:Declaring metric variables
2023-08-18 15:20:02,637:INFO:Importing untrained model
2023-08-18 15:20:02,640:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-18 15:20:02,644:INFO:Starting cross validation
2023-08-18 15:20:02,645:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:20:03,464:INFO:Calculating mean and std
2023-08-18 15:20:03,465:INFO:Creating metrics dataframe
2023-08-18 15:20:03,550:INFO:Uploading results into container
2023-08-18 15:20:03,551:INFO:Uploading model into container now
2023-08-18 15:20:03,551:INFO:_master_model_container: 18
2023-08-18 15:20:03,551:INFO:_display_container: 2
2023-08-18 15:20:03,551:INFO:LGBMRegressor(random_state=432)
2023-08-18 15:20:03,551:INFO:create_model() successfully completed......................................
2023-08-18 15:20:03,603:INFO:SubProcess create_model() end ==================================
2023-08-18 15:20:03,604:INFO:Creating metrics dataframe
2023-08-18 15:20:03,614:INFO:Initializing CatBoost Regressor
2023-08-18 15:20:03,614:INFO:Total runtime is 0.26317725181579593 minutes
2023-08-18 15:20:03,616:INFO:SubProcess create_model() called ==================================
2023-08-18 15:20:03,616:INFO:Initializing create_model()
2023-08-18 15:20:03,616:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=catboost, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:20:03,616:INFO:Checking exceptions
2023-08-18 15:20:03,616:INFO:Importing libraries
2023-08-18 15:20:03,616:INFO:Copying training dataset
2023-08-18 15:20:03,619:INFO:Defining folds
2023-08-18 15:20:03,619:INFO:Declaring metric variables
2023-08-18 15:20:03,621:INFO:Importing untrained model
2023-08-18 15:20:03,624:INFO:CatBoost Regressor Imported successfully
2023-08-18 15:20:03,629:INFO:Starting cross validation
2023-08-18 15:20:03,629:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:20:05,415:INFO:Calculating mean and std
2023-08-18 15:20:05,417:INFO:Creating metrics dataframe
2023-08-18 15:20:05,504:INFO:Uploading results into container
2023-08-18 15:20:05,504:INFO:Uploading model into container now
2023-08-18 15:20:05,504:INFO:_master_model_container: 19
2023-08-18 15:20:05,504:INFO:_display_container: 2
2023-08-18 15:20:05,504:INFO:<catboost.core.CatBoostRegressor object at 0x7fbee2317410>
2023-08-18 15:20:05,504:INFO:create_model() successfully completed......................................
2023-08-18 15:20:05,557:INFO:SubProcess create_model() end ==================================
2023-08-18 15:20:05,557:INFO:Creating metrics dataframe
2023-08-18 15:20:05,567:INFO:Initializing Dummy Regressor
2023-08-18 15:20:05,567:INFO:Total runtime is 0.2957307815551758 minutes
2023-08-18 15:20:05,569:INFO:SubProcess create_model() called ==================================
2023-08-18 15:20:05,569:INFO:Initializing create_model()
2023-08-18 15:20:05,569:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=dummy, fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fbef4f12810>, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:20:05,569:INFO:Checking exceptions
2023-08-18 15:20:05,570:INFO:Importing libraries
2023-08-18 15:20:05,570:INFO:Copying training dataset
2023-08-18 15:20:05,572:INFO:Defining folds
2023-08-18 15:20:05,572:INFO:Declaring metric variables
2023-08-18 15:20:05,574:INFO:Importing untrained model
2023-08-18 15:20:05,576:INFO:Dummy Regressor Imported successfully
2023-08-18 15:20:05,580:INFO:Starting cross validation
2023-08-18 15:20:05,581:INFO:Cross validating with KFold(n_splits=10, random_state=432, shuffle=True), n_jobs=-1
2023-08-18 15:20:06,061:INFO:Calculating mean and std
2023-08-18 15:20:06,062:INFO:Creating metrics dataframe
2023-08-18 15:20:06,149:INFO:Uploading results into container
2023-08-18 15:20:06,149:INFO:Uploading model into container now
2023-08-18 15:20:06,149:INFO:_master_model_container: 20
2023-08-18 15:20:06,149:INFO:_display_container: 2
2023-08-18 15:20:06,150:INFO:DummyRegressor()
2023-08-18 15:20:06,150:INFO:create_model() successfully completed......................................
2023-08-18 15:20:06,202:INFO:SubProcess create_model() end ==================================
2023-08-18 15:20:06,202:INFO:Creating metrics dataframe
2023-08-18 15:20:06,219:INFO:Initializing create_model()
2023-08-18 15:20:06,219:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x7fbee22f9150>, estimator=GradientBoostingRegressor(random_state=432), fold=KFold(n_splits=10, random_state=432, shuffle=True), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-18 15:20:06,219:INFO:Checking exceptions
2023-08-18 15:20:06,220:INFO:Importing libraries
2023-08-18 15:20:06,220:INFO:Copying training dataset
2023-08-18 15:20:06,222:INFO:Defining folds
2023-08-18 15:20:06,222:INFO:Declaring metric variables
2023-08-18 15:20:06,222:INFO:Importing untrained model
2023-08-18 15:20:06,222:INFO:Declaring custom model
2023-08-18 15:20:06,223:INFO:Gradient Boosting Regressor Imported successfully
2023-08-18 15:20:06,223:INFO:Cross validation set to False
2023-08-18 15:20:06,223:INFO:Fitting Model
2023-08-18 15:20:06,301:INFO:GradientBoostingRegressor(random_state=432)
2023-08-18 15:20:06,301:INFO:create_model() successfully completed......................................
2023-08-18 15:20:06,385:INFO:_master_model_container: 20
2023-08-18 15:20:06,385:INFO:_display_container: 2
2023-08-18 15:20:06,385:INFO:GradientBoostingRegressor(random_state=432)
2023-08-18 15:20:06,385:INFO:compare_models() successfully completed......................................
2023-08-28 00:34:12,197:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:311: UserWarning: resource_tracker: There appear to be 6 leaked semlock objects to clean up at shutdown
  'resource_tracker: There appear to be '

2023-08-28 00:34:12,204:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:311: UserWarning: resource_tracker: There appear to be 40 leaked folder objects to clean up at shutdown
  'resource_tracker: There appear to be '

2023-08-28 00:34:12,204:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_068437b47c8740ae832da0383b445c2d: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,204:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_6294c63c747b43fdbbc7c709cd73dee9: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,204:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_71eeafd7b74d4d4795543cdeeaf77700_58e4c136eca046b4a29952eaf7b748a0: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,204:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_412a8b8dd6674d719cc1cdf513135ffb: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,204:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_9031de59c26d4e39a66b18feb1637483_167312b5744449bf8a7a48497a5a2b11: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,204:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_60003acfcbf54203aa4e628f72283907: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,204:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_910f5293dde941a88c0e520482a3013f_1721fe272ba74ce69be50cbb36173d54: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,204:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_2aa200fbaa594c1891ddc016d0dd283a: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,204:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_86a3aae433354b1d94b44366cb5c40a0_841222840b2b4395852e48f8eb59f041: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,204:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_624fdc4581f84ba5b9aa72d45c7a7d72: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,204:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_c058d033a9e94883a711f925572afa43_4e99964bcf4c4e85b2b3ce9aef55c9bd: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,204:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_af805ce5a8a7491ba5e59c5ae45c00d1: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_9f4f0a8f3dd24073a71bd8826cd81294_4f734b9fc379475b8f1616282d79d876: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_a374a3673b2243c4a973a0897546919d: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_3f9aca6215774af692eb8330b57272a4_4c2ea7ad71074f47878992cdf900a235: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_61a59d1310b344e3b7914b8a5b873a45: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_78872d0eb1fe42b798a7b11e044a5d00_7cf109ec347a422cbd33edec525cb477: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_73aeb679e5704ca29508d90be71ddad0: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_89b816c13b3342cb94d5c252ee3a7bec_b44940825aaa479c95b21014eb7df51a: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_43e3423d72ea43aa81983281218d1921: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_0a40a478cc3b4432afa47488ca40aeb8_aed5c500a1eb4d4387c45fddca32bd75: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_4e2327d0e00a40e896cfe13ce3a47ef7: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_9818f9b1718f4ca192c22cde30bd802f_a3c4a0ffc7614628ad4ff97437599812: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_73ab7285c7874382924f62e1016b46eb: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_8438d8f613d04f42bde98c57cf0fe650_c2e36393362f42d798e32b458a5511cd: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_a280860604bc4509b946fd72311ea659: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_c6bb6c5305c2464193cb52715a48b593_c330e3a721be40c086070e6cf06b6892: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_9299e4f34c1342bf8cec9e796d2100ed: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_0d4f771fa3444bf4b4fc210272bbdb7e_db8be2ed52124acbb15017bdaae98950: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_d85e9014caad4e31a2e55f3364996ebb: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_a9aace12e3f74c9fbc6b5d64f68a9564_2d5f6bcd9e944636a9a0757308d4985f: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_fe306745871e47d2b22b151d3358c576: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_782da66a94ae42079c70209b3828ff7b_eecaf673343e491fb4d99050d1f75eb4: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_b06defc14da7495b8124dda41bac5cc2: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_e1949d3cb51e4de99ead7d66a06af2c9_dd58c8dfcc1840c68dc712d6c5de97f9: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_11b0eb5a69fc4c0386ff843806fe5fd3: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_ca7948ea56c54060b02a6932903ca4c4_17ca5c56d0254500ba61283816d584d3: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_7bc534c83f864e52af63430c134119bc: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_bd9b23143e054f2f89e6999bcce5a8b0_407eda2b703146f186c51e5968347cf5: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

2023-08-28 00:34:12,205:WARNING:/Users/adnane/opt/anaconda3/envs/ADN/lib/python3.7/site-packages/joblib/externals/loky/backend/resource_tracker.py:326: UserWarning: resource_tracker: /var/folders/lx/srv0s20d1vs78lcwbd1_625h0000gn/T/joblib_memmapping_folder_17453_16ec5aa0d8294348986f3624439aa1dc_76c3ad0016a24254a9c714365d8f057a: FileNotFoundError(2, 'No such file or directory')
  warnings.warn(f'resource_tracker: {name}: {e!r}')

